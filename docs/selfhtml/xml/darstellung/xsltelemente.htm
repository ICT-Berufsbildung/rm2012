<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>SELFHTML: XML / Darstellung von XML-Daten / XSLT-Elemente</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Welche XSLT-Elemente es gibt - Erklärung der einzelnen Elemente anhand von Beispielen.">
<meta name="keywords"       content="SELFHTML, XML, XSLT, Transformation, XSLT-Elemente">
<meta name="author"         content="Redaktion SELFHTML, selfhtml81@selfhtml.org">
<meta name="robots"         content="noindex, nofollow">
<meta name="DC.Publisher"   content="SELFHTML e. V.">
<meta name="DC.Date"        content="2006-03-16T18:24:39+01:00">
<meta name="DC.Identifier"  content="http://de.selfhtml.org/xml/darstellung/xsltelemente.htm">
<meta name="DC.Language"    content="de">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.created" content="2001-10-27T08:00+01:00">
<meta name="SELF.Pagetype"  content="page">
<link rel="alternate" type="application/atom+xml" title="SELFHTML-Weblog (Atom, gesamt)" href="http://aktuell.de.selfhtml.org/weblog/atom-feed">
<link rel="alternate" type="application/rss+xml" title="SELFHTML-Weblog (RSS, Auszüge)" href="http://aktuell.de.selfhtml.org/weblog/rss-feed">
<link rel="shortcut icon" type="image/x-icon" href="../../src/favicon.ico">
<link rel="author" title="Impressum" href="../../editorial/impressum.htm">
<link rel="contents" title="Inhaltsverzeichnis" href="../../navigation/inhalt.htm">
<link rel="index" title="Stichwortverzeichnis" href="../../navigation/stichwort.htm">
<link rel="search" title="Suche" href="../../navigation/suche/index.htm">
<link rel="help" title="Hilfe" href="../../editorial/index.htm">
<link rel="copyright" title="Urheberrecht" href="../../editorial/copyright.htm">
<link rel="top" title="SELFHTML" href="../../index.htm">
<link rel="up" title="Darstellung von XML-Daten" href="index.htm">
<link rel="next" title="XPath-Syntax" href="xpathsyntax.htm">
<link rel="prev" title="Beispiele für XSLT" href="xsltbeispiele.htm">
<link rel="first" title="XML-Darstellung mit Stylesheets" href="css.htm">
<link rel="last" title="XPath-Funktionen" href="xpathfunktionen.htm">
</head>
<body>

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td colspan="2" class="nav"><a class="an" name="top"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">XML/DTDs</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Darstellung von XML-Daten</a></td>
</tr>
<tr>
<td class="doc" width="110"><a href="../../index.htm"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></a></td>
<td class="docbot" width="100%"><h1 class="ph1">XSLT-Elemente</h1></td>
</tr>
<tr>
<td class="doctop">
<img src="../../src/dokx.gif" width="30" height="20" vspace="6" alt="Informationsseite">
</td>
<td valign="top" nowrap="nowrap">
<p>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#Hinweise">Hinweise zu den XSLT-Elementen</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#apply_imports">xsl:apply-imports</a> (importierte Stylesheets anwenden)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#apply_templates">xsl:apply-templates</a> (untergeordnete Schablonen anwenden)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#attribute">xsl:attribute</a> (Attribut im Ergebnisbaum erzeugen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#attribute_set">xsl:attribute-set</a> (Mehrere Attribute im Ergebnisbaum erzeugen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#call_template">xsl:call-template</a> (Schablone aufrufen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#choose">xsl:choose</a> (Auswahl treffen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#comment">xsl:comment</a> (Kommentar setzen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#copy">xsl:copy</a> (Element in Ergebnisbaum kopieren)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#copy_of">xsl:copy-of</a> (Beliebige ermittelte Daten in Ergebnisbaum kopieren)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#decimal_format">xsl:decimal-format</a> (Dezimalformat)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#element">xsl:element</a> (Element erzeugen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#fallback">xsl:fallback</a> (alternative Ausführungsanweisung)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#for_each">xsl:for-each</a> (für jedes Element aus einer Menge wiederholen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#if">xsl:if</a> (wenn-Bedingung)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#include">xsl:include</a> (Stylesheets inkludieren)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#import">xsl:import</a> (Stylesheets importieren)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#key">xsl:key</a> (Schlüssel für Auswahl von Elementen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#message">xsl:message</a> (Meldung beim Transformieren ausgeben)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#namespace_alias">xsl:namespace-alias</a> (Stylesheet in anderes Stylesheet transformieren)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#number">xsl:number</a> (fortlaufende Nummerierung)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#otherwise">xsl:otherwise</a> (andernfalls-Anweisung)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#output">xsl:output</a> (Erzeugen des Ergebnisbaums kontrollieren)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#param">xsl:param</a> (Parameter definieren)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#preserve_space">xsl:preserve-space</a> (Leerraumzeichen beibehalten)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#processing_instruction">xsl:processing-instruction</a> (Stylesheet-Code generieren)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#sort">xsl:sort</a> (Elemente nach Inhalt sortieren)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#strip_space">xsl:strip-space</a> (Behandlung von Leerraumzeichen steuern)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> (Stylesheet-Wurzelelement)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> (Schablone für Ergebnisbaum definieren)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#text">xsl:text</a> (Zeicheninhalt ausgeben)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#transform">xsl:transform</a> (Stylesheet-Wurzelelement)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#value_of">xsl:value-of</a> (Wert ausgeben)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#variable">xsl:variable</a> (Variable definieren)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#when">xsl:when</a> (Bedingung innerhalb einer Auswahl)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#with_param">xsl:with-param</a> (Parameter einen Wert zuweisen)<br>


</p>
</td>
</tr><tr><td colspan="2" class="doc">&nbsp;<a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a>&nbsp;</td></tr>
</table>



<h2><a class="an" name="Hinweise">Hinweise zu den XSLT-Elementen</a></h2>

<p>Den logischen Einstieg in eine XSL-Datei stellt das <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a>-Element dar. Das wichtigste Element innerhalb davon ist das <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a>-Element, mit dessen Hilfe der Ausgangsbaum der XML-Daten in einen Ergebnisbaum einer anderen XML-gerechten Sprache (z.B. auch HTML) übersetzt wird.</p>

<p>Bei den Beschreibungen der Elemente ist häufig von Knoten und Knotentypen die Rede. Diese Begriffe werden im Abschnitt <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../regeln/baumstruktur.htm#knoten_knotensets">Knoten und Knoten-Sets in der Baumstruktur</a> einführend erläutert. Vertiefende Informationen dazu stehen im Abschnitt über die <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm">XPath-Syntax</a>. Denn XPath stellt eine Art von Ergänzungs- oder Hilfssprache innerhalb eines XSLT Stylesheets dar, um unter anderem die Bestandteile eines XML-Dokuments genau zu adressieren. XPath hat, wie XSLT, eine eigene Spezifikation.</p>

<p>Beachten Sie zum Thema Internet Explorer die <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xsltbeispiele.htm#hinweise">Hinweise zu den Beispielen</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="apply_imports">xsl:apply-imports (importierte Stylesheets anwenden)</a></h2>

<p>Wendet innerhalb eines mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> definierten Templates extern definierte Templates an, die mit <code>xsl:import</code> importiert werden.</p>

<p>Erwartet keine Attribute.</p>

<p>Kann nur innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>apply_imports.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/apply_imports.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>apply_imports.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/apply_imports.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>apply_imports.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="apply_imports1.xsl" ?&gt;
&lt;test&gt;
&lt;bild&gt;pinguin.gif&lt;/bild&gt;
&lt;text&gt;Der Pinguin ist das Wahrzeichen von Linux&lt;/text&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>apply_imports1.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:import href="apply_imports2.xsl" /&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;xsl:apply-imports/&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>apply_imports2.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="bild"&gt;
&lt;img&gt;&lt;xsl:attribute name="src"&gt;&lt;xsl:value-of select="." /&gt;&lt;/xsl:attribute&gt;&lt;/img&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="text"&gt;
&lt;p&gt;&lt;xsl:value-of select="." /&gt;&lt;/p&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im XML-Dokument <var>apply_imports.xml</var> wird das Stylesheet <var>apply_imports1.xsl</var> eingebunden. Dort wird mit Hilfe von <code>&lt;xsl:import href="apply_imports2.xsl"&nbsp;/&gt;</code> ein zweites Stylesheet eingebunden, nämlich <var>apply_imports2.xsl</var>. In der zweiten Stylesheet-Datei stehen Definitionen zur HTML-Umsetzung der Elemente <code>bild</code> und <code>text</code>. Die entsprechenden Definitionen werden im ersten Stylesheet an der Stelle angewendet, an der <code>&lt;xsl:apply-imports/&gt;</code> notiert ist.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="apply_templates">xsl:apply-templates (untergeordnete Schablonen anwenden)</a></h2>

<p>Wendet innerhalb eines mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> definierten Templates andere Templates an, die gegebenenfalls mit <code>xsl:template</code> definiert sind. Auf diese Weise lassen sich Abhängigkeiten und Reihenfolgen bei der Anwendung von Templates steuern.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>select</code></td>
<td valign="top"><i>(optional)</i> Wählt ein Template aus, das angewendet werden soll. Angegeben wird das gewünschte Knoten-Set bzw. ein Pfad nach <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm">XPath-Syntax</a>. Wenn eine <code>xsl:template</code>-Definition für dieses Element existiert, wird sie angewendet. Fehlt das <code>select</code>-Attribut, werden alle nächstuntergeordneten <code>xsl:template</code>-Definitionen angewendet.</td>
</tr>
<tr>
<td valign="top"><code>mode</code></td>
<td valign="top"><i>(optional)</i> Wählt das mit <code>select</code> angegebene Template nur dann aus, wenn es den angegebenen Modus hat. Dazu muss bei der <code>xsl:template</code>-Definition mit <code>mode</code> ein übereinstimmender Name für den Modus vergeben sein.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>apply_templates.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/apply_templates.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>apply_templates.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/apply_templates.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>apply_templates.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="apply_templates.xsl" ?&gt;
&lt;test&gt;
&lt;text&gt;
Was du &lt;zeit&gt;heute&lt;/zeit&gt; kannst besorgen, das verschiebe nicht auf &lt;zeit&gt;morgen&lt;/zeit&gt;.
&lt;/text&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>apply_templates.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="text"&gt;
 &lt;p style="font-family:Tahoma; font-size:18px"&gt;
 &lt;xsl:apply-templates /&gt;
 &lt;/p&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="zeit"&gt;
 &lt;i style="color:red"&gt;
  &lt;xsl:value-of select="." /&gt;
 &lt;/i&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel-Stylesheet kommt die Anweisung <code>&lt;xsl:apply-templates /&gt;</code> (ohne Attribute) zweimal vor. Zum ersten Mal ist sie in der Template-Definition für die Dokumentwurzel notiert. Dort steht die Anweisung im sichtbaren Bereich des zu erzeugenden HTML-Codes, also zwischen <code>&lt;body&gt;</code> und <code>&lt;/body&gt;</code>. Da kein <code>select</code>-Attribut angegeben ist, bewirkt sie, dass an der entsprechenden Stelle des HTML-Codes die Templates für die nächstuntergeordneten Elemente angewendet werden. In der XML-Struktur des Beispiels sind dies Elemente vom Typ <code>text</code>. Für solche Elemente ist mit <code>&lt;xsl:template&nbsp;match="text"&gt;</code> ein Template definiert. Elemente dieses Typs werden in HTML in einen Textabsatz <code>&lt;p&gt;...&lt;/p&gt;</code> eingeschlossen, der mit CSS formatiert wird. Für den Inhalt des Textabsatzes gilt jedoch erneut: Template-Definitionen untergeordneter Elemente beachten! Darum ist innerhalb des Textabsatzes wieder die Anweisung <code>&lt;xsl:apply-templates&nbsp;/&gt;</code> notiert. Als untergeordnetes Element von <code>text</code> kann im Beispiel das Element <code>zeit</code> vorkommen. Für dieses Element wird mit <code>&lt;xsl:template&nbsp;match="zeit"&gt;</code> wiederum ein Template definiert. Text in solchen Elementen wird in HTML kursiv und rot dargestellt.<br>
Da innerhalb des <code>zeit</code>-Elements keine weiteren, untergeordneten Templates beachtet werden müssen, braucht nur noch der jeweilige Inhalt des Elements beachtet werden. Dies wird durch die Anweisung <code>&lt;xsl:value-of select="."&nbsp;/&gt;</code> bewerkstelligt (siehe auch <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#value_of">xsl:value-of</a>).</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="attribute">xsl:attribute (Attribut im Ergebnisbaum erzeugen)</a></h2>

<p>Kann im Ergebnisbaum ein Attribut setzen und mit einem Wert versorgen, also z.B. im HTML-Element <code>div</code> ein Attribut <code>align</code> setzen und mit dem Wert <code>center</code> versorgen.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>name</code></td>
<td valign="top"><i>(obligatorisch)</i> Gibt den Namen des Attributs an, z.B. <code>align</code>.</td>
</tr>
<tr>
<td valign="top"><code>namespace</code></td>
<td valign="top"><i>(optional)</i> Gibt den URI des Namensraums an, aus dem das Attribut stammt.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> oder innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#attribute_set">xsl:attribute-set</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>attributes.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/attribute.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>attribute.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/attribute.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>attribute.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="attribute.xsl" ?&gt;
&lt;test&gt;
&lt;text ausrichtung="links"&gt;
Das ist linksbündiger Text
&lt;/text&gt;
&lt;text ausrichtung="zentriert"&gt;
Das ist zentrierter Text
&lt;/text&gt;
&lt;text ausrichtung="rechts"&gt;
Das ist rechtsbündiger Text
&lt;/text&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>attributes.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="text"&gt;
 &lt;p&gt;
 &lt;xsl:choose&gt;
  &lt;xsl:when test="@ausrichtung='zentriert'"&gt;
   &lt;xsl:attribute name="align"&gt;center&lt;/xsl:attribute&gt;
  &lt;/xsl:when&gt;
  &lt;xsl:when test="@ausrichtung='rechts'"&gt;
   &lt;xsl:attribute name="align"&gt;right&lt;/xsl:attribute&gt;
  &lt;/xsl:when&gt;
  &lt;xsl:otherwise&gt;
   &lt;xsl:attribute name="align"&gt;left&lt;/xsl:attribute&gt;
  &lt;/xsl:otherwise&gt;
 &lt;/xsl:choose&gt;
 &lt;xsl:value-of select="." /&gt;
 &lt;/p&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel gibt es ein XML-Element <code>text</code> mit dem Attribut <code>ausrichtung</code>, das die Werte <code>links</code>, <code>rechts</code> und <code>zentriert</code> haben kann (laut DTD, im Beispiel weggelassen). In den XML-Daten sind drei Elemente des Typs <code>text</code> notiert, jeweils mit anderem Wert bei <code>ausrichtung</code>. Im Beispiel-Stylesheet wird für Element <code>text</code> mit <code>&lt;xsl:template&nbsp;match="text"&gt;</code> ein Template definiert. Das Template bewirkt, dass Elemente vom Typ <code>text</code> in HTML-Elemente vom Typ <code>p</code> übersetzt werden. Dabei soll jedoch auch die Ausrichtung des Textes berücksichtigt werden. Um zu entscheiden, ob im <code>p</code>-Element das Attribut <code>align</code> den Wert <code>center</code>, <code>right</code> oder <code>left</code> erhalten soll, wird mit den Anweisungen <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#choose">xsl:choose</a>, <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#when">xsl:when</a> und <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#otherwise">xsl:otherwise</a> abgefragt, ob das zu übersetzende <code>text</code>-Element der XML-Daten beim Attribut <code>ausrichtung</code> den Wert <code>zentriert</code>, <code>rechts</code> oder <code>links</code> hat. Unterhalb des Abfrage-Komplexes wird schließlich mit der Anweisung <code>&lt;xsl:value-of&nbsp;select="."&nbsp;/&gt;</code> der Inhalt des XML-Elements <code>text</code> in den Inhalt des HTML-Elements <code>p</code> übersetzt.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="attribute_set">xsl:attribute-set (mehrere Attribute im Ergebnisbaum erzeugen)</a></h2>

<p>Definiert ein oder mehrere Attribute für den Ergebnisbaum, und zwar separat. Besonders sinnvoll, um häufig verwendete Attributketten wie <code>border="0" cellpadding="0" cellspacing="0"</code> als Baustein zu definieren, oder um alternative Elementausprägungen durch unterschiedliche Attributbausteine bereitzustellen.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>name</code></td>
<td valign="top"><i>(obligatorisch)</i> vergibt einen Namen für das Attribut-Set. Unter diesem Namen kann das Attribut-Set anschließend verwendet werden.</td>
</tr>
<tr>
<td valign="top"><code>use-attribute-sets</code></td>
<td valign="top"><i>(optional)</i> Bindet andere Attribut-Sets in das aktuelle Attribut-Set mit ein. Anzugeben sind ein oder mehrere Namen von anderen Attribut-Sets. Mehrere Namen werden durch Leerzeichen getrennt.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen und muss außerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> notiert sein. Kann von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#element">xsl:element</a> oder <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#copy">xsl:copy</a> über deren Attribut <code>use-attribute-sets</code> innerhalb eines Templates verwendet werden.</p>

<h3 class="xmp">Beispieldatei <var>attribute_set.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/attribute_set.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>attribute_set.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/attribute_set.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>attribute_set.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="attribute_set.xsl" ?&gt;
&lt;test&gt;
 &lt;eintrag&gt;
  &lt;begriff&gt;
   HTML
  &lt;/begriff&gt;
  &lt;definition&gt;
   Abkürzung für 'How To Make Love'
  &lt;/definition&gt;
 &lt;/eintrag&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>attribute_set.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:attribute-set name="sichtbar"&gt;
  &lt;xsl:attribute name="border"&gt;1&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="cellpadding"&gt;3&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="cellspacing"&gt;1&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;

&lt;xsl:attribute-set name="unsichtbar"&gt;
  &lt;xsl:attribute name="border"&gt;0&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="cellpadding"&gt;3&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="cellspacing"&gt;1&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;xsl:element name="table" use-attribute-sets="sichtbar"&gt;
 &lt;xsl:for-each select="test/eintrag"&gt;
 &lt;tr&gt;
  &lt;td valign="top"&gt;&lt;b&gt;&lt;xsl:value-of select="begriff" /&gt;&lt;/b&gt;&lt;/td&gt;
  &lt;td valign="top"&gt;&lt;xsl:value-of select="definition" /&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/xsl:for-each&gt;
 &lt;/xsl:element&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel definiert ein Glossar. Die XML-Daten enthalten einen Glossareintrag. Im Beispiel-Stylesheet wird das Glossar in eine HTML-Tabelle umgesetzt. Zu Beginn des Beispielausschnitts und außerhalb der Template-Definitionen werden mit der <code>attribute-set</code>-Anweisung zwei Attribut-Sets definiert, eines mit dem Namen <code>sichtbar</code>, und eines mit dem Namen <code>unsichtbar</code>. Zwischen dem einleitenden Tag <code>&lt;xsl:attribute-set&gt;</code> und seinem Gegenstück <code>&lt;/xsl:attribute-set&gt;</code> werden mit Hilfe von <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#attribute">xsl:attribute</a> Attribute definiert, die später in den Template-Definitionen verwendet werden können. Im Beispiel handelt es sich um Attribute, die später im <code>table</code>-Element Verwendung finden sollen. Die beiden Attribut-Sets definieren die Attribute so, dass diese einmal die Definition einer sichtbaren Tabelle und einmal die einer unsichtbaren Tabelle ermöglichen.<br>
Innerhalb der Template-Definition, in der die HTML-Tabelle erzeugt wird, wird mit der Anweisung
<code>&lt;xsl:element name="table" use-attribute-sets="sichtbar"&gt;</code> das <code>table</code>-Element erzeugt, und zwar mit den Attributen und Werten, die im Attribut-Set mit dem Namen <code>sichtbar</code> definiert wurden.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="call_template">xsl:call-template (Schablone aufrufen)</a></h2>

<p>Ruft ein anderes Template mit dessen Namen auf. Kann dabei auch Parameterwerte an das aufgerufene Template übergeben.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>name</code></td>
<td valign="top"><i>(obligatorisch)</i> der Namen des aufzurufenden Templates, das mit <code>&lt;xsl:template&nbsp;name="..."&nbsp;[...]&gt;</code> definiert sein muss.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen. Kann ohne Inhalt notiert werden oder mit Inhalt und End-Tag. Als Inhalt sind Elemente vom Typ <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#with_param">xsl:with-param</a> erlaubt.</p>

<h3 class="xmp">Beispieldatei <var>call_template.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/call_template.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>call_template.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/call_template.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>call_template.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="call_template.xsl" ?&gt;
&lt;test&gt;
&lt;kontakt mail="ludo@example.org"&gt;Stanislaw Ludowiczy&lt;/kontakt&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>call_template.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template name="Label"&gt;
 &lt;xsl:text&gt;, E-Mail-Adresse: &lt;/xsl:text&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="kontakt"&gt;
 &lt;div&gt;
 &lt;xsl:value-of select="." /&gt;
 &lt;xsl:call-template name="Label" /&gt;
 &lt;xsl:value-of select="@mail" /&gt;
 &lt;/div&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das XML-Beispiel enthält Kontaktdaten, wobei im Element <code>kontakt</code> als Inhalt der Name notiert wird, und das Element als Attribut die zugehörige E-Mail-Adresse zugewiesen bekommt.<br>
Im Beispiel-Stylesheet wird mit <code>&lt;xsl:template&nbsp;name="Label"&gt;</code> ein Template definiert und benannt. Darin wird mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#text">xsl:text</a> statischer Text definiert. Innerhalb eines anderen Templates, das mit <code>&lt;xsl:template&nbsp;match="kontakt"&gt;</code> definiert wird, ist ein Aufruf des Templates mit dem Namen <code>Label</code> notiert, und zwar in der Anweisung
 <code>&lt;xsl:call-template&nbsp;name="Label"&nbsp;/&gt;</code>. Dadurch wird im Beispiel aus den XML-Daten <code>&lt;kontakt mail="ludo@example.org"&gt;Stanislaw Ludowiczy&lt;/kontakt&gt;</code> die Ausgabe <code>&lt;div&gt;Stanislaw Ludowiczy, E-Mail-Adresse: ludo@example.org&lt;/div&gt;</code> erzeugt.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="choose">xsl:choose (Auswahl treffen)</a></h2>

<p>Bildet den Rahmen für eine Reihe von Abfragen, die mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#when">xsl:when</a> und <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#text">xsl:otherwise</a> durchgeführt werden. Die Reihe kann aus beliebig vielen <code>xsl:when</code>-Abfragen und einer abschließenden <code>xsl:otherwise</code>-Anweisung bestehen. Ausgewählt wird diejenige Abfrage, deren Bedingung als erste zutrifft.</p>

<p>Hat keine Attribute.</p>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>choose.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/choose.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>choose.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/choose.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>choose.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="choose.xsl" ?&gt;
&lt;test&gt;
&lt;zahl&gt;69&lt;/zahl&gt;
&lt;zahl&gt;12345&lt;/zahl&gt;
&lt;zahl&gt;743&lt;/zahl&gt;
&lt;zahl&gt;915743&lt;/zahl&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>choose.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;h3&gt;Die Zahlen lauten:&lt;/h3&gt;
 &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="zahl"&gt;
&lt;div&gt;
&lt;xsl:value-of select="." /&gt;
&lt;xsl:variable name="wert" select="." /&gt;
 &lt;xsl:choose&gt;
  &lt;xsl:when test="$wert &amp;lt; 10000"&gt;
   &lt;xsl:text&gt; (eine kleine Zahl)&lt;/xsl:text&gt;
  &lt;/xsl:when&gt;
  &lt;xsl:otherwise&gt;
   &lt;xsl:text&gt; (eine gro&amp;szlig;e Zahl)&lt;/xsl:text&gt;
  &lt;/xsl:otherwise&gt;
 &lt;/xsl:choose&gt;
&lt;/div&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In den XML-Daten des Beispiels werden eine Reihe Zahlen notiert, und zwar jeweils in einem Element namens <code>zahl</code>. Im Beispiel-Stylesheet wird mit <code>&lt;xsl:template&nbsp;match="zahl"&gt;</code> das Template definiert, das die HTML-Ausgabe der Zahlen steuert. Mit <code>&lt;xsl:value-of&nbsp;select="."&nbsp;/&gt;</code> wird der Wert der Zahl ausgegeben (siehe auch <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#value_of">xsl:value-of</a>). Anschließend wird eine Variable namens <code>wert</code> definiert, die sich den Wert, also den Inhalt zwischen <code>&lt;zahl&gt;</code> und <code>&lt;/zahl&gt;</code>, merkt (siehe auch <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#variable">xsl:variable</a>). Mit <code>&lt;xsl:choose&gt;</code> wird sodann eine Abfragereihe eingeleitet. Sie enthält eine <code>xsl:when</code>-Abfrage und eine <code>xsl:otherwise</code>-Anweisung. Bei der <code>xsl:when</code>-Abfrage wird abgefragt, ob der Wert der Variablen <code>wert</code> kleiner als 10000 ist. Wenn ja, wird hinter die bereits ausgegebene Zahl der Text <code>(eine kleine Zahl)</code> ausgegeben, andernfalls der Text <code>(eine große Zahl)</code>. Für die Textausgabe wird <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#text">xsl:text</a> benutzt.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="comment">xsl:comment (Kommentar setzen)</a></h2>

<p>Schließt Ausgaben im Ergebnisbaum in XML- (auch HTML)-gerechte Kommentare ein, sodass der Inhalt nicht ausgegeben wird.</p>

<p>Hat keine Attribute.</p>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispielauszug aus einem XSL-Stylesheet:</h3>

<pre>
&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;script type="text/javascript"&gt;
 &lt;xsl:comment&gt;
   alert("Hallo Welt");
 &lt;/xsl:comment&gt;
 &lt;/script&gt;
 &lt;/head&gt;
 &lt;body&gt;
 Hallo Welt
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel-Stylesheet wird bei der HTML-Ausgabe unter anderem ein JavaScript-Bereich notiert. Der Inhalt eines solchen Bereichs sollte, um den Inhalt für nicht-javascript-fähige Browser unzugänglich machen, auskommentiert werden. Im Beispiel wird dies mit Hilfe der <code>xsl:comment</code>-Anweisung realisiert.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="copy">xsl:copy (Element in Ergebnisbaum kopieren)</a></h2>

<p>Kopiert einen aktuellen Knoten in den Ergebnisbaum an die Stelle, an der die Anweisung notiert ist. Das ist beispielsweise sinnvoll, wenn die XML-Daten Elemente enthalten, für die es in der Ergebnissprache ein gleichnamiges Element gibt. Es werden die Element-Tags und der PCDATA-Inhalt kopiert, jedoch weder Attribute noch Kindelemente (siehe dazu auch <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#copy_of">xsl:copy-of</a>).</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>use-attribute-sets</code></td>
<td valign="top"><i>(optional)</i> Attribute in die Kopie mit einfügen, die mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#attribute_set">xsl:attribute-set</a> definiert sind.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen. Kann als Inhalt alles enthalten, was auch innerhalb von <code>xsl:template</code> erlaubt ist.</p>

<h3 class="xmp">Beispieldatei <var>copy.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/copy.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>copy.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/copy.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>copy.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="copy.xsl" ?&gt;
&lt;test&gt;
&lt;p&gt;Wenn wir uns für besser halten, sind wir es schon dadurch nicht&lt;/p&gt;
&lt;p&gt;Man kann nur Brücken schlagen zwischen Ufern, die man auseinanderhält&lt;/p&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>copy.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;h1&gt;Aphorismen&lt;/h1&gt;
 &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="p"&gt;
&lt;xsl:copy&gt;&lt;xsl:value-of select="." /&gt;&lt;/xsl:copy&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die XML-Daten des Beispiels bestehen aus Aphorismen, die jeweils in ein XML-Element namens <code>p</code> eingeschlossen sind. Im Beispiel-Stylesheet wird bei der Template-Definition für Elemente des Typs <code>p</code> mit der Anweisung <code>&lt;xsl:copy&gt;&lt;xsl:value-of select="." /&gt;&lt;/xsl:copy&gt;</code> festgelegt, dass sie einfach in den HTML-Ergebnisbaum kopiert werden. Dies ist sinnvoll, da das <code>p</code>-Element in HTML Bedeutung hat und vom Browser entsprechend formatiert wird. Auf diese Weise wird in diesem Fall der gleiche Effekt erreicht, der mit der folgenden Template-Definition erreicht werden würde:<br>
<code>&lt;xsl:template match="p"&gt;<br>
&lt;p&gt;&lt;xsl:value-of select="." /&gt;&lt;/p&gt;<br>
&lt;/xsl:template&gt;</code></p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="copy_of">xsl:copy-of (Beliebige ermittelte Daten in Ergebnisbaum kopieren)</a></h2>

<p>Kopiert einen aktuellen Knoten und das gesamte davon abhängige Knoten-Set in den Ergebnisbaum an die Stelle, an der die Anweisung notiert ist. Das ist beispielsweise sinnvoll, um den Inhalt eines Elements, das nur einmal in den Daten notiert ist, an mehreren Stellen zu wiederholen.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>select</code></td>
<td valign="top"><i>(obligatorisch)</i> auswählen, was kopiert werden soll. Dies kann ein Knoten-Set bzw. ein Pfad nach <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm">XPath-Syntax</a> sein oder eine Variable.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen. Kann als Inhalt alles enthalten, was auch innerhalb von <code>xsl:template</code> erlaubt ist.</p>

<h3 class="xmp">Beispieldatei <var>copy_of.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/copy_of.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>copy_of.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/copy_of.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>copy_of.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="copy_of.xsl" ?&gt;
&lt;test&gt;
&lt;titel&gt;Telefon&lt;/titel&gt;
&lt;telefon&gt;&lt;name&gt;Hans&lt;/name&gt;&lt;nummer&gt;069 - 11727349874&lt;/nummer&gt;&lt;/telefon&gt;
&lt;telefon&gt;&lt;name&gt;Sabine&lt;/name&gt;&lt;nummer&gt;040 - 116343432094&lt;/nummer&gt;&lt;/telefon&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>copy_of.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;table border="1"&gt;&lt;xsl:apply-templates /&gt;&lt;/table&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="titel"&gt;
&lt;tr&gt;&lt;th colspan="3"&gt;&lt;xsl:value-of select="." /&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="telefon"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;xsl:copy-of select="../titel" /&gt;&lt;/td&gt;
&lt;xsl:apply-templates /&gt;
&lt;/tr&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="name"&gt;
&lt;td&gt;&lt;xsl:value-of select="." /&gt;&lt;/td&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="nummer"&gt;
&lt;td&gt;&lt;xsl:value-of select="." /&gt;&lt;/td&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel definiert eine Telefonliste, bestehend aus Namen und Telefonnummern, mit einer Überschrift, die im Element <code>titel</code> notiert wird. Beim Erzeugen des Ergebnisbaums im Beispiel-Stylesheet wird aus der Telefonliste jedoch eine dreispaltige HTML-Tabelle erzeugt. In der ersten Spalte steht jeweils das Wort <i>Telefon</i>. Dafür sorgt jene Anweisung, die mit <code>&lt;td&gt;&lt;xsl:copy-of select="../titel"&nbsp;/&gt;&lt;/td&gt;</code> den Titel, der eigentlich nur einmal vorkommt, bei jedem Vorkommen des <code>telefon</code>-Elements wiederholt. Die Adressierung des Elements <code>titel</code> erfolgt dabei aus Sicht des Elements <code>telefon</code> nach <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm#relative_pfadangaben">XPath-Adressierung mit relativen Pfadangaben</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="decimal_format">xsl:decimal-format (Dezimalformat)</a></h2>

<p>Definiert ein Schema, in dem Zahlen im Ergebnisbaum ausgegeben werden. In der Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathfunktionen.htm#format_number">format-number()</a> kann dieses Schema angewendet werden.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>decimal-separator</code></td>
<td valign="top"><i>(optional)</i> Zeichen, das zwischen Ganzzahl und "Nachkommastellen" steht, um beide Teile zu trennen. Im Deutschen normalerweise ein Komma, im Englischen ein Punkt. Voreinstellung ist der Punkt (<code>.</code>).</td>
</tr>
<tr>
<td valign="top"><code>digit</code></td>
<td valign="top"><i>(optional)</i> Zeichen, das als Platzhalter für eine unbekannte Ziffer eingesetzt wird. Normalerweise das Gatterzeichen <code>#</code> (Voreinstellung).</td>
</tr>
<tr>
<td valign="top"><code>grouping-separator</code></td>
<td valign="top"><i>(optional)</i> Zeichen, das eine Gruppe von Zeichen trennt, z.B. als "Tausenderzeichen". Im Deutschen normalerweise ein Punkt, im Englischen ein Komma. Voreinstellung ist das Komma (<code>,</code>).</td>
</tr>
<tr>
<td valign="top"><code>infinity</code></td>
<td valign="top"><i>(optional)</i> Zeichen oder Zeichenkette, die den Wert für "unendlich" repräsentiert, z.B. bei periodischen Nachkommawerten. Voreinstellung ist <code>Infinity</code>.</td>
</tr>
<tr>
<td valign="top"><code>minus-sign</code></td>
<td valign="top"><i>(optional)</i> Zeichen, das einem negativen Wert vorangestellt wird. Normalerweise das Minuszeichen <code>-</code> (Voreinstellung).</td>
</tr>
<tr>
<td valign="top"><code>name</code></td>
<td valign="top"><i>(optional)</i> Name des definierten Schemas. Unter diesem Namen kann das Schema in der Funktion <code>format-number</code> verwendet werden. Wird kein Name angegeben, gelten die Definitionen global.</td>
</tr>
<tr>
<td valign="top"><code>NaN</code></td>
<td valign="top"><i>(optional)</i> Zeichenkette, die ausdrückt, dass ein Wert keine gültige Zahl ist. Voreinstellung ist <code>NaN</code> (<i>not a number</i>).</td>
</tr>
<tr>
<td valign="top"><code>pattern-separator</code></td>
<td valign="top"><i>(optional)</i> Zeichen, dass zwischen positiver und negativer Formatdarstellung steht. Voreinstellung ist das Semikolon (<code>;</code>).</td>
</tr>
<tr>
<td valign="top"><code>per-mille</code></td>
<td valign="top"><i>(optional)</i> Zeichen, mit dem Promillewerte gekennzeichnet werden. Voreinstellung ist <code>%O</code>.</td>
</tr>
<tr>
<td valign="top"><code>percent</code></td>
<td valign="top"><i>(optional)</i> Zeichen, mit dem Prozentwerte gekennzeichnet werden. Voreinstellung ist das Prozentzeichen <code>%</code>.</td>
</tr>
<tr>
<td valign="top"><code>zero-digit</code></td>
<td valign="top"><i>(optional)</i> Zeichen für die Darstellung führender Nullen. Voreinstellung ist die Null <code>0</code>.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen und muss außerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> notiert sein.</p>

<h3 class="xmp">Beispieldatei <var>decimal_format.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/decimal_format.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>decimal_format.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/decimal_format.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>decimal_format.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="decimal_format.xsl" ?&gt;
&lt;test&gt;
&lt;wert&gt;1230348345&lt;/wert&gt;
&lt;wert&gt;17235807&lt;/wert&gt;
&lt;wert&gt;12345&lt;/wert&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>decimal_format.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:decimal-format name="de" decimal-separator="," grouping-separator="."/&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="wert"&gt;
&lt;div&gt;&lt;xsl:value-of select="format-number(.,'#.##0,0','de')" /&gt;&lt;/div&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In den XML-Daten werden einfach diverse Werte notiert, und zwar jeweils in einem Element namens <code>wert</code>. Im Beispiel-Stylesheet wird mit <code>xsl:decimal-format</code> ein Schema für die Formatierung von Zahlen im Ergebnisbaum definiert. Das Schema erhält den Namen <code>de</code> und bestimmt das Komma als Trennzeichen für Ganzzahl und Nachkommastellen sowie den Punkt als Trennzeichen für Tausendergruppen. Für die Ausgabe eines Elements vom Typ <code>wert</code> wird mit <code>&lt;xsl:template match="wert"&gt;</code> ein Template definiert. Jeder Wert wird in einem HTML-Element <code>div</code> ausgegeben. Mit der Anweisung <code>&lt;xsl:value-of select="format-number(.,'#.##0,0','de')" /&gt;</code> wird auf den jeweils aktuellen Inhalt von <code>wert</code> Bezug genommen, und zwar durch Aufruf der Funktion <code>format-number</code>. Diese bekommt in den Klammern als ersten Parameter <code>.</code> übergeben, was für das aktuelle Element steht. Der zweite Parameter ist ein Formatstring, und der dritte Parameter der Name des Schemas, das zuvor mit <code>xsl:decimal-format</code> definiert wurde.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="element">xsl:element (Element erzeugen)</a></h2>

<p>Erzeugt ein Element im Ergebnisbaum. Zwar ist es üblich, Elemente des Ergebnisbaums direkt zu notieren. Doch etwa bei der Anwendung verschiedener <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#attribute_set">Attribut-Sets</a> kann es sinnvoll sein, die Elemente des Ergebnisbaums nicht direkt zu notieren, sondern mit Hilfe von <code>xsl:element</code> zu generieren. Ein anderer Anwendungsfall ist, wenn mit Hilfe von XSL ein Ergebnisbaum erzeugt werden soll, dessen Zielsprache selbst XSL ist.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>name</code></td>
<td valign="top"><i>(obligatorisch)</i> Name des zu generierenden Elements, z.B. <code>table</code> für das gleichnamige HTML-Element</td>
</tr>
<tr>
<td valign="top"><code>namespace</code></td>
<td valign="top"><i>(optional)</i> Namensraum, dem das Element angehört.</td>
</tr>
<tr>
<td valign="top"><code>use-attribute-sets</code></td>
<td valign="top"><i>(optional)</i> definierte Attribut-Sets, die im einleitenden Tag des zu erzeugenden Elements eingesetzt werden sollen.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>element.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/element.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>element.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/element.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>element.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="element.xsl" ?&gt;
&lt;test&gt;
&lt;produkt&gt;&lt;name&gt;Schaukelstuhl&lt;/name&gt;&lt;preis&gt;99,-&lt;/preis&gt;&lt;/produkt&gt;
&lt;produkt&gt;&lt;name&gt;Kaffeemaschine&lt;/name&gt;&lt;preis&gt;49,95&lt;/preis&gt;&lt;/produkt&gt;
&lt;produkt&gt;&lt;name&gt;Schraubenzieher&lt;/name&gt;&lt;preis&gt;4,95&lt;/preis&gt;&lt;/produkt&gt;
&lt;produkt&gt;&lt;name&gt;Sofakissen&lt;/name&gt;&lt;preis&gt;29,95&lt;/preis&gt;&lt;/produkt&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>element.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:attribute-set name="grau"&gt;
  &lt;xsl:attribute name="bgcolor"&gt;#E0E0E0&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
&lt;xsl:attribute-set name="gelb"&gt;
  &lt;xsl:attribute name="bgcolor"&gt;#FFFFD0&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;table&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/table&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="produkt"&gt;
 &lt;xsl:choose&gt;
  &lt;xsl:when test="position() mod 2 = 0"&gt;
    &lt;xsl:element name="tr" use-attribute-sets="grau"&gt;
     &lt;xsl:apply-templates /&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:when&gt;
  &lt;xsl:otherwise&gt;
    &lt;xsl:element name="tr" use-attribute-sets="gelb"&gt;
     &lt;xsl:apply-templates /&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:otherwise&gt;
 &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="name"&gt;
 &lt;td&gt;&lt;xsl:value-of select="." /&gt;&lt;/td&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="preis"&gt;
 &lt;td&gt;&lt;xsl:value-of select="." /&gt;&lt;/td&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In den XML-Daten des Beispiels gibt es eine Liste mit Produkten, zu denen jeweils der Name des Produkts und der Preis notiert ist. In der HTML-Ausgabe soll daraus eine Tabelle erzeugt werden, bei der jede zweite Tabellenzeile grau und die übrigen Reihen gelb hinterlegt sind. Dazu werden im Beispiel-Stylesheet mit <code>xsl:attribute-set</code> zwei entsprechende Attribut-Schemata definiert. Da für jedes Produkt eine Tabellenzeile erzeugt werden soll, ist in dem Template, das die HTML-Ausgabe für das Element <code>produkt</code> steuert, eine Abfrage enthalten, ob es sich bei dem jeweils aktuellen Element <code>produkt</code> aus der Datenliste um eine gerade Positionsnummer handelt. Wenn ja, wird die aktuelle Tabellenzeile grau hinterlegt, andernfalls gelb. Die Abfrage wird über die Anweisungen <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#choose">xsl:choose</a>, <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#when">xsl:when</a> und <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#otherwise">xsl:otherwise</a> gesteuert. Die Positionsnummer des jeweils aktuellen Elements liefert die Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathfunktionen.htm#position">position()</a>. Der Ausdruck <code>mod 2 = 0</code> fragt, ob die Modulo-Division des Positionswerts 0 ergibt, also keinen Bruchrest erzeugt und somit eine gerade Zahl ist.<br>
Abhängig von der Abfrage wird im <code>when</code>-Zweig und im <code>otherwise</code>-Zweig mit <code>xsl:element</code> ein HTML-Element <code>tr</code> Tabellenreihen erzeugt und mit den unterschiedlichen Attribut-Schemata für grau und gelb ausgestattet. Zwischen dem einleitenden Tag und seinem Gegenstück <code>&lt;/xsl:element&gt;</code> werden untergeordnete Templates für Namen und Preis des Produkts aufgerufen.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="fallback">xsl:fallback (alternative Ausführungsanweisung)</a></h2>

<p>Stellt für den XSLT-Prozessor eine Alternativanweisung bereit für den Fall, dass dieser eine nicht so gebräuchliche oder neuere XSLT-Anweisung nicht kennt.</p>

<p>Hat keine Attribute.</p>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>fallback.xml</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="fallback.xsl" ?&gt;
&lt;test&gt;
&lt;text&gt;Es ist egal, ob du A oder B sagst, solange du C nicht kennst.&lt;/text&gt;
&lt;text&gt;Worüber man nicht reden kann, darüber soll man schweigen.&lt;/text&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>fallback.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;xsl:processing-instruction name="xml-stylesheet"&gt;
  &lt;xsl:fallback&gt;
   &lt;link rel="stylesheet" href="fallbacktest.css" type="text/css" /&gt;
  &lt;/xsl:fallback&gt;
  &lt;xsl:text&gt;href="fallbacktest.css" type="text/css" ?&lt;/xsl:text&gt;
 &lt;/xsl:processing-instruction&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="text"&gt;
 &lt;p&gt;&lt;xsl:value-of select="." /&gt;&lt;/p&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel-Stylesheet wird mit der Anweisung <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#processing_instruction">xsl:processing-instruction</a> ein Stylesheet (CSS) in den HTML-Ergebnisbaum eingebunden. Für den Fall, dass der XSLT-Prozessor diese Anweisung nicht kennt, wird mit <code>xsl:fallback</code> eine Alternative notiert, nämlich die direkte Notation des Befehls zum Einbinden des Stylesheets.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="for_each">xsl:for-each (für jedes Element aus einer Menge wiederholen)</a></h2>

<p>Stellt eine Schleifenanweisung innerhalb einer Template-Definition dar. Das, was innerhalb der Schleife steht, wird auf alle Knoten innerhalb eines anzugebenden Knoten-Sets angewendet. Alle aufeinanderfolgenden Knoten werden dann der Reihe nach abgearbeitet. So lassen sich beispielsweise alle Elemente <code>listenpunkt</code>, die von einem Element namens <code>liste</code> abhängig sind, direkt innerhalb der Template-Definition für das Element <code>liste</code> abhandeln, ohne dass noch mal eine untergeordnete Template-Definition für das Element <code>listenpunkt</code> aufgerufen werden muss.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>select</code></td>
<td valign="top"><i>(obligatorisch)</i> Knoten-Set bzw. Pfad nach <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm">XPath-Syntax</a>, für das die Schleife gelten soll.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>for_each.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/for_each.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>for_each.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/for_each.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>for_each.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="for_each.xsl" ?&gt;
&lt;test&gt;
&lt;klasse name="7a"&gt;
&lt;schueler&gt;Hans Bentop&lt;/schueler&gt;
&lt;schueler&gt;Anika Doll&lt;/schueler&gt;
&lt;schueler&gt;Phillip Kleiber&lt;/schueler&gt;
&lt;/klasse&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>for_each.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="klasse"&gt;
  &lt;h3&gt;Klasse &lt;xsl:value-of select="@name" /&gt;&lt;/h3&gt;
  &lt;p&gt;
  &lt;xsl:for-each select="schueler"&gt;
    &lt;xsl:value-of select="." /&gt;&lt;br /&gt;
  &lt;/xsl:for-each&gt;
  &lt;/p&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In den XML-Daten des Beispiels werden Schulklassen und ihre Schülernamen notiert. Im Beispiel-Stylesheet wird in dem Template für das Element <code>klasse</code>, das aus beliebig vielen Elementen <code>schueler</code> bestehen kann, mit <code>xsl:for-each</code> eine Schleife erzeugt. Darin wird im Ergebnisbaum der Reihe nach der Inhalt (<code>xsl:value-of</code>) jedes Elements <code>schueler</code> sowie ein Zeilenumbruch erzeugt.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="if">xsl:if (Wenn-Bedingung)</a></h2>

<p>Macht die Ausführung einer Anweisung von einer Bedingung abhängig.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>test</code></td>
<td valign="top"><i>(obligatorisch)</i> formuliert die Bedingung.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>if.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/if.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>if.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/if.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>if.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="if.xsl" ?&gt;
&lt;test&gt;
&lt;ergebnis&gt;&lt;name&gt;Crystol Freak&lt;/name&gt;&lt;punkte&gt;453&lt;/punkte&gt;&lt;/ergebnis&gt;
&lt;ergebnis&gt;&lt;name&gt;Demian&lt;/name&gt;&lt;punkte&gt;199&lt;/punkte&gt;&lt;/ergebnis&gt;
&lt;ergebnis&gt;&lt;name&gt;Ueberflieger&lt;/name&gt;&lt;punkte&gt;347&lt;/punkte&gt;&lt;/ergebnis&gt;
&lt;ergebnis&gt;&lt;name&gt;CaptainX&lt;/name&gt;&lt;punkte&gt;106&lt;/punkte&gt;&lt;/ergebnis&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>if.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;table border="1"&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/table&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="ergebnis"&gt;
  &lt;xsl:if test="punkte &amp;gt;= 200"&gt;
    &lt;tr&gt;
    &lt;xsl:apply-templates /&gt;
    &lt;/tr&gt;
  &lt;/xsl:if&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="name"&gt;
 &lt;td&gt;&lt;xsl:value-of select="." /&gt;&lt;/td&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="punkte"&gt;
 &lt;td&gt;&lt;xsl:value-of select="." /&gt;&lt;/td&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die XML-Daten im Beispiel enthalten Spielergebnisse, und zwar mit Spielernamen und erreichten Punkten. Im Beispiel-Stylesheet wird daraus eine HTML-Tabelle erzeugt. Es sollen jedoch nur Spieler in der Tabelle erscheinen, die 200 Punkte oder mehr erreicht haben. Dazu wird in dem Template, das die HTML-Ausgabe des XML-Elements <code>ergebnis</code> steuert, mit der Anweisung <code>&lt;xsl:if test="punkte &amp;gt;= 200"&gt;</code> abgefragt, ob der Inhalt des untergeordneten Elements <code>punkte</code> größer oder gleich 200 ist. Wenn ja, wird eine Tabellenzeile erzeugt, und innerhalb davon werden die Templates für die untergeordneten Elemente, also für <code>name</code> und <code>punkte</code>, aufgerufen. Normalerweise würde der Operator für "größer gleich" einfach <code>&gt;=</code> lauten. Weil er aber innerhalb einer XML-basierten Anweisung vorkommt, muss das Größer-als-Zeichen <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../regeln/zeichen.htm#xmleigene">umschrieben</a> werden.<br>
Welche Möglichkeiten es für die Formulierung von Bedingungen bei <code>xsl:if</code> gibt, wird im Abschnitt
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm#operatoren">XPath-Operatoren</a> beschrieben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="include">xsl:include (Stylesheets inkludieren)</a></h2>
<p>XSLT bietet zwei Möglichkeiten um Stylesheets miteinander zu kombinieren. Die erste ist ein Inklusionsmechanismus, der es erlaubt Stylesheets zu kombinieren, wobei die Semantik der kombinierten Stylesheets nicht verändert wird. Die andere Möglichkeit ist ein Importmechanismus, der es Stylesheets erlaubt einander zu überschreiben.</p>
<p>Ein Stylesheet kann andere Stylesheets durch die Benutzung des <code>xsl:include</code>-Elements inkludieren. Das <code>xsl:include</code>-Element ist nur als Element der obersten Ebene erlaubt. Das bedeutet, es kann nur innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen und muss außerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> notiert sein.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>href</code></td>
<td valign="top"><i>(obligatorisch)</i> gibt den URI der zu inkludierenden Datei an.</td>
</tr>
</table>

<h3 class="xmp">Beispieldatei <var>include.xml</var>:</h3>
<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/include.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>include.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/include.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>include.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="include1.xsl" ?&gt;
&lt;test&gt;
&lt;bild&gt;pinguin.gif&lt;/bild&gt;
&lt;text&gt;Der Pinguin ist das Wahrzeichen von Linux&lt;/text&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>include1.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:include href="include2.xsl" /&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;xsl:apply-templates/&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="bild"&gt;
 &lt;img&gt;&lt;xsl:attribute name="src"&gt;&lt;xsl:value-of select="." /&gt;&lt;/xsl:attribute&gt;&lt;/img&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>include2.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="text"&gt;
&lt;p&gt;&lt;xsl:value-of select="." /&gt;&lt;/p&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die durch den Wert des <code>href</code>-Attributs angegebene XSL-Datei wird als XML-Dokument analysiert und die Kinder des <code>xsl:stylesheet</code>-Elements in diesem Dokument ersetzen das <code>xsl:include</code>-Element im inkludierenden Dokument. Dass Template-Regel und andere Definitionen inkludiert sind, beeinflusst nicht die Art, wie sie verarbeitet werden.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Ein Stylesheet darf weder direkt noch indirekt sich selbst inkludieren. So würde ein <code>&lt;xsl:import href="include1.xsl" /&gt;</code> in der <var>include2.xsl</var> einen Fehler verursachen, denn auf diese Weise würde sich die Datei <var>include1.xsl</var> selbst inkludieren.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="import">xsl:import (Stylesheets importieren)</a></h2>

<p>Importiert Template-Definitionen aus anderen Stylesheet-Dateien, die dann mit <code>xsl:apply-imports</code> an einer gewünschten Stelle angewendet werden können.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>href</code></td>
<td valign="top"><i>(obligatorisch)</i> gibt den URI der zu importierenden Datei an.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen und muss außerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> notiert sein.</p>

<p>Beispiel siehe <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#apply_imports">xsl:apply-imports</a>.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Im Konfliktfall haben Stylesheet-Definitionen, die in der aktuellen Stylesheet-Datei definiert werden, Vorrang vor importierten Definitionen.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="key">xsl:key (Schlüssel für Auswahl von Elementen)</a></h2>

<p>Definiert einen Zugriffsschlüssel auf Elemente oder Attribute. Dadurch wird dem XSLT-Prozessor die Arbeit erleichtert, was die Verarbeitungsgeschwindigkeit erhöhen kann. Über die Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathfunktionen.htm#key">key()</a> kann der Zugriffsschlüssel angewendet werden.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>name</code></td>
<td valign="top"><i>(obligatorisch)</i> legt einen Namen für den Schlüssel fest, unter dem er angewendet werden kann.</td>
</tr>
<tr>
<td valign="top"><code>use</code></td>
<td valign="top"><i>(obligatorisch)</i> gibt an, auf was der Schlüssel zugreifen soll.</td>
</tr>
<tr>
<td valign="top"><code>match</code></td>
<td valign="top"><i>(optional)</i> gibt das Knoten-Set bzw. einen Pfad nach <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm">XPath-Syntax</a> an, an dem der Schlüssel im Elementenbaum ansetzen soll.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen und muss außerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> notiert sein.</p>

<h3 class="xmp">Beispieldatei <var>key.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/key.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>key.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/key.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>key.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="key.xsl" ?&gt;
&lt;test&gt;
&lt;konfig typ="user" name="docroot" wert="/usr/local/web" /&gt;
&lt;konfig typ="user" name="cgibin" wert="/usr/local/bin/cgi" /&gt;
&lt;konfig typ="expert" name="timeout" wert="60" /&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>key.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:key name="user-only" match="konfig" use="@typ"/&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;table border="1"&gt;
  &lt;xsl:for-each select="key('user-only','user')"&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;xsl:value-of select="@name" /&gt;&lt;/td&gt;
    &lt;td&gt;&lt;xsl:value-of select="@wert" /&gt;&lt;/td&gt;
   &lt;/tr&gt;
  &lt;/xsl:for-each&gt;
 &lt;/table&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die XML-Daten stellen den Inhalt einer Konfigurationsdatei dar. Jeder Konfigurationseintrag, repräsentiert im Element <code>konfig</code>, enthält die Daten in Form von Attributen. Neben den für Konfigurationseinträge typischen Daten <code>name</code> und <code>wert</code> gibt es auch ein Attribut <code>typ</code>, in dem die Werte <code>user</code> und <code>expert</code> zulässig sind. Diese Information könnte beispielsweise helfen, wenn bei der Anzeige der Konfigurationsdaten einem Bearbeiter, der als <code>user</code> angemeldet ist, die Daten des Experten-Modus vorenthalten werden sollen. Das Beispiel-Stylesheet realisiert eine solche Beschränkung. Mit <code>&lt;xsl:key name="user-only" match="konfig" use="@typ"/&gt;</code> wird ein Schlüssel definiert, der auf das Attribut <code>typ</code> zugreift. Zur Anwendung kommt dieser Schlüssel in der Anweisung <code>&lt;xsl:for-each select="key('user-only','user')"&gt;</code>. Der Funktion <code>key()</code> wird der Name des zuvor definierten Schlüssels und der gewünschte Attributwert übergeben. Nur Einträge, die diesen Attributwert haben, werden ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="message">xsl:message (Meldung beim Transformieren ausgeben)</a></h2>

<p>Gibt während der Transformation der Daten eine Meldung aus. Wird üblicherweise zur Fehlerbehandlung innerhalb einer Bedingung benutzt.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>terminate</code></td>
<td valign="top"><i>(optional)</i> gibt mit <code>yes</code> oder <code>no</code> (Voreinstellung) an, ob der Transformationsvorgang abgebrochen werden soll.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>message.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/message.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>message.xml</var> - XML/XSLT-fähiger Browser meldet Message-Fehler)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="message.xsl" ?&gt;
&lt;test&gt;
&lt;lottozahl&gt;32&lt;/lottozahl&gt;
&lt;lottozahl&gt;8&lt;/lottozahl&gt;
&lt;lottozahl&gt;13&lt;/lottozahl&gt;
&lt;lottozahl&gt;40&lt;/lottozahl&gt;
&lt;lottozahl&gt;3&lt;/lottozahl&gt;
&lt;lottozahl&gt;59&lt;/lottozahl&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>message.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="lottozahl"&gt;
  &lt;xsl:variable name="aktuellerwert" select="."/&gt;
  &lt;xsl:if test="$aktuellerwert &amp;gt; 49"&gt;
   &lt;xsl:message terminate="yes"&gt;
    &lt;xsl:text&gt;Die Zahl (&lt;/xsl:text&gt;
    &lt;xsl:value-of select="." /&gt;
    &lt;xsl:text&gt;) ist zu gross!&lt;/xsl:text&gt;&lt;br /&gt;
   &lt;/xsl:message&gt;
  &lt;/xsl:if&gt;
  &lt;xsl:value-of select="." /&gt;&lt;br /&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel sind Lottozahlen notiert. Das Beispiel-Stylesheet formuliert innerhalb der Template-Definition für das Element <code>lottozahl</code> zunächst mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#variable">xsl:variable</a> eine Variable und weist dieser den Inhalt des aktuellen Elements zu. Als nächstes wird mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#if">xsl:if</a> geprüft, ob der Inhalt der Variablen größer als 49 ist. Für diesen Fall (Fehlerfall) wird mit <code>xsl:message</code> eine Fehlermeldung konstruiert, die statt der Zahl die Meldung schreibt, dass die betreffende Zahl zu groß ist.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="namespace_alias">xsl:namespace-alias (Stylesheet in anderes Stylesheet transformieren)</a></h2>

<p>Erlaubt es, ein XSL-Stylesheet in ein anderes XSL-Stylesheet zu transformieren.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>stylesheet-prefix</code></td>
<td valign="top"><i>(obligatorisch)</i> gibt den Namen des Namensraums an, der im aktuellen Stylesheet verwendet wird. Dieser Name muss im <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a>-Element mit dem Attribut <code>xmlns:[Name]</code> vergeben werden.</td>
</tr>
<tr>
<td valign="top"><code>result-prefix</code></td>
<td valign="top"><i>(optional)</i> gibt den Namen des Namensraums an, der im Ergebnis-Stylesheet anstelle des Namens verwendet werden soll, der bei <code>stylesheet-prefix</code> angegeben ist.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen und muss außerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> notiert sein.</p>

<h3 class="xmp">Beispieldatei <var>namespace_alias.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/namespace_out.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>namespace_out.htm</var> - über den Umweg von von <var>output.xsl</var> erzeugt)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/namespace_alias.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>namespace_alias.xml</var>)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="namespace_alias.xsl" ?&gt;
&lt;test&gt;
&lt;gruss&gt;Hallo Welt&lt;/gruss&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>namespace_alias.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:out="namespace_out.xsl"&gt;

&lt;xsl:namespace-alias stylesheet-prefix="out" result-prefix="xsl"/&gt;

&lt;xsl:template match="/"&gt;
 &lt;out:stylesheet version="1.0"&gt;
  &lt;out:template match="/"&gt;
   &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;
   &lt;h1&gt;&lt;xsl:value-of select="gruss" /&gt;&lt;/h1&gt;
   &lt;h1&gt;&lt;out:text&gt;Hallo Welt - vom Output-Stylesheet&lt;/out:text&gt;&lt;/h1&gt;
   &lt;/body&gt;&lt;/html&gt;
  &lt;/out:template&gt;
 &lt;/out:stylesheet&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im XML-Teil des Beispiels ist einfach ein Hallo-Welt-Gruß notiert. Im zugehörigen Beispiel-Stylesheet steckt die erste Besonderheit bereits im einleitenden <code>xsl:stylesheet</code>-Element. Dort wird zwei mal das Attribut <code>xmlns</code> notiert: einmal zur Deklaration des üblichen Namensraums (<code>xmlns:xsl="http://www.w3.org/1999/XSL/Transform"</code>), und einmal zur Deklaration eines eigenen Namensraums (<code>xmlns:out="output.xsl"</code>). Durch die Anweisung <code>&lt;xsl:namespace-alias stylesheet-prefix="out" result-prefix="xsl"/&gt;</code> wird dann für den eigenen Namensraum, der den Namen <code>out</code> erhalten hat, festgelegt, dass das aktuelle Stylesheet in das andere Stylesheet (<code>output.xsl</code>) transformiert wird. Das gilt allerdings nur für Notationen, die den Namensraum <code>out</code> angeben. Innerhalb der Template-Definition des Beispiels werden solche Notationen definiert. Die erste beginnt mit <code>&lt;out:stylesheet version="1.0"&gt;</code>. Die innere Definition <code>&lt;xsl:value-of select="gruss" /&gt;</code> wird nicht in das Output-Stylesheet übernommen, stattdessen aber <code>&lt;out:text&gt;Hallo Welt - vom Output-Stylesheet&lt;/out:text&gt;</code>. Der HTML-Code, der am Ende erzeugt wird, resultiert aus dem, was im Output-Stylesheet definiert ist.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="number">xsl:number (fortlaufende Nummerierung)</a></h2>

<p>Ermöglicht es, sich wiederholende Elemente im Ergebnisbaum mit fortlaufender Nummerierung zu versehen.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>count</code></td>
<td valign="top"><i>(optional)</i> bestimmt das oder die Knoten-Sets bzw. Pfade nach <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm">XPath-Syntax</a>, bei deren Auftreten der Zähler der Nummerierung erhöht werden soll.</td>
</tr>
<tr>
<td valign="top"><code>format</code></td>
<td valign="top"><i>(optional)</i> bestimmt die Art der Nummerierung. Folgende Angaben sind möglich:<br>
<code>1</code> = Nummerierung der Art 1, 2, 3, 4 ...<br>
<code>01</code> = Nummerierung der Art 01, 02, 03, 04, ... 10, 11 ...<br>
<code>a</code> = Nummerierung der Art a, b, c, d ...<br>
<code>A</code> = Nummerierung der Art A, B, C, D ...<br>
<code>i</code> = Nummerierung der Art i, ii, iii, iv ...<br>
<code>I</code> = Nummerierung der Art I, III, III, IV ...<br>
Voreinstellung ist <code>1</code>. Hinter dieser Angabe zur Art der Nummerierung können noch weitere Zeichen folgen, mit denen die Nummerierung formatiert wird. So bewirkt etwa die Angabe <code>1.</code>, dass hinter der jeweils aktuellen Ordnungszahl noch ein Punkt steht.
</td>
</tr>
<tr>
<td valign="top"><code>from</code></td>
<td valign="top"><i>(optional)</i> bestimmt das Knoten-Set bzw. einen Pfad nach <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm">XPath-Syntax</a>, bei dessen Auftreten die Nummerierung beendet werden soll.</td>
</tr>
<tr>
<td valign="top"><code>grouping-separator</code></td>
<td valign="top"><i>(optional)</i> Trennzeichen für Zifferngruppen bei hohen Zahlen, z.B. Tausender-Trennzeichen. In der deutschen Schreibweise von Zahlen üblicherweise ein Punkt (<code>.</code>).</td>
</tr>
<tr>
<td valign="top"><code>grouping-size</code></td>
<td valign="top"><i>(optional)</i> Anzahl der Ziffern, bei der ein Trennzeichen gesetzt wird. Bei Tausender-Trennzeichen wäre das der Wert <code>3</code>.</td>
</tr>
<tr>
<td valign="top"><code>lang</code></td>
<td valign="top"><i>(optional)</i> gibt die Sprache (nach <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../diverses/sprachenlaenderkuerzel.htm#nach_rfc_1766">RFC 1766</a>) an, nach dessen Sprachkonventionen die Nummerierung erfolgen soll. Anzugeben sind Kürzel der Art <code>de</code> (für deutsch), <code>en</code> (für englisch), <code>fr</code> (für französisch).
</td>
</tr>
<tr>
<td valign="top"><code>letter-value</code></td>
<td valign="top"><i>(optional)</i> erlaubte Werte sind <code>alphabetical</code> oder <code>traditional</code>. Eine Angabe, die zusätzlich zu <code>lang</code> für einige Sprachen sinnvoll ist.</td>
</tr>
<tr>
<td valign="top"><code>level</code></td>
<td valign="top"><i>(optional)</i> erlaubte Werte sind <code>single</code>, <code>multiple</code> oder <code>any</code>. Die Angabe bezieht sich darauf, was bei <code>count</code> angegeben wird.<br>
<code>single</code> bedeutet: der Nummerierungs-Algorithmus arbeitet flach auf der aktuellen Ebene des Elementenbaums und kann Nummerierungen der Sorte 1, 2, 3 erzeugen. Passt der aktuelle Knoten auf die Angabe bei <code>count</code>, wird er nummeriert.<br>
<code>multiple</code> bedeutet: der Nummerierungs-Algorithmus arbeitet hierarchisch über die aktuelle und alle übergeordneten Ebenen des Elementenbaums und kann Nummerierungen der Sorte 1.1 oder 1.1.1 erzeugen. Passt der aktuelle Knoten auf die Angabe bei <code>count</code>, wird er nummeriert. Dabei wird für jede übergeordnete Ebene im Elementenbaum ermittelt, ob die Angabe bei <code>count</code> auf einen Knoten zutrifft. Aus diesen Informationen wird die hierarchische Nummerierung erzeugt. Bei <code>multiple</code> sollte bei <code>count</code> die Sequenz derjenigen Knoten angegeben werden, für die die hierarchische Nummerierung gelten soll. Dies ist durch eine Angabe wie z.B. <code>count="kapitelueberschrift|abschnittsueberschrift|unterueberschrift"</code> möglich. Die Elementnamen werden dabei durch Senkrechtstriche (<code>|</code>) voneinander getrennt. Beim Attribut <code>format</code> sollte in diesem Fall so etwas wie z.B. <code>format="1.1"</code> notiert werden.<br>
<code>any</code> bedeutet: der Nummerierungs-Algorithmus arbeitet flach über die aktuelle und alle Ebenen des Elementenbaums und kann Nummerierungen der Sorte 1, 2, 3 erzeugen. Passt der aktuelle Knoten auf die Angabe bei <code>count</code>, wird er nummeriert. Dabei wird für jede übergeordnete Ebene im Elementenbaum ermittelt, ob die Angabe bei <code>count</code> auf einen Knoten zutrifft. Die Nummerierung zählt alle Knoten zusammen.<br>
</td>
</tr>
<tr>
<td valign="top"><code>value</code></td>
<td valign="top"><i>(optional)</i> Kalkulationsausdruck, der die Nummerierung bestimmt. Eine mögliche Angabe ist z.B. <code>value="position()"</code>.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>number.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/number.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>number.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/number.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>number.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="number.xsl" ?&gt;
&lt;test&gt;
&lt;link&gt;http://aktuell.de.selfhtml.org/&lt;/link&gt;
&lt;link&gt;http://alpentouren.at/&lt;/link&gt;
&lt;link&gt;http://fr.selfhtml.org/&lt;/link&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>number.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="link"&gt;
 &lt;xsl:number level="single" count="link" format="1. " /&gt;
 &lt;a&gt;&lt;xsl:attribute name="href"&gt;&lt;xsl:value-of select="." /&gt;&lt;/xsl:attribute&gt;
 &lt;xsl:value-of select="." /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die XML-Daten im Beispiel enthalten eine Reihe von Links, die bei der HTML-Ausgabe durchnummeriert werden sollen. Das Beispiel-Stylesheet wendet zu diesem Zweck innerhalb der Template-Definition für das <code>link</code>-Element zu Beginn des zu erzeugenden HTML-Codes die <code>xsl:number</code>-Anweisung an. Es soll eine einfache Nummerierung durchgeführt werden (<code>level="single"</code>). Die Nummerierung soll bei jedem Auftreten des <code>link</code>-Elements fortgesetzt werden (<code>count="link"</code>). Die Nummerierung soll in der Form <code>1.&nbsp;...</code>, <code>2.&nbsp;...</code>, <code>3.&nbsp;...</code> erscheinen (<code>format="1.&nbsp;"</code>).<br>
Anschließend wird innerhalb der Template-Definition ein HTML-Link erzeugt, der den Inhalt des jeweiligen <code>link</code>-Elements in eine im Browser anklickbare Form bringt.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="otherwise">xsl:otherwise (Andernfalls-Anweisung)</a></h2>

<p>Bestimmt, was getan werden soll, wenn eine oder mehrere <code>xsl:when</code>-Bedingungen nicht zutreffen.</p>

<p>Hat keine Attribute.</p>

<p>Kann innerhalb von <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#choose">xsl:choose</a> vorkommen. Beispiel siehe dort.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="output">xsl:output (Erzeugen des Ergebnisbaums kontrollieren)</a></h2>

<p>Gibt an, wie der Ergebnisbaum ausgegeben bzw. geschrieben werden soll.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>cdata-section-elements</code></td>
<td valign="top"><i>(optional)</i> bei <code>method="xml"</code>: bestimmt Elemente, deren Inhalt beim Erzeugen des Ergebnisbaums in CDATA-Abschnitte geschrieben werden (vergleiche <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../regeln/zeichen.htm#cdata">CDATA-Abschnitte</a>). Es können mehrere Elemente angegeben werden, die durch Leerzeichen zu trennen sind.</td>
</tr>
<tr>
<td valign="top"><code>doctype-public</code></td>
<td valign="top"><i>(optional)</i> bei <code>method="xml"</code> und <code>method="html"</code>: wenn sich die Gültigkeitsüberprüfung des Ergebnisbaums auf eine öffentliche DTD-Zuordnung (public identifier) bezieht, erhält dieses Attribut als Wert die Zeichenkette des public identifiers.</td>
</tr>
<tr>
<td valign="top"><code>doctype-system</code></td>
<td valign="top"><i>(optional)</i> bei <code>method="xml"</code> und <code>method="html"</code>: wenn sich die Gültigkeitsüberprüfung des Ergebnisbaums auf eine adressierte DTD-Zuordnung (system identifier) bezieht, erhält dieses Attribut als Wert die Zeichenkette des system identifiers.</td>
</tr>
<tr>
<td valign="top"><code>encoding</code></td>
<td valign="top"><i>(optional)</i> bestimmt, mit welcher Kodierung der Ergebnisbaum kodiert wird. Sinnvoll ist eine Angabe nach <img src="../../src/en.gif" width="16" height="10" alt="englischsprachige Seite">&nbsp;<a target="_top" href="http://www.rfc-editor.org/rfc/rfc2978.txt">RFC 2978</a>.</td>
</tr>
<tr>
<td valign="top"><code>indent</code></td>
<td valign="top"><i>(optional)</i> kann die Werte <code>yes</code> oder <code>no</code> haben. Bei <code>yes</code> wird der Ergebnisbaum so formatiert, dass untergeordnete Elemente weiter eingerückt werden. Dies hat keine Auswirkung auf die Darstellung, sondern ist eine "kosmetische" Angabe zur besseren Lesbarkeit des erzeugten Quelltextes. Die Voreinstellung für dieses Attributs ist bei <code>method="html"</code> <code>yes</code>, bei  <code>method="xml"</code> <code>no</code>.</td>
</tr>
<tr>
<td valign="top"><code>media-type</code></td>
<td valign="top"><i>(optional)</i> gibt den <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../diverses/mimetypen.htm">MIME-Typ</a> des Ergebnisbaums an. Bei <code>method="xml"</code> ist beispielsweise <code>text/xml</code> sinnvoll, bei <code>method="html"</code> beispielsweise <code>text/html</code> und bei <code>method="text"</code> beispielsweise <code>text/plain</code>.</td>
</tr>
<tr>
<td valign="top"><code>method</code></td>
<td valign="top"><i>(optional)</i> gibt an, nach welcher Art der Ergebnisbaum erzeugt werden soll. Mögliche Werte sind <code>xml</code>, <code>html</code> (Voreinstellung), <code>text</code>, oder bestimmte, eigene oder öffentliche XML-Namensräume.</td>
</tr>
<tr>
<td valign="top"><code>omit-xml-declaration</code></td>
<td valign="top"><i>(optional)</i> bestimmt bei <code>method="xml"</code>, ob im Ergebnisbaum eine <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a target="_top" href="../regeln/xmldeklaration.htm">XML-Deklaration</a> (<code>&lt;?xml ...?&gt;</code>) ausgegeben werden soll oder nicht. Mögliche Werte sind <code>yes</code> für <b>nein</b> (<i>omit = weglassen</i>) oder <code>no</code> für <b>ja</b> (nicht weglassen).</td>
</tr>
<tr>
<td valign="top"><code>standalone</code></td>
<td valign="top"><i>(optional)</i> bestimmt bei <code>omit-xml-declaration="no"</code>, dass sich die DTD-Deklarationen in der aktuellen Datei befinden (vergleiche <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a target="_top" href="../regeln/xmldeklaration.htm#zusatzangaben">Zusätzliche Angaben zur Zeichenkodierung und zum DTD-Bezug</a>)</td>
</tr>
<tr>
<td valign="top"><code>version</code></td>
<td valign="top"><i>(optional)</i> bestimmt bei <code>omit-xml-declaration="no"</code> die XML-Versionsangabe.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen und muss außerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> notiert sein.</p>

<h3 class="xmp">Beispieldatei <var>output.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/output_en.xml">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>output_en.xml</var> - XML-fähiger Browser erforderlich, der die Datenstruktur anzeigt)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="output.xsl" ?&gt;
&lt;test&gt;
&lt;ereignis&gt;
  &lt;beschreibung&gt;HH XY 1204 mit Tempo 95 in Zone 70&lt;/beschreibung&gt;
  &lt;zeitstempel&gt;13.05.2001,22:25&lt;/zeitstempel&gt;
&lt;/ereignis&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>output.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:output method="xml" indent="yes" encoding="ISO-8859-1" omit-xml-declaration="yes" /&gt;

&lt;xsl:template match="/"&gt;
 &lt;test-en&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/test-en&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="ereignis"&gt;
 &lt;event&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/event&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="beschreibung"&gt;
 &lt;description&gt;&lt;xsl:value-of select="." /&gt;&lt;/description&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="zeitstempel"&gt;
 &lt;timestamp&gt;&lt;xsl:value-of select="." /&gt;&lt;/timestamp&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die XML-Daten im Beispiel enthalten "Ereignisse", wie sie eine Blitzanlage im Straßenverkehr aufzeichnen könnte. Die Elementnamen sind dabei deutschsprachig. In einer XSL-gesteuerten Transformation sollen diese Daten in eine analoge XML-Datei mit gleichem Elementenbaum-Aufbau gebracht werden, deren Elementnamen jedoch englisch sind. In der <code>xsl:output</code>-Anweisung, die im Beispiel-Stylesheet vor den Template-Definitionen steht, wird dem XSL-Parser mitgeteilt, dass der Ergebnisbaum eine XML-Struktur sein soll (<code>method="xml"</code>). Mit <code>indent="yes"</code> wird die saubere Formatierung des XML-Quelltextes der Ausgabe geregelt, und mit <code>encoding="ISO-8859-1"</code> die Kodierung angegeben. Damit die XML-Ausgabe eine Dokumenttyp-Deklaration und eine Verarbeitungsanweisung erhält, wird mit <code>omit-xml-declaration="yes"</code> die <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../regeln/xmldeklaration.htm">XML-Deklaration</a> veranlasst. In den nachfolgenden Template-Definitionen wird der Datenbaum des Ausgangsdokuments mit den deutschsprachigen Elementnamen in den Ergebnisbaum mit den englischsprachigen Elementnamen übersetzt.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="param">xsl:param (Parameter definieren)</a></h2>

<p>Definiert einen Parameter zur Verwendung mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#with_param">xsl:with-param</a>.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>name</code></td>
<td valign="top"><i>(obligatorisch)</i> gibt den Namen der Parametervariablen an. Unter diesem Namen kann auf ihren Wert zugegriffen werden.</td>
</tr>
<tr>
<td valign="top"><code>select</code></td>
<td valign="top"><i>(optional)</i> bestimmt einen Default-Wert für die Parametervariable. Wenn dieses Attribut angegeben wird, handelt es sich um einen Parameter, der dazu gedacht ist, von einer Template-Definition an eine andere übergeben zu werden.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen und kann sowohl außerhalb als auch innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> notiert sein. Wenn außerhalb notiert, ist es eine globale Variable, die in allen Template-Definitionen zur Verfügung steht. Wenn innerhalb einer Template-Definition notiert, ist es eine lokale Variable innerhalb des Templates.</p>

<p>Beispiel siehe <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#with_param">xsl:with-param</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="preserve_space">xsl:preserve-space (Leerraumzeichen beibehalten)</a></h2>

<p>Bestimmt, dass Leerraumzeichen, die zwischen Elementen in der Datei enthalten sind, bei der Ausgabe beibehalten werden. Leerraumzeichen sind die Zeichen mit den Hexadezimalwerten <code>#x20</code> (einfaches Leerzeichen), <code>#x9</code> (Tabulator-Zeichen), <code>#xD</code> (Wagenrücklaufzeichen) und <code>#xA</code> (Zeilenvorschub-Zeichen). Es handelt sich nicht um den Textinhalt von Elementen, sondern um die Formatierung der Elemente im Ergebnisbaum.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>elements</code></td>
<td valign="top"><i>(obligatorisch)</i> Namen von einem oder mehreren Elementen der Ausgangsdaten, deren Leerraumzeichen in der Ausgabe beibehalten werden soll. Mehrere Angaben sind durch Leerzeichen zu trennen.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen und muss außerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> notiert sein.</p>

<h3 class="xmp">Beispieldatei <var>preserve_space.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/preserve_space.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>preserve_space.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/preserve_space.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>preserve_space.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="preserve_space.xsl" ?&gt;
&lt;test&gt;


&lt;kontakt&gt;Hannes Breuer, breuer@example.org&lt;/kontakt&gt;


&lt;kontakt&gt;Eleonore Bleibtreu, elblei@example.org&lt;/kontakt&gt;


&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>preserve_space.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:preserve-space elements="test" /&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;&lt;pre&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/pre&gt;&lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="kontakt"&gt;
  &lt;b&gt;&lt;xsl:value-of select="." /&gt;&lt;/b&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In den notierten XML-Daten ist zwischen den Elementen innerhalb des Dokument-Elements <code>test</code> Leerraum notiert. Im Beispiel-Stylesheet wird durch die Anweisung <code>&lt;xsl:preserve-space elements="test" /&gt;</code> sichergestellt, dass diese Leerräume bei der Ausgabe erhalten bleiben. In der Template-Definition für die Dokumentwurzel wird der Inhalt dann für die HTML-Ausgabe in das <code>pre</code>-Element eingeschlossen, damit die Leerräume in HTML auch zum Tragen kommen.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="processing_instruction">xsl:processing-instruction (Stylesheet-Code generieren)</a></h2>

<p>Erzeugt im Ergebnisbaum eine <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../regeln/xmldeklaration.htm#verarbeitungsanweisungen">Verarbeitungsanweisung</a>.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>name</code></td>
<td valign="top"><i>(obligatorisch)</i> bestimmt den Namen der Verarbeitungsanweisung.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>processing_instruction.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/processing.xml">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>processing.xml</var> - XML/CSS-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="processing_instruction.xsl" ?&gt;
&lt;test&gt;
&lt;text&gt;guten Tag!&lt;/text&gt;
&lt;text&gt;und auf Wiedersehen!&lt;/text&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>processing_instruction.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:output method="xml" Ergebnisbaumxml-declaration="no" /&gt;

&lt;xsl:template match="/"&gt;
&lt;xsl:processing-instruction name="xml-stylesheet"&gt;
 &lt;xsl:text&gt;href="processing.css" type="text/css"&lt;/xsl:text&gt;
&lt;/xsl:processing-instruction&gt;
 &lt;test&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/test&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="text"&gt;
 &lt;xsl:copy-of select="." /&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>processing.css</var>:</h3>

<pre>
text { font-size:21px; color:blue; }
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das XSLT-Stylesheet erzeugt eine neue XML-Datei, in die alle Daten der Input-Datei, im Beispiel also von <var>processing_instruction.xml</var> kopiert werden. Dazu dient einerseits die <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#output">xsl:output</a>-Anweisung, mit der die XML-Deklaration für die neue XML-Datei erzeugt wird, und andererseits das Kopieren der <code>text</code>-Elemente mit Hilfe von <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#copy_of">xsl:copy-of</a> in den Ergebnisbaum, also die neue XML-Datei. Der Unterschied der neu erzeugten XML-Datei zur alten ist, dass sie eine Verarbeitungsanweisung zum Einbinden eines Stylesheets erhält. Dazu ist zu Beginn der Template-Definition für die Dokumentwurzel <code>/</code> ein <code>xsl:processing-instruction</code>-Element mit Namen <code>xml-stylesheet</code> notiert, das eine externe CSS-Datei einbindet. Das hat zur Folge, dass die XML-Daten direkt mit den Formaten aus der eingebundenen CSS-Datei ausgegeben werden. Im Ergebnisbaum wird die Prozessoranweisung wie folgt umgesetzt:<br>
<code>&lt;?xml-stylesheet href="ausgabe.css" type="text/css" ?&gt;</code><br>
Die Attribute werden im Beispiel zwischen einleitendem und schließenden Tag von <code>xsl:processing-instruction</code> mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#text">xsl:text</a> notiert.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="sort">xsl:sort (Elemente nach Inhalt sortieren)</a></h2>

<p>Sortiert Knoten aus einer Reihenfolge nach ihren Inhalten. So lassen sich beispielsweise alle untergeordneten Elemente <code>listenpunkt</code> eines Elements namens <code>liste</code> bei der Transformation alphabetisch oder numerisch sortieren.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>case-order</code></td>
<td valign="top"><i>(optional)</i> bestimmt, ob in der Sortierung Großbuchstaben vor Kleinbuchstaben kommen oder umgekehrt. Mögliche Werte sind <code>upper-first</code> (Großbuchstaben zuerst) oder <code>lower-first</code> (Kleinbuchstaben zuerst, Voreinstellung bei <code>data-type="text"</code>).</td>
</tr>
<tr>
<td valign="top"><code>data-type</code></td>
<td valign="top"><i>(optional)</i> bestimmt, ob die Sortierung alphabetisch (Voreinstellung) oder numerisch erfolgen soll. Bei alphabetischer Sortierung kommt z.B. <code>9</code> nach <code>10</code>, bei numerischer <code>10</code> nach <code>9</code>. Mögliche Werte sind <code>text</code> (alphabetische Sortierung) oder <code>number</code> (numerische Sortierung).</td>
</tr>
<tr>
<td valign="top"><code>lang</code></td>
<td valign="top"><i>(optional)</i> gibt die Sprache (nach <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../diverses/sprachenlaenderkuerzel.htm#nach_rfc_1766">RFC 1766</a>) an, nach dessen Sprachkonventionen die Sortierung erfolgen soll. So wird beispielsweise der Buchstabe <code>ä</code> im Deutschen (<code>lang="de"</code>) anders im Alphabet eingeordnet als im Schwedischen (<code>lang="se"</code>).</td>
</tr>
<tr>
<td valign="top"><code>order</code></td>
<td valign="top"><i>(optional)</i> bestimmt, ob die Sortierung aufsteigend (Voreinstellung), also etwa von A nach Z, oder absteigend, also etwa von Z nach A, erfolgen soll. Mögliche Werte sind <code>ascending</code> (aufsteigende Sortierung) oder <code>descending</code> (absteigende Sortierung).</td>
</tr>
<tr>
<td valign="top"><code>select</code></td>
<td valign="top"><i>(optional)</i> gibt an, was sortiert werden soll. Wird das Attribut weggelassen, ist der Inhalt des betroffenen Elements dasjenige, was sortiert wird.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#apply_templates">xsl:apply-templates</a> oder <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#for_each">xsl:for-each</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>sort.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/sort.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>sort.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/sort.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>sort.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="sort.xsl" ?&gt;
&lt;test&gt;
&lt;spieler&gt;&lt;name&gt;Fridolin&lt;/name&gt;&lt;punkte&gt;12&lt;/punkte&gt;&lt;/spieler&gt;
&lt;spieler&gt;&lt;name&gt;Paolo&lt;/name&gt;&lt;punkte&gt;19&lt;/punkte&gt;&lt;/spieler&gt;
&lt;spieler&gt;&lt;name&gt;Richie&lt;/name&gt;&lt;punkte&gt;27&lt;/punkte&gt;&lt;/spieler&gt;
&lt;spieler&gt;&lt;name&gt;Winnie&lt;/name&gt;&lt;punkte&gt;10&lt;/punkte&gt;&lt;/spieler&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>sort.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;table border="1"&gt;
  &lt;xsl:for-each select="test/spieler"&gt;
   &lt;xsl:sort select="punkte" order="descending" data-type="number" /&gt;
   &lt;tr&gt;
   &lt;td&gt;&lt;xsl:value-of select="name" /&gt;&lt;/td&gt;
   &lt;td&gt;&lt;xsl:value-of select="punkte" /&gt;&lt;/td&gt;
   &lt;/tr&gt;
  &lt;/xsl:for-each&gt;
 &lt;/table&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die XML-Daten im Beispiel enthalten Spielernamen und erreichte Punktzahlen. Bei der HTML-Ausgabe wird diese Liste nach Punktzahlen absteigend sortiert. Dazu wird im Beispiel-Stylesheet innerhalb der <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#for_each">xsl:for-each</a>-Anweisung eine <code>xsl:sort</code>-Anweisung notiert. Die Anweisung wirkt an dieser Stelle notiert wie ein Filter, der die Abarbeitung der einzelnen Elemente vom Typ <code>spieler</code> beeinflusst. Als Sortierkriterium wird <code>punkte</code> angegeben, da nach Punktzahlen sortiert werden soll. Die Sortierreihenfolge soll absteigend (<code>descending</code>) sein. Da die Punktzahlen numerisch interpretiert werden sollen, ist noch die Angabe <code>data-type="number"</code> notiert. Anschließend werden einfach die aktuellen Werte der Elemente <code>name</code> und <code>punkte</code> in die HTML-Tabelle geschrieben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="strip_space">xsl:strip-space (Behandlung von Leerraumzeichen steuern)</a></h2>

<p>Bestimmt, dass Leerraumzeichen, die zwischen Elementen in der Datei enthalten sind, bei der Ausgabe entfernt werden. Leerraumzeichen sind die Zeichen mit den Hexadezimalwerten <code>#x20</code> (einfaches Leerzeichen), <code>#x9</code> (Tabulator-Zeichen), <code>#xD</code> (Wagenrücklaufzeichen) und <code>#xA</code> (Zeilenvorschub-Zeichen). Es handelt sich nicht um den Textinhalt von Elementen, sondern um die Formatierung der Elemente im Ergebnisbaum.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>elements</code></td>
<td valign="top"><i>(obligatorisch)</i> Namen von einem oder mehreren Elementen der Ausgangsdaten, deren Leerraumzeichen in der Ausgabe entfernt werden sollen. Mehrere Angaben sind durch Leerzeichen zu trennen.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen und muss außerhalb von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> notiert sein.</p>

<h3 class="xmp">Beispieldatei <var>strip_space.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/strip_space.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>strip_space.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/strip_space.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>strip_space.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="strip_space.xsl" ?&gt;
&lt;test&gt;


&lt;kontakt&gt;Hannes Breuer, breuer@example.org &lt;/kontakt&gt;


&lt;kontakt&gt;Eleonore Bleibtreu, elblei@example.org&lt;/kontakt&gt;


&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>strip_space.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:strip-space elements="test" /&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;&lt;pre&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/pre&gt;&lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="kontakt"&gt;
  &lt;b&gt;&lt;xsl:value-of select="." /&gt;&lt;/b&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In den notierten XML-Daten ist zwischen den Elementen innerhalb des Dokument-Elements <code>test</code> Leerraum notiert. Im Beispiel-Stylesheet wird durch die Anweisung <code>&lt;xsl:strip-space elements="test" /&gt;</code> sichergestellt, dass diese Leerräume bei der Ausgabe entfernt werden. In der Template-Definition für die Dokumentwurzel wird der Inhalt dann für die HTML-Ausgabe in das <code>pre</code>-Element eingeschlossen, damit das Verschwinden der Leerräume in HTML sichtbar wird.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="stylesheet">xsl:stylesheet (Stylesheet Wurzelelement)</a></h2>

<p>Ist das Wurzelelement eines XSL-Stylesheets und beinhaltet sämtliche Style-Definitionen.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>extension-element-prefixes</code></td>
<td valign="top"><i>(optional)</i> gibt Namensräume an, die innerhalb des Stylesheets benötigt werden, um Elemente dieser anderen Namensräume zu erkennen. Erlaubt sind eine oder mehrere Angaben. Mehrere Angaben sind durch Leerzeichen zu trennen.</td>
</tr>
<tr>
<td valign="top"><code>exclude-result-prefixes</code></td>
<td valign="top"><i>(optional)</i>  gibt Namensräume an, die innerhalb des Stylesheets benötigt werden, um Elemente dieser anderen Namensräume zu erkennen. Beim Erzeugen des Ergebnisbaums werden diese Namensräume jedoch nicht mit übernommen, sofern sie dort nicht benötigt werden. Erlaubt sind eine oder mehrere Angaben. Mehrere Angaben sind durch Leerzeichen zu trennen.</td>
</tr>
<tr>
<td valign="top"><code>id</code></td>
<td valign="top"><i>(optional)</i> legt einen eindeutigen Bezeichnernamen für das Stylesheet fest, unter dem es "von außen" ansprechbar ist.</td>
</tr>
<tr>
<td valign="top"><code>version</code></td>
<td valign="top"><i>(obligatorisch)</i> gibt die verwendete XSL-Sprachversion an. Diese unbedingt erforderliche Angabe muss derzeit <code>1.0</code> lauten.</td>
</tr>
<tr>
<td valign="top" colspan="2">Ferner enthält das <code>xsl:stylesheet</code>-Element eine oder mehrere Angaben darüber, welchen Namensraum es benutzt. Dazu müssen die Quellen der Namensräume mit <code>xmlns:xsl=[Quelle]</code> angegeben werden. Für den XSLT-Namensraum ist üblicherweise  <code>xmlns:xsl="http://www.w3.org/1999/XSL/Transform"</code> anzugeben. Abweichungen dazu sind abhängig vom verwendeten XSL-Prozessor.</td>
</tr>
</table>



<h3 class="xmp">Beispieldatei <var>stylesheet.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/stylesheet.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>stylesheet.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/stylesheet.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>stylesheet.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="stylesheet.xsl" ?&gt;
&lt;test&gt;
1234567890
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>stylesheet.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;&lt;head&gt;&lt;/head&gt;
 &lt;body style="background-color:#000000; font-family:Algerian; font-size:80px; color:#33FF33"&gt;
  &lt;xsl:value-of select="." /&gt;
 &lt;/body&gt;&lt;/html&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die XML-Beispieldaten enthalten nur das Wurzelelement mit einer Ziffernfolge als Inhalt. Das Beispiel-Stylesheet ist dementsprechend einfach. Mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#template">xsl:template</a> wird eine Template-Definition zur Übersetzung der XML-Daten in die HTML-Ausgabe definiert. Eingeschlossen werden solche und andere XSL-Definition in das Wurzelelement <code>xsl:stylesheet</code>. Im Beispiel enthält das einleitende Tag dieses Elements die typischen Angaben zur XSLT-Version, zur XSLT-Quelle und zur Quelle des verwendeten HTML-Namensraums (hier: XHTML).</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="template">xsl:template (Schablone für Ergebnisbaum definieren)</a></h2>

<p>Dient zum Definieren von Schablonen für Übersetzungen des Ausgangsbaums in den Ergebnisbaum. Dazu wird angegeben, welcher Knoten des Ausgangsbaums in welches Konstrukt des Ergebnisbaums übersetzt werden soll. Bei einer Transformation von eigenen XML-Daten nach HTML kann mit Hilfe einer solchen Template-Definition beispielsweise aus einem Element namens <code>liste</code> eine Aufzählungsliste mit dem <code>ul</code>-Element werden, und untergeordnete Elemente namens <code>listenpunkt</code> lassen sich in entsprechende HTML-Elemente des Typs <code>li</code> transformieren.<br>
Das <code>xsl:template</code>-Element ist dadurch wohl das wichtigste und bedeutendste Element von XSLT.<br>
Meistens sind Ausgangsbaum (also die Daten, die in einer XML-Datenstruktur vorliegen) und Ergebnisbaum (also die Datenstruktur, in die übersetzt werden soll - z.B. in HTML) so komplex, dass sich nicht alles in einer einzigen Template-Definition erledigen lässt. Stattdessen können Template-Definitionen mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#apply_templates">xsl:apply-templates</a> andere Template-Definitionen aufrufen, die z.B. untergeordnete Knoten verarbeiten.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>match</code></td>
<td valign="top"><i>(optional)</i> gibt an, für welches Knoten-Set bzw. Pfad nach <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm">XPath-Syntax</a> im Ausgangsbaum die Template-Definition gelten soll. Wird dieses Attribut nicht angegeben, muss stattdessen <code>name</code> angegeben werden.</td>
</tr>
<tr>
<td valign="top"><code>mode</code></td>
<td valign="top"><i>(optional)</i> vergibt einen Namen für den Modus der Template-Definition. Templates mit Modusangabe können mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#apply_templates">xsl:apply-templates</a> ausgewählt werden.</td>
</tr>
<tr>
<td valign="top"><code>name</code></td>
<td valign="top"><i>(optional)</i> vergibt einen Namen für die Template-Definition. Unter diesem Namen kann die Template-Definition mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#call_template">xsl:call-template</a> aufgerufen werden.</td>
</tr>
<tr>
<td valign="top"><code>priority</code></td>
<td valign="top"><i>(optional)</i> ein numerischer Wert, der Konfliktfälle bei der Reihenfolge des Abarbeitens von Template-Definitionen bewältigen soll. In einigen XSL-Prozessoren ist es bislang so gelöst, dass untergeordnete Templates oder Attributnamen normalerweise den Prioritätswert <code>0</code> haben. Untergeordnete Templates oder Attributnamen mit Namensraumangabe plus dem Platzhalter <code>*</code> haben den Prioritätswert <code>-0.25</code>. Ein nicht weiter eingegrenzter Platzhalter <code>*</code> hat den Prioritätswert <code>-0.5</code>. Alle anderen Templates haben einen Prioritätswert von <code>0.5</code>.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>template.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/template.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>template.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/template.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>template.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="template.xsl" ?&gt;
&lt;test&gt;
 &lt;titel&gt;Dateiendungen&lt;/titel&gt;
 &lt;glossar&gt;
  &lt;eintrag&gt;
   &lt;begriff&gt;bak&lt;/begriff&gt;
   &lt;bedeutung&gt;Backup-Datei&lt;/bedeutung&gt;
  &lt;/eintrag&gt;
  &lt;eintrag&gt;
   &lt;begriff&gt;bmp&lt;/begriff&gt;
   &lt;bedeutung&gt;Bitmap-Grafik&lt;/bedeutung&gt;
  &lt;/eintrag&gt;
 &lt;/glossar&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>template.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="titel"&gt;
 &lt;h1&gt;&lt;xsl:value-of select="." /&gt;&lt;/h1&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="glossar/eintrag"&gt;
 &lt;p style="font-family:Arial,Helvetica,sans-serif; font-size:16px"&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/p&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="begriff"&gt;
 &lt;b style="color:blue"&gt;&lt;xsl:apply-templates /&gt;: &lt;/b&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="bedeutung"&gt;
  &lt;xsl:value-of select="." /&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel enthält in den XML-Daten eine typische verschachtelte Elementstruktur, in diesem Fall zur Auszeichnung einer glossar-artigen Liste von Dateiendungen und ihrer Bedeutung. Im Beispiel-Stylesheet wird diese XML-Elementstruktur in eine xml-gerechte HTML-Struktur übersetzt. Dies geschieht innerhalb der <code>xsl:template</code>-Definitionen. Solche Template-Definitionen sprechen üblicherweise mit Hilfe des Attributs <code>match</code> ein bestimmtes Element der Ausgangsdaten an. Als Inhalt enthält die Template-Definition dann HTML-Code und andere XSL-Anweisungen, mit deren Hilfe die Übersetzung nach HTML gesteuert wird. Mit der obersten Template-Definition, die <code>match="/"</code> als Angabe hat, wird das Wurzelelement der XML-Daten angesprochen (im Beispiel das Element mit dem Namen <code>test</code>).<br>
Um eine ordentliche HTML-Datei zu erzeugen, wird als Inhalt dieser Template-Definition das Grundgerüst der HTML-Datei notiert. Zwischen dem einleitenden und dem abschließenden <code>body</code>-Tag ist die XSL-Anweisung <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#apply_templates">xsl:apply-templates</a> notiert, mit der untergeordnete Template-Definitionen aufgerufen werden, die untergeordnete XML-Elemente verarbeiten. Maßgeblich dafür ist die Baumstruktur der XML-Daten. Im obigen Beispiel hat das Wurzelelement der XML-Daten zwei unmittelbar untergeordnete Elemente, nämlich <code>titel</code> und <code>glossar</code>. Für das <code>titel</code>-Element ist eine eigene Template-Definition notiert (<code>&lt;xsl:template match="titel"&gt;</code>). Darin wird mit Hilfe der XSL-Anweisung <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#value_of">xsl:value-of</a> der Inhalt des <code>titel</code>-Elements in eine HTML-Überschrift 1. Ordnung übersetzt.<br>
Für das <code>glossar</code>-Element existiert im Beispiel keine eigene Template-Definition, erst wieder für dessen untergeordnetes Element <code>eintrag</code>. Damit dieses Template von der Anweisung <code>&lt;xsl:apply-templates&nbsp;/&gt;</code>, die innerhalb der Template-Definition des Wurzelelements notiert ist, angesprochen wird, wird es nach <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm">XPath-Syntax</a> mit <code>glossar/eintrag</code> adressiert. Jeder Glossareintrag wird im Beispiel in einen CSS-formatierten HTML-Absatz übersetzt. Innerhalb davon werden wiederum mit <code> &lt;xsl:apply-templates&nbsp;/&gt;</code> die Template-Definitionen für untergeordnete XML-Elemente aufgerufen. Im Beispiel sind das die Definitionen für die untergeordneten Elemente <code>begriff</code> und <code>bedeutung</code>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="text">xsl:text (Zeicheninhalt ausgeben)</a></h2>

<p>Erzeugt statischen Text im Ergebnisbaum.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>disable-output-escaping</code></td>
<td valign="top"><i>(optional)</i> bestimmt, wie XML-eigene Zeichen wie <code>&lt;</code> oder <code>&gt;</code> behandelt werden. Mögliche Werte sind <code>yes</code> und <code>no</code> (Voreinstellung). Bei <code>yes</code> werden solche Zeichen <b>nicht</b> in ihre benannten Namen umgewandelt, bei <code>no</code> werden sie umgewandelt.</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>xsltext.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/xsltext.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>xsltext.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/xsltext.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>xsltext.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="xsltext.xsl" ?&gt;
&lt;test&gt;
 &lt;behauptung&gt;Die Welt ist ein Dorf&lt;/behauptung&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>xsltext.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="behauptung"&gt;
 &lt;p&gt;&lt;xsl:value-of select="." /&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;
 &lt;xsl:text&gt;
  &amp;lt;!--
   document.write(&amp;quot;&amp;lt;p&amp;gt;&amp;quot; + document.lastModified + &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;);
  //--&amp;gt;
 &lt;/xsl:text&gt;
&lt;/script&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die XML-Daten des Beispiels enthalten eine Behauptung. Im Beispiel-Stylesheet wird die Behauptung in einen HTML-Absatz übersetzt. Unterhalb davon ist jedoch noch eine <code>xsl:text</code>-Anweisung zum Erzeugen von weiterem Text notiert. Diese wiederum enthält die HTML-gerechte Notation eines kleinen JavaScripts, das in einem Textabsatz den Zeitpunkt der letzten Änderung der Datei ausgibt. So, wie die Anweisung im Beispiel notiert ist, müssen innerhalb davon die XML-eigenen Zeichen maskiert werden.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="transform">xsl:transform (Stylesheet Wurzelelement)</a></h2>

<p>Ist ein Synonym für <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#stylesheet">xsl:stylesheet</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="value_of">xsl:value-of (Wert ausgeben)</a></h2>

<p>Erzeugt eine gespeicherte Zeichenkette an der aktuellen Position im Ausgabebaum. Bei der gespeicherten Zeichenkette kann es sich z.B. um den Inhalt eines Knotens der XML-Daten handeln, oder um den Inhalt einer zuvor definierten Variablen.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>disable-output-escaping</code></td>
<td valign="top"><i>(optional)</i> bestimmt, wie bei der Ausgabe XML-eigene Zeichen wie <code>&lt;</code> oder <code>&gt;</code> behandelt werden. Mögliche Werte sind <code>yes</code> und <code>no</code> (Voreinstellung). Bei <code>yes</code> werden solche Zeichen <b>nicht</b> in ihre benannten Namen umgewandelt, bei <code>no</code> werden sie umgewandelt.</td>
</tr>
<tr>
<td valign="top"><code>extension-element-prefixes</code></td>
<td valign="top"><i>(optional)</i> gibt Namensräume an, die benötigt werden, um Elemente dieser anderen Namensräume zu erkennen. Erlaubt sind eine oder mehrere Angaben. Mehrere Angaben sind durch Leerzeichen zu trennen.</td>
</tr>
<tr>
<td valign="top"><code>select</code></td>
<td valign="top"><i>(obligatorisch)</i> Wählt einen Knoten oder eine Variable oder einen Parameter aus, dessen Inhalt verwendet werden soll. </td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#template">xsl:template</a> vorkommen.</p>

<h3 class="xmp">Beispieldatei <var>value_of.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/value_of.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>value_of.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/value_of.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>value_of.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="value_of.xsl" ?&gt;
&lt;test&gt;
 &lt;liste&gt;
   &lt;eintrag&gt;mein Haus&lt;/eintrag&gt;
   &lt;eintrag&gt;mein Auto&lt;/eintrag&gt;
   &lt;eintrag&gt;mein Boot&lt;/eintrag&gt;
 &lt;/liste&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>value_of.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;ul&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/ul&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="liste"&gt;
  &lt;xsl:for-each select="eintrag"&gt;
   &lt;li&gt;&lt;xsl:value-of select="." /&gt;&lt;/li&gt;
  &lt;/xsl:for-each&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In den XML-Daten wird eine Liste mit Einträgen definiert. Im Beispiel-Stylesheet wird diese Liste in eine HTML-Aufzählungsliste übersetzt. In der Template-Definition für das Element <code>liste</code> wird mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#for_each">xsl:for-each</a> für jedes untergeordnete Element <code>eintrag</code> bestimmt, dass dessen jeweiliger Inhalt, der mit <code>&lt;xsl:value-of select="."&nbsp;/&gt;</code> ermittelt wird, in je ein HTML-Listenelement <code>li</code> gesetzt wird.<br>
Mit <code>select="."</code> wird der Inhalt des aktuellen Elements ausgewählt. Generell gilt bei der Wertzuweisung an das <code>select</code>-Attribut die <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm">XPath-Syntax</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="variable">xsl:variable (Variable definieren)</a></h2>

<p>Definiert eine Variable, deren Wert im weiteren Verlauf verwendet werden kann.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>name</code></td>
<td valign="top"><i>(obligatorisch)</i> gibt den Namen der Variablen an. Unter diesem Namen kann auf ihren Wert zugegriffen werden.</td>
</tr>
<tr>
<td valign="top"><code>select</code></td>
<td valign="top"><i>(optional)</i> bestimmt einen Wert für die Variable. Wird dieses Attribut notiert, muss das <code>xsl:variable</code>-Element leer sein. Wird es nicht notiert, erfolgt die Wertzuweisung als Inhalt des Elements zwischen seinem Anfangs- und End-Tag. Mit <code>select</code> kann z.B. ein Element aus den XML-Ausgangsdaten ausgewählt werden. Auch die Vorbelegung mit statischem Text ist möglich, z.B. mit <code>select="'Name:'"</code> (dabei auf die inneren einfachen Anführungszeichen achten!).</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#stylesheet">xsl:stylesheet</a> vorkommen und kann sowohl außerhalb als auch innerhalb von <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#template">xsl:template</a> notiert sein. Wenn außerhalb notiert, ist es eine globale Variable, die in allen Template-Definitionen zur Verfügung steht. Wenn innerhalb einer Template-Definition notiert, ist es eine lokale Variable innerhalb des Templates.</p>

<h3 class="xmp">Beispieldatei <var>variable.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/variable.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>variable.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/variable.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>variable.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="variable.xsl" ?&gt;
&lt;test&gt;
 &lt;spruch&gt;
   Das ist ein weites Feld
 &lt;/spruch&gt;
 &lt;spruch&gt;
   Morgenstund hat Gold im Mund
 &lt;/spruch&gt;
 &lt;spruch&gt;
   Stell dir vor es geht und keiner kriegts hin
 &lt;/spruch&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>variable.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;xsl:apply-templates select="test/spruch" /&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="spruch"&gt;
 &lt;xsl:variable name="textzuvor"&gt;
  &lt;xsl:choose&gt;
   &lt;xsl:when test="position()=1"&gt;Erster Eintrag: &lt;/xsl:when&gt;
   &lt;xsl:when test="position()=last()"&gt;Letzter Eintrag: &lt;/xsl:when&gt;
   &lt;xsl:otherwise&gt;Eintrag: &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
 &lt;/xsl:variable&gt;
 &lt;p&gt;&lt;b&gt;&lt;xsl:value-of select="$textzuvor" /&gt;&lt;/b&gt;&lt;br /&gt;
 &lt;xsl:value-of select="." /&gt;&lt;/p&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die XML-Daten des Beispiels enthalten eine Reihe von Sprüchen. Im Beispiel-Stylesheet wird innerhalb der Template-Definition für das Element <code>spruch</code> eine Variable mit dem Namen <code>textzuvor</code> definiert. Es handelt sich um eine lokale Variable, deren Wert als Inhalt zwischen dem Anfangs-Tag <code>&lt;xsl:variable...&gt;</code> und dem Gegenstück <code>&lt;/xsl:variable&gt;</code> dynamisch ermittelt wird. Dazu dient eine <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#choose">xsl:choose</a>-Anweisung, bei der mit der Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathfunktionen.htm#position">position()</a> ermittelt wird, ob es sich um den ersten Spruch, den letzten oder einen dazwischen handelt. Abhängig davon wird ein unterschiedlicher Text erzeugt: <code>Erster Eintrag</code>, <code>Letzter Eintrag</code> oder einfach nur <code>Eintrag</code>. Dies ist der Wert, der der Variablen <code>textzuvor</code> zugewiesen wird. Da die Template-Definition bei jedem Vorkommen des Elements <code>spruch</code> neu aufgerufen wird, wird auch jedesmal der Variablenwert neu ermittelt.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="when">xsl:when (Bedingung innerhalb einer Auswahl)</a></h2>

<p>Definiert eine Bedingung bei einer Mehrfachauswahl innerhalb der <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#choose">xsl:choose</a>-Anweisung.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>test</code></td>
<td valign="top"><i>(obligatorisch)</i> formuliert die Bedingung.</td>
</tr>
</table>

<p>Kann innerhalb <code>xsl:choose</code> vorkommen.</p>

<p>Beispiel mit Erläuterung siehe <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#choose">xsl:choose</a>, für Bedingungen siehe auch <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#if">xsl:if</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xslt10.gif" width="30" height="30" alt="XSLT 1.0" title="XSLT 1.0">&nbsp;<a class="an" name="with_param">xsl:with-param (Parameter einen Wert zuweisen)</a></h2>

<p>Weist einem Parameter einen Wert zu, und zwar beim Aufruf einer Template-Definition. In der aufgerufenen Template-Definition wird dann, sofern dieser Parameter dort verfügbar ist, mit dem zugewiesenen Wert gearbeitet.</p>

<p>Hat folgende Attribute:</p>

<table>
<tr>
<td valign="top"><code>name</code></td>
<td valign="top"><i>(obligatorisch)</i> gibt den Namen des Parameters an. Unter diesem Namen muss der Parameter innerhalb einer Template-Definition verfügbar sein. Damit der Parameter dort verfügbar ist, muss er mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#param">xsl:param</a> definiert werden.</td>
</tr>
<tr>
<td valign="top"><code>select</code></td>
<td valign="top"><i>(optional)</i> weist dem Parameter einen Wert zu. Mit <code>select</code> kann z.B. ein Knoten aus den XML-Ausgangsdaten ausgewählt werden. Dann ist dessen Inhalt der zugewiesene Wert. Es kann aber auch ein anderer Ausdruck sein, z.B. ein Rechenausdruck. Auch die Zuweisung von statischem Text ist möglich, z.B. mit <code>select="'Name'"</code> (dabei auf die inneren einfachen Anführungszeichen achten!).</td>
</tr>
</table>

<p>Kann innerhalb von <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#apply_templates">xsl:apply-templates</a> oder <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#call_template">xsl:call-template</a> vorkommen. Der zugewiesene Wert ist dann in den aufgerufenen Template-Definitionen verfügbar.</p>

<h3 class="xmp">Beispieldatei <var>with_param.xml</var>:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/with_param.htm">Anzeigebeispiel: So sieht's aus</a> (Ergebnisdatei <var>with_param.htm</var>)<br>
<img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/with_param.xml">Anzeigebeispiel: So sieht's aus</a> (Datei <var>with_param.xml</var> - XML/XSLT-fähiger Browser erforderlich)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="with_param.xsl" ?&gt;
&lt;test&gt;
 &lt;start&gt;10&lt;/start&gt;
 &lt;ende&gt;20&lt;/ende&gt;
&lt;/test&gt;
</pre>

<h3 class="xmp">Beispieldatei <var>with_param.xsl</var>:</h3>

<pre>
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;table border="1"&gt;
  &lt;xsl:call-template name="Schleife"&gt;
    &lt;xsl:with-param name="Zaehler" select="number(/test/start)" /&gt;
  &lt;/xsl:call-template&gt;
 &lt;/table&gt;
 &lt;/body&gt;
 &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template name="Schleife"&gt;
 &lt;xsl:param name="Zaehler" /&gt;
 &lt;xsl:choose&gt;
  &lt;xsl:when test="$Zaehler &amp;lt;= number(/test/ende)"&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;xsl:value-of select="$Zaehler" /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;xsl:value-of select="$Zaehler * $Zaehler" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;xsl:call-template name="Schleife"&gt;
     &lt;xsl:with-param name="Zaehler" select="$Zaehler + 1" /&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:when&gt;
  &lt;xsl:otherwise&gt;
   &lt;xsl:call-template name="Abbruch" /&gt;
  &lt;/xsl:otherwise&gt;
 &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;

&lt;xsl:template name="Abbruch"&gt;
 &lt;xsl:comment&gt;Schleife beendet!&lt;/xsl:comment&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die XML-Daten im Beispiel definieren einfach eine kleinere und eine größere Zahl, von denen die erste einen Startwert darstellt und die zweite einen Endwert. Im Beispiel-Stylesheet wird aus diesen Zahlen eine HTML-Tabelle erzeugt, die für alle Zahlen zwischen dem Startwert und dem Endwert in je einer Tabellenzeile die aktuelle Zahl und deren Quadrat ausgibt. Dazu wird innerhalb der Template-Definition für das Wurzelelement mit <code>xsl:call-template</code> eine andere Template-Definition namens <code>Schleife</code> aufgerufen. Innerhalb dieser <code>xsl:call-template</code>-Anweisung ist eine <code>xsl:with-param</code>-Anweisung notiert, die einem Parameter namens <code>Zaehler</code> mit <code>select</code> einen Wert zuweist. In dem Fall ist das der Inhalt des Elements <code>start</code> (Pfad: <code>/test/start</code>). Dabei wird mit Hilfe der Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathfunktionen.htm#number">number()</a> sichergestellt, dass der Inhalt des Elements als Zahl interpretiert wird.<br>
In der aufgerufenen Template-Definition <code>Schleife</code> wird mit <code>&lt;xsl:param name="Zaehler"&nbsp;/&gt;</code> der Parameter namens <code>Zaehler</code> definiert. Nur so ist es der Template-Definition moeglich, mit dem Wert dieses Parameters, der ihr beim Aufruf übergeben wurde, zu arbeiten. Eine Alternative wäre es, wenn <code>Zaehler</code> global definiert wäre.<br>
Mit <code>&lt;xsl:when test="$Zaehler &lt;= number(/test/ende)"&gt;</code> wird abgefragt, ob der Wert von <code>Zaehler</code> kleiner oder gleich dem Wert ist, der im Element <code>ende</code> gespeichert ist. Ist das der Fall, wird eine Tabellenzeile erzeugt, die den Wert und sein Quadrat ausgibt. Außerdem ruft sich das Template <code>Schleife</code> selbst wieder auf und übergibt sich dabei wiederum den Parameter <code>Zaehler</code>. Dieser wird um 1 erhöht, sodass die Template-Definition beim nächsten Aufruf die nächsthöhere Zahl abfragt.<br>
Ist der Wert des Elements <code>ende</code> überschritten, wird eine Template-Definition namens <code>Abbruch</code> aufgerufen, die lediglich einen abschließenden Kommentar in den auszugebenden HTML-Code setzt.</p>



<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" class="doc">
&nbsp;<a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a>
</td></tr>
<tr><td class="doc"><a href="xpathsyntax.htm"><img src="../../src/next.gif" width="10" height="10" border="0" hspace="10" alt="weiter"></a></td>
<td width="100%"><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xpathsyntax.htm">XPath-Syntax</a>
</td></tr>
<tr>
<td class="doc"><a href="xsltbeispiele.htm"><img src="../../src/prev.gif" width="10" height="10" border="0" hspace="10" alt="zurück"></a></td>
<td><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="xsltbeispiele.htm">Beispiele für XSLT</a>
</td>
</tr>
<tr><td colspan="2" class="doc">&nbsp;</td>
</tr>
<tr>
<td colspan="2" class="nav"><a class="an" name="bottom"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">XML/DTDs</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Darstellung von XML-Daten</a></td>
</tr>
</table>

<p>&copy; 2007 <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../editorial/impressum.htm">Impressum</a></p>

</body>
</html>
