<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>SELFHTML: XML / Dokumenttyp-Definitionen (DTDs) / Entities für Textbausteine und Umschreibungen</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Wie in einer XML-DTD Entities (Bausteine) deklariert werden und welche Zwecke sie erfüllen können.">
<meta name="keywords"       content="SELFHTML, XML, DTD, DTDs, Document Type Definition, Dokumenttyp-Definitionen, Entities, Entity-Deklaration">
<meta name="author"         content="Redaktion SELFHTML, selfhtml81@selfhtml.org">
<meta name="robots"         content="noindex, nofollow">
<meta name="DC.Publisher"   content="SELFHTML e. V.">
<meta name="DC.Date"        content="2005-08-22T21:21:39+02:00">
<meta name="DC.Identifier"  content="http://de.selfhtml.org/xml/dtds/entities.htm">
<meta name="DC.Language"    content="de">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.created" content="2001-10-27T08:00+01:00">
<meta name="SELF.Pagetype"  content="page">
<link rel="alternate" type="application/atom+xml" title="SELFHTML-Weblog (Atom, gesamt)" href="http://aktuell.de.selfhtml.org/weblog/atom-feed">
<link rel="alternate" type="application/rss+xml" title="SELFHTML-Weblog (RSS, Auszüge)" href="http://aktuell.de.selfhtml.org/weblog/rss-feed">
<link rel="shortcut icon" type="image/x-icon" href="../../src/favicon.ico">
<link rel="author" title="Impressum" href="../../editorial/impressum.htm">
<link rel="contents" title="Inhaltsverzeichnis" href="../../navigation/inhalt.htm">
<link rel="index" title="Stichwortverzeichnis" href="../../navigation/stichwort.htm">
<link rel="search" title="Suche" href="../../navigation/suche/index.htm">
<link rel="help" title="Hilfe" href="../../editorial/index.htm">
<link rel="copyright" title="Urheberrecht" href="../../editorial/copyright.htm">
<link rel="top" title="SELFHTML" href="../../index.htm">
<link rel="up" title="Dokumenttyp-Definitionen (DTDs)" href="index.htm">
<link rel="next" title="Notationen für referenzierte Daten" href="notations.htm">
<link rel="prev" title="Attribute und Wertzuweisungen" href="attribute.htm">
<link rel="first" title="Allgemeines zu DTDs" href="allgemeines.htm">
<link rel="last" title="Notationen für referenzierte Daten" href="notations.htm">
</head>
<body>

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td colspan="2" class="nav"><a class="an" name="top"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">XML/DTDs</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Dokumenttyp-Definitionen (DTDs)</a></td>
</tr>
<tr>
<td class="doc" width="110"><a href="../../index.htm"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></a></td>
<td class="docbot" width="100%"><h1 class="ph1">Entities für Textbausteine und Umschreibungen</h1></td>
</tr>
<tr>
<td class="doctop">
<img src="../../src/dokx.gif" width="30" height="20" vspace="6" alt="Informationsseite">
</td>
<td valign="top" nowrap="nowrap">
<p>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#allgemeines">Allgemeines zu Entities</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#schema">Schema zur Definition von Entities</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#textbausteine">Entities für Textbausteine</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#zeichenbenennung">Entities für die Benennung von Zeichen</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#verschachtelte">Verschachtelte Entities</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#externe">Entities für externe Ressourcen</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#parameter_entities">Parameter Entities für DTD-Bausteine</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#modulare_dtds">Modulare DTDs mit Hilfe von Entities</a><br>
</p>
</td>
</tr><tr><td colspan="2" class="doc">&nbsp;<a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a>&nbsp;</td></tr>
</table>



<h2><a class="an" name="allgemeines">Allgemeines zu Entities</a></h2>

<p>Entities (Singular: Entity) sind definierte Kürzel. Vielleicht kennen Sie aus Textverarbeitungsprogrammen die Möglichkeit, Textbausteine zu definieren, die dann über ein Menü oder Tastaturkürzel sehr schnell in den aktuellen Text einfügbar sind. Genau diese Funktionalität ist eine der Aufgaben von Entities.</p>

<p>Entities in XML können jedoch mehrere Funktionen haben. So sind die Textbausteine, die Sie damit definieren können, einerseits in Anwendungsdateien verfügbar. Entities, die nur innerhalb von DTD-Definitionen eine Kürzel-Funktion haben, oder Entities, die den Bezug zu externen Datenquellen herstellen, und Enitities, die Umschreibungen für spezielle Zeichen realisieren.</p>

<p>Entities kommen auch in bekannten Auszeichnungssprachen wie HTML vor. Wenn Sie in HTML beispielsweise Zeichenfolgen wie <code>&amp;uuml;</code> notieren, dann wenden Sie Entities an, die für HTML definiert wurden. Um Entities in XML zu verstehen, müssen Sie sich jedoch von der eingeschränkten Funktionalität der HTML-Entities lösen.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="schema">Schema zur Definition von Entities</a></h2>

<p>Entities werden innerhalb einer DTD nach folgendem Schema notiert:</p>

<h3 class="xmp">Schema:</h3>

<pre>
&lt;!ENTITY [%] Name [SYSTEM|PUBLIC] "Wert" [zusätzliche Angaben] &gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die Definition eines Entities beginnt mit einer öffnenden spitzen Klammer <code>&lt;</code>. Dahinter folgt unmittelbar anschließend ein Ausrufezeichen <code>!</code> und dahinter, in Großbuchstaben, das Schlüsselwort <code>ENTITY</code>. Anschließend folgt bei <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#parameter_entities">Parameter Entities für DTD-Bausteine</a> ein Prozentzeichen <code>%</code>, bei anderen Entity-Definitionen nicht. In allen Fällen folgt jedoch ein Name für das Entity. Den Namen können Sie frei wählen. Er muss jedoch den <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="bearbeitungsregeln.htm#namen">Regeln für Namen</a> in XML genügen. Hinter dem Namen kann eines der Schlüsselwörter <code>SYSTEM</code> oder <code>PUBLIC</code> folgen, und zwar im Falle von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#externe">Entities für externe Ressourcen</a>. Bei allen anderen Entity-Definitionen geben Sie keines dieser Schlüsselwörter an. Anschließend folgt, in Anführungszeichen gesetzt, der Wert, den Sie dem Entity-Namen zuweisen wollen. Der zugewiesene Wert kann je nach Typ des Entities ganz verschiedener Natur sein. Hinter dem Namen können in speziellen Fällen noch besondere Angaben folgen. Ein Beispiel dazu wird im Abschnitt <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="attribute.htm#mit_entitywert">Attribute mit Entity-Wert</a> beschrieben.<br>
Jede Entity-Definition wird beendet mit einer schließenden spitzen Klammer <code>&gt;</code>. Die einzelnen Teile der Entity-Definition werden durch ein oder mehrere Leerzeichen voneinander getrennt.</p>

<p>Eine solche Entity-Definition können Sie an irgendeiner Stelle innerhalb der DTD definieren - vor oder nach anderen Definitionen wie <code>&lt;!ELEMENT...&gt;</code> (<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="elemente.htm">Elemente</a>), <code>&lt;!ATTLIST...&gt;</code> (<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="attribute.htm">Attribute</a>) oder <code>&lt;!NOTATION...&gt;</code> (<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="notations.htm">Notationen</a>). In jedem Fall muss ein Entity jedoch vor seiner ersten Verwendung definiert werden. Dies ist z.B. bei Parameter Entities für DTD-Bausteine zu beachten, wo die Entity-Definitionen vor den Elementtyp-Definitionen notiert werden müssen, in denen sie verwendet werden. In der Praxis werden Entities meistens zu Beginn der DTD definiert, vor allen Element- und Attribut-Definitionen.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xml10.gif" width="30" height="30" alt="XML 1.0" title="XML 1.0"><img src="../../src/msie5.gif" width="30" height="30" alt="MS IE 5.0" title="MS IE 5.0"><img src="../../src/netsc6.gif" width="30" height="30" alt="Netscape 6.0" title="Netscape 6.0"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1">&nbsp;<a class="an" name="textbausteine">Entities für Textbausteine</a></h2>

<p>Für längere Ausdrücke, die in den Anwendungsdaten einer XML-Struktur immer wieder vorkommen, wie etwa Eigennamen oder Floskeln, können Sie in der DTD Kürzel definieren.</p>

<h3 class="xmp">Beispiel-DTD <var>text-mit-baustein.dtd</var>:</h3>

<pre>
&lt;!ELEMENT text-mit-baustein (#PCDATA)&gt;
&lt;!ENTITY mfg "mit freundlichen Gr&amp;#252;&amp;#223;en" &gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Es gilt das <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#schema">Schema zur Definition von Entities</a>. Bei Entities für Textbausteine brauchen Sie nur einen Namen für das Entity vergeben und einen gewünschten Wert zuordnen. Im Beispiel wird ein Entity mit Namen <code>mfg</code> definiert, dem der Wert <code>mit freundlichen Gr&amp;#252;&amp;#223;en</code> zugeordnet wird.</p>

<h3 class="xmp">Beispiel einer gültigen Anwendung:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/text-mit-baustein.xml">Anzeigebeispiel: So sieht's aus</a> (XML-fähiger Browser zeigt z.B. die Datenstruktur an)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;!DOCTYPE text-mit-baustein SYSTEM "text-mit-baustein.dtd"&gt;
&lt;text-mit-baustein&gt;
ich verbleibe &amp;mfg;
&lt;/text-mit-baustein&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Um ein in der DTD definiertes Entity in den Anwendungsdaten zu verwenden, notieren Sie ein kaufmännisches Und (<code>&amp;</code>), direkt daran anschließend den Namen des Entities, und dahinter ein abschließendes Semikolon (<code>;</code>). Der XML-Parser setzt dann an der entsprechenden Stelle den Langtext ein, der zu dem Kürzel gehört. Das Beispiel <code>&amp;mfg;</code> erzeugt also die Ausgabe <code>mit freundlichen Grüßen</code>.</p>

<p>Ein solches Entity können Sie innerhalb der Anwendungsdaten überall notieren, wo normale Zeichendaten möglich sind, also im Zeicheninhalt zwischen einem Anfangs- und einem End-Tag oder auch in Wertzuweisungen an Attribute, bei denen Zeichendaten erlaubt sind.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Ersetzen Sie in der Zeichenfolge, die Sie einem Entity-Namen zuordnen, Zeichen mit Zeichenwerten größer 127 durch ihre numerische Umschreibung, so wie im obigen Beispiel <code>&amp;#252;</code> für <code>ü</code> oder <code>&amp;#223;</code> für <code>ß</code>. Die gewünschten Zeichenwerte können Sie den <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../inter/unicode.htm#aufbau">Unicode-Codetabellen</a> entnehmen.</p>

<p>Netscape, Opera und Firefox beachten solche Entities nur in der internen DTD.</p>


<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xml10.gif" width="30" height="30" alt="XML 1.0" title="XML 1.0"><img src="../../src/msie5.gif" width="30" height="30" alt="MS IE 5.0" title="MS IE 5.0"><img src="../../src/netsc6.gif" width="30" height="30" alt="Netscape 6.0" title="Netscape 6.0"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1">&nbsp;<a class="an" name="zeichenbenennung">Entities für die Benennung von Zeichen</a></h2>

<p>Aus HTML kennen Sie <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/referenz/zeichen.htm#benannte_iso8859_1">benannte Zeichen</a> wie <code>&amp;uuml;</code> oder <code>&amp;copy;</code>. Solche einfach zu merkenden Benennungen für Sonderzeichen können Sie in einer XML-DTD selbst definieren. Sinnvoll ist dies vor allem für Zeichen, die nicht auf der Tastatur zu finden sind, oder wenn Sie nicht wissen, mit welchen verschiedenen Entwicklungsumgebungen und internen Kodierungen die Anwender Ihrer XML-DTD arbeiten werden.</p>

<h3 class="xmp">Beispiel-DTD <var>smilies.dtd</var>:</h3>

<pre>
&lt;!ENTITY sad_smiley "&amp;#x2369;" &gt;
&lt;!ENTITY happy_smiley "&amp;#x236A;" &gt;
&lt;!ELEMENT smilies (#PCDATA)&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Als Grafiken sehen die im Beispiel gewünschten Zeichen in etwa so aus:<br>
<code>sad_smiley</code>: <img src="../../src/sad.gif" width="16" height="16" align="middle" alt="sad Smiley"> und <code>happy_smiley</code>: <img src="../../src/happy.gif" width="16" height="16" align="middle" alt="happy Smiley"></p>

<p>Es gilt das <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#schema">Schema zur Definition von Entities</a>. Bei Entities für die Benennung von Zeichen brauchen Sie nur einen Namen für das Entity vergeben und als Wert die numerische Notation des Zeichens in dezimaler oder hexadezimaler Schreibweise zuordnen. Im Beispiel werden zwei Zeichen benannt. Die Namen lauten <code>sad_smiley</code> und <code>happy_smiley</code>. Im Unicode-System haben die beiden gewünschten Zeichen, die diesen Namen zugeordnet werden sollen, in hexadezimaler Schreibweise die Werte <code>2369</code> und <code>236A</code>. Die Notationsweise ist dabei die gleiche wie in HTML 4.0, also z.B. <code>&amp;#x236A;</code> (hexadezimal) oder <code>&amp;#9066;</code> (dezimal). Die Notation beginnt mit dem kaufmännischen Und <code>&amp;</code>, gefolgt von einem Gatterzeichen <code>#</code>. Wenn Sie den Zeichenwert hexadezimal angeben wollen, muss ein <code>x</code> folgen und dahinter der hexadezimale Wert. Wenn Sie den Zeichenwert dezimal angeben wollen, folgt direkt die Zahl (ohne <code>x</code> davor). Hinter dem Zeichenwert folgt ein Semikolon <code>;</code>.</p>

<h3 class="xmp">Beispiel einer gültigen Anwendung:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/smilies.xml">Anzeigebeispiel: So sieht's aus</a> (XML-fähiger Browser zeigt z.B. die Datenstruktur an)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;!DOCTYPE smilies SYSTEM "smilies.dtd"&gt;
&lt;smilies&gt;
bist du &amp;happy_smiley; oder &amp;sad_smiley;?
&lt;/smilies&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Um das benannte Zeichen in den Anwendungsdaten zu verwenden, notieren Sie ein kaufmännisches Und (<code>&amp;</code>), direkt daran anschließend den Namen des Entities, und dahinter ein abschließendes Semikolon (<code>;</code>). Der XML-Parser setzt dann an der entsprechenden Stelle das zugehörige Zeichen ein. Im Beispiel erreichen Sie also durch die Notation von <code>&amp;happy_smiley;</code> das Gleiche, was Sie mit <code>&amp;#x236A;</code> erreichen würden - aber der Name ist eben leichter zu merken.</p>

<p>Die Notation ist innerhalb der Anwendungsdaten überall erlaubt, wo normale Zeichendaten möglich sind, also im Zeicheninhalt zwischen einem Anfangs- und einem End-Tag oder auch in Wertzuweisungen an Attribute, bei denen Zeichendaten erlaubt sind.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Wenn ein gewünschtes Zeichen nicht ausgegeben wird, liegt es an der mangelnden Unicode-Unterstützung oder daran, dass bei der Datenausgabe keine Schriftart zur Verfügung steht, die höherwertige Unicode-Zeichen wie diejenigen im obigen Beispiel darstellen kann.</p>

<p>Netscape, Opera und Firefox beachten solche Entities nur in der internen DTD.</p>


<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xml10.gif" width="30" height="30" alt="XML 1.0" title="XML 1.0"><img src="../../src/msie5.gif" width="30" height="30" alt="MS IE 5.0" title="MS IE 5.0"><img src="../../src/netsc6.gif" width="30" height="30" alt="Netscape 6.0" title="Netscape 6.0"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1">&nbsp;<a class="an" name="verschachtelte">Verschachtelte Entities</a></h2>

<p>Bei der Wertzuweisung in einer Entity-Definition können Sie durchaus auch andere Entities verwenden und auf diese Weise komplexe Bausteine erzeugen.</p>

<h3 class="xmp">Beispiel-DTD <var>mailtext.dtd</var>:</h3>

<pre>
&lt;!ENTITY f "Hatzelbutz und Partner GmbH" &gt;
&lt;!ENTITY m "info@example.org" &gt;
&lt;!ENTITY fm "&amp;f;, &amp;m;" &gt;
&lt;!ELEMENT mailtext (#PCDATA)&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In diesem Beispiel werden die zuvor definierten Entities <code>f</code> und <code>m</code> in der Wertzuweisung des Entities <code>fm</code> verwendet.</p>

<h3 class="xmp">Beispiel einer gültigen Anwendung:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/mailtext.xml">Anzeigebeispiel: So sieht's aus</a> (XML-fähiger Browser zeigt z.B. die Datenstruktur an)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;!DOCTYPE mailtext SYSTEM "mailtext.dtd"&gt;
&lt;mailtext&gt;
die Firma &amp;f; freut sich, Ihnen ihre neuesten Produkte vorstellen
zu können. Schicken Sie Ihre Bestellung an &amp;fm;.
&lt;/mailtext&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Wird in den Anwendungsdaten <code>&amp;fm;</code> notiert, so wird dies ersetzt durch <code>Hatzelbutz und Partner GmbH, info@example.org</code>. Im XML-Fachjargon sagt man auch, die Einzelbausteine <code>&amp;f;</code> und <code>&amp;m;</code> werden "durchgereicht".</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Netscape, Opera und Firefox beachten solche Entities nur in der internen DTD.</p>


<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xml10.gif" width="30" height="30" alt="XML 1.0" title="XML 1.0">&nbsp;<a class="an" name="externe">Entities für externe Ressourcen</a></h2>

<p>Über Entities für externe Ressourcen, auch <b>externe Entities</b> genannt (im Gegensatz zu allen anderen Entity-Typen, die als <b>interne Entities</b> bezeichnet werden), stellt XML eine Möglichkeit bereit, einem Parser mitzuteilen, dass Daten aus einer anderen Datei eingebunden werden sollen.</p>

<h3 class="xmp">Beispiel-DTD <var>news.dtd</var>:</h3>

<pre>
&lt;!ELEMENT news (newsdaten)*&gt;
&lt;!ENTITY datenquelle SYSTEM "news.txt" &gt;
&lt;!ELEMENT newsdaten EMPTY&gt;
&lt;!ATTLIST newsdaten
   quelle            ENTITY              #REQUIRED
&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Es gilt das <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#schema">Schema zur Definition von Entities</a>. Bei Entities für externe Ressourcen müssen Sie hinter dem Namen des Entities eines der beiden Schlüsselwörter <code>SYSTEM</code> oder <code>PUBLIC</code> (jeweils groß geschrieben) notieren. Wenn Sie die externe Datenquelle direkt mit ihrem Dateinamen bezeichnen, dann verwenden Sie <code>SYSTEM</code>. Bei der Wertzuordnung notieren Sie dann den Dateinamen der externen Quelle, gegebenenfalls mit absoluter oder relativer Pfadangabe. Es kann auch ein URI sein, z.B. <code>http://www.example.org/news/news.txt</code>. Wenn Sie stattdessen eine <b>öffentliche Quellenbezeichnung</b> (<i>public identifier</i>) angeben, dann verwenden Sie <code>PUBLIC</code> und notieren bei der Wertzuordnung die öffentliche Quellenbezeichnung der Datenquelle.</p>

<p>Ein Entity für externe Ressourcen können Sie innerhalb der XML-Anwendung nur verwenden, indem Sie den Entity-Namen einem Attribut zuordnen. Das ist eine Besonderheit bei dieser Art von Entities. Deshalb müssen Sie in der DTD neben dem Entity auch für irgendeinen gewünschten <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="elemente.htm">Elementtyp</a> ein <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="attribute.htm#mit_entitywert">Attribut mit Entity-Wert</a> definieren. Im obigen Beispiel wird ein Elementtyp <code>newsdaten</code> mit einem Attribut <code>quelle</code> definiert, das durch die Angabe <code>ENTITY</code> als Attribut mit Entity-Wert festgelegt wird.</p>

<h3 class="xmp">Beispiel einer gültigen Anwendung:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/news.xml">Anzeigebeispiel: So sieht's aus</a> (XML-fähiger Browser zeigt die Datenstruktur an)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;!DOCTYPE news SYSTEM "news.dtd"&gt;
&lt;news&gt;
&lt;newsdaten quelle="datenquelle" /&gt;
&lt;/news&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Dem Element <code>newsdaten</code> wird beim Attribut <code>quelle</code> der Entity-Name <code>"datenquelle"</code> zugewiesen. Dieser Name wird dann durch die damit verbundene Verknüpfung <code>"news.txt"</code> ersetzt. Der XML-Parser wird gleichzeitig darüber "informiert", dass es sich dabei nicht um eine Textersetzung handelt, sondern um die Angabe einer externen Referenz.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Damit die externe Referenz an der entsprechenden Stelle eingefügt wird, muss der Parser diese Information natürlich verarbeiten können und einen Weg kennen, die entsprechenden Daten anzuzeigen. Besonders bei binären Datentypen, etwa bei Grafiken, sind zusätzliche Angaben bei der Definition erforderlich. Ein Beispiel dafür finden Sie im Abschnitt <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="attribute.htm#mit_entitywert">Attribute mit Entity-Wert</a>.</p>

<p>XML schreibt bei lokalen Pfadnamen (<code>SYSTEM</code>) nicht vor, wie die Syntax lautet. Wird ein Windows-PC verwendet, kann es durchaus nötig sein, bei Pfadnamen Backslashes <code>\</code> statt der Unix-typischen Slashes <code>/</code> zu verwenden. Ebenso hängt es vom verarbeitenden Parser ab, ob er angegebene URIs auflösen kann oder nicht.</p>

<p>Ein Beispiel für die Verwendung einer öffentlichen Bezeichnung (<i>public identifier</i>) wäre etwa:<br> <code>&lt;!ENTITY&nbsp;%&nbsp;HTML_Chars&nbsp;PUBLIC&nbsp;"-//W3C//ENTITIES&nbsp;Latin1//EN//HTML"&nbsp;&gt;</code><br><code>%HTML_Chars;</code><br>Mit einer solchen Definition binden Sie die benannten Zeichen aus HTML in Ihre DTD ein. Genauere Beschreibungen zum Einbinden externer Ressourcen in eine DTD finden Sie im Abschnitt <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#modulare_dtds">Modulare DTDs mit Hilfe von Entities</a>.</p>

<p>Einige Parser meckern bei Beispielen wie dem obigen, obwohl diese XML-konform sind.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xml10.gif" width="30" height="30" alt="XML 1.0" title="XML 1.0"><img src="../../src/msie5.gif" width="30" height="30" alt="MS IE 5.0" title="MS IE 5.0">&nbsp;<a class="an" name="parameter_entities">Parameter Entities für komplexere DTDs</a></h2>

<p>Parameter Entities erlauben, "Makros" für die Verwendung innerhalb der DTD zu definieren. Besonders sinnvoll ist ihr Einsatz, wenn bestimmte komplexere Angaben zum Inhalt von Elementtypen bei mehreren Elementtypen wiederkehren. So kann man beispielsweise innerhalb eines Textes Formatierungen wie fett, kursiv, farbig, unterstrichen usw. zu einem Makro "Textformatierung" zusammenfassen. Definiert man nun bedeutungstragende Text-Elemente wie Überschriften, Listeneinträge oder Tabellenzellen, so wäre es unnötige Kopierarbeit, jedem dieser Text-Elemente wieder alle Formatierungsmöglichkeiten zuzuweisen. Einfacher ist es, nur noch das Makro "Textformatierung" zuzuweisen. Parameter Entities erhöhen somit in komplexen DTDs die Lesbarkeit und die Änderungsfreundlichkeit.</p>

<h3 class="xmp">Beispiel-DTD <var>lager.dtd</var>:</h3>

<pre>
&lt;!ENTITY % artikel "artikelnummer, artikelname, artikelmenge"&gt;
&lt;!ENTITY % zusatz "beschreibung | warenklasse"&gt;
&lt;!ELEMENT lager (eingang | ausgang)*&gt;
&lt;!ELEMENT eingang (eingangsnummer, (%artikel;), (%zusatz;))&gt;
&lt;!ELEMENT ausgang (ausgangsnummer, (%artikel;), (%zusatz;))&gt;
&lt;!ELEMENT eingangsnummer (#PCDATA)&gt;
&lt;!ELEMENT ausgangsnummer (#PCDATA)&gt;
&lt;!ELEMENT artikelnummer  (#PCDATA)&gt;
&lt;!ELEMENT artikelname    (#PCDATA)&gt;
&lt;!ELEMENT artikelmenge   (#PCDATA)&gt;
&lt;!ELEMENT beschreibung   (#PCDATA)&gt;
&lt;!ELEMENT warenklasse    (#PCDATA)&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel stellt einen Auszug aus einer DTD zu einer Datei dar, in der Lagervorgänge festgehalten werden. In dem Lager gibt es Wareneingänge und Warenausgänge. In jedem Datensatz soll ein Wareneingang oder der Warenausgang eines bestimmten Warenartikels festgehalten werden. Ein Artikel im Zusammenhang mit Wareneingang oder Warenausgang setzt sich immer wieder aus den gleichen Daten zusammen: aus Artikelnummer, Artikelname, Artikelmenge und einem beschreibenden Zusatz, der entweder eine allgemeine Artikelbeschreibung ist oder die Einordnung in eine Warenklasse. Solche zusammengehörigen Daten lassen sich bei Elementtyp-Definitionen zu Parameter Entities zusammenfassen.</p>

<p>Im Beispiel werden zwei Parameter Entitities definiert: <code>artikel</code> und <code>zusatz</code>. Dabei gilt das <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#schema">Schema zur Definition von Entities</a>. Vor dem Namen eines Parameter Entities notieren Sie ein Prozentzeichen <code>%</code>. Bei der Wertzuordnung notieren Sie eine Angabe zum Inhalt eines Elementtyps. Es handelt sich jedoch nicht wirklich um die Angabe zu einem Elementtyp-Inhalt, sondern einfach um ein Textbaustein, ein Makro, das Sie in nachfolgenden Elementtyp-Definitionen verwenden können. In beiden Parameter Entities des obigen Beispiels werden Angaben für Elementinhalte definiert.</p>

<p>Im Beispiel werden die Parameter Entities bei der Definition der Elementtypen <code>eingang</code> und <code>ausgang</code> verwendet. Beide Elementtypen haben <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="elemente.htm#mit_elementinhalt">Elementinhalt</a>. Sie bestehen aus einer Laufnummer für den Eingang bzw. Ausgang, der Artikelnummer und dem Artikelname, zusammengefasst in der Verwendung des Parameter Entity <code>artikel</code>, und wahlweise aus einer Artikelbeschreibung oder der Angabe einer Warenklasse, zusammengefasst in der Verwendung der Parameter Entity <code>zusatz</code>.</p>

<p>Bei der Verwendung eines Parameter Entity in einer Elementtyp-Definition müssen Sie auf die Notation wie im Beispiel angegeben achten. Parameter Entities müssen in Klammern gesetzt werden. Unmittelbar vor dem Namen des Parameter Entity (ohne Leerzeichen dazwischen) muss das Prozentzeichen <code>%</code> stehen. Hinter dem Namen muss ein Strichpunkt <code>;</code> notiert werden.</p>

<h3 class="xmp">Beispiel einer gültigen Anwendung:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/lager.xml">Anzeigebeispiel: So sieht's aus</a> (XML-fähiger Browser zeigt z.B. die Datenstruktur an)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;!DOCTYPE lager SYSTEM "lager.dtd"&gt;
&lt;lager&gt;

&lt;eingang&gt;
  &lt;eingangsnummer&gt;452&lt;/eingangsnummer&gt;
  &lt;artikelnummer&gt;45-234&lt;/artikelnummer&gt;
  &lt;artikelname&gt;Schreibtischstuhl "Chef"&lt;/artikelname&gt;
  &lt;artikelmenge&gt;10&lt;/artikelmenge&gt;
  &lt;warenklasse&gt;C-III&lt;/warenklasse&gt;
&lt;/eingang&gt;
&lt;ausgang&gt;
  &lt;ausgangsnummer&gt;318&lt;/ausgangsnummer&gt;
  &lt;artikelnummer&gt;37-917&lt;/artikelnummer&gt;
  &lt;artikelname&gt;Spiegelschrank  "Narziss"&lt;/artikelname&gt;
  &lt;artikelmenge&gt;3&lt;/artikelmenge&gt;
  &lt;beschreibung&gt;F-IV&lt;/beschreibung&gt;
&lt;/ausgang&gt;

&lt;/lager&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Dem Anwendungsbeispiel ist nicht mehr zu entnehmen, dass die Definition der Elementtypen <code>eingang</code> und <code>ausgang</code> zum Teil auf Verwendung von Parameter Entities beruht. Parameter Entities sind also nur innerhalb der DTD-Definitionen von Bedeutung, auf die Anwendung haben sie keinen Einfluss. Das Beispiel der angewendeten DTD-Definitionen zeigt zwei Datensätze, je einen für einen Wareneingang und einen für einen Warenausgang. Die inneren Elemente sind dabei so notiert, wie es die definierten Regeln zulassen.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/xml10.gif" width="30" height="30" alt="XML 1.0" title="XML 1.0"><img src="../../src/msie5.gif" width="30" height="30" alt="MS IE 5.0" title="MS IE 5.0">&nbsp;<a class="an" name="modulare_dtds">Modulare DTDs mit Hilfe von Entities</a></h2>

<p>Beim Entwurf komplexer Datenstrukturen macht es häufig Sinn, die Definitionen auf mehrere DTDs zu verteilen. Mit Hilfe von Entities können Sie DTDs in andere DTDs als Module importieren. So bietet es sich beispielsweise in einem betriebswirtschaftlichen Datensystem an, eine separate DTD mit den Datenstrukturen eines Produkts anzulegen, die dann in verschiedenen anderen Datenstrukturen, etwa denen für eine Produktbestellung oder der für die Produktbestandsverwaltung im Lager, importiert werden kann.</p>

<h3 class="xmp">Beispiel-DTD <var>produkt.dtd</var>:</h3>

<pre>
&lt;!ELEMENT produkt (warennummer,bezeichnung,hersteller)&gt;
&lt;!ELEMENT warennummer (#PCDATA)&gt;
&lt;!ELEMENT bezeichnung (#PCDATA)&gt;
&lt;!ELEMENT hersteller (#PCDATA)&gt;
</pre>

<h3 class="xmp">Beispiel-DTD <var>bestellungen.dtd</var>:</h3>

<pre>
&lt;!ENTITY % produktdaten SYSTEM "produkt.dtd" &gt;
%produktdaten;
&lt;!ELEMENT bestellungen (bestellung)*&gt;
&lt;!ELEMENT bestellung (produkt,besteller,anzahl,preis)*&gt;
&lt;!ELEMENT besteller (#PCDATA)&gt;
&lt;!ELEMENT anzahl (#PCDATA)&gt;
&lt;!ELEMENT preis (#PCDATA)&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In der DTD mit Namen <i>produkt.dtd</i> wird ein Elementtyp <code>produkt</code> <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="elemente.htm#mit_elementinhalt">mit Elementinhalt</a> definiert. Der Elementinhalt besteht aus den Elementtypen <code>warennummer</code>, <code>bezeichnung</code> und <code>hersteller</code>, die jeweils Zeicheninhalt haben können.</p>

<p>In der zweiten DTD mit Namen <i>bestellung.dtd</i> wird die DTD für Produktdaten nun eingebunden. Dazu wird zunächst ein <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#externe">Entity für externe Ressourcen</a> mit Namen <code>produktdaten</code> definiert. Es verweist auf die andere DTD <i>produkte.dtd</i>. Wichtig ist dabei aber die Notation des Prozentzeichens vor dem Entity-Namen, so wie es bei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#parameter_entities">Parameter Entities für DTD-Bausteine</a> üblich ist. Denn durch das Prozentzeichen geben Sie an, dass Sie das Entity innerhalb der aktuellen DTD verwenden wollen, und dass dessen Inhalt als Bestandteil der DTD zu interpretieren ist.</p>

<p>Das so definierte Entity wird anschließend außerhalb jeder anderen DTD-Definition alleinstehend notiert (<code>%produktdaten;</code>). Dadurch werden die Definitionen aus <i>produkt.dtd</i> an dieser Stelle eingebunden und können in nachfolgenden Definitionen verwendet werden. Im obigen Beispiel können Sie das an der Definition des Elementtyps <code>bestellung</code> sehen. Dieser Elementtyp enthält als Elementinhalt vier Elementtypen. Davon werden aber nur drei in der aktuellen DTD definiert, nämlich <code>besteller</code>, <code>anzahl</code> und <code>preis</code>. Der andere Elementtyp <code>produkt</code> ist derjenige, der in <i>produkt.dtd</i> definiert ist.</p>

<h3 class="xmp">Beispiel einer gültigen Anwendung:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/bestellungen.xml">Anzeigebeispiel: So sieht's aus</a> (XML-fähiger Browser zeigt z.B. die Datenstruktur an)</p>

<pre>
&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;!DOCTYPE bestellungen SYSTEM "bestellungen.dtd"&gt;
&lt;bestellungen&gt;
  &lt;bestellung&gt;
    &lt;produkt&gt;
       &lt;warennummer&gt;39304&lt;/warennummer&gt;
       &lt;bezeichnung&gt;Bohrmaschine XPL75&lt;/bezeichnung&gt;
       &lt;hersteller&gt;Schniedelwutz &amp;amp; Söhne&lt;/hersteller&gt;
    &lt;/produkt&gt;
    &lt;besteller&gt;Raffmarkt, Niederlassung Hamburg&lt;/besteller&gt;
    &lt;anzahl&gt;100&lt;/anzahl&gt;
    &lt;preis&gt;45900,00&lt;/preis&gt;
  &lt;/bestellung&gt;
  &lt;bestellung&gt;
    &lt;produkt&gt;
       &lt;warennummer&gt;92842&lt;/warennummer&gt;
       &lt;bezeichnung&gt;Badehaube Paris&lt;/bezeichnung&gt;
       &lt;hersteller&gt;Etienne Monet&lt;/hersteller&gt;
    &lt;/produkt&gt;
    &lt;besteller&gt;Sandburg Bademoden, Berlin&lt;/besteller&gt;
    &lt;anzahl&gt;10&lt;/anzahl&gt;
    &lt;preis&gt;234,00&lt;/preis&gt;
  &lt;/bestellung&gt;
&lt;/bestellungen&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In einer Anwendungsdatei wird lediglich die <var>bestellungen.dtd</var> angegeben. Trotzdem ist auch die <var>produkt.dtd</var> relevant, da sie in die <var>bestellungen.dtd</var> eingebunden wurde. Denn an der Stelle, der <var>bestellungen.dtd</var>, an der dem Elementtyp <code>bestellung</code> der Elementinhalt <code>produkt</code> zugewiesen wird, ist ja die komplette Definition des Elementtyps <code>produkt</code> aus der <var>produkt.dtd</var> gemeint.</p>



<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" class="doc">
&nbsp;<a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a>
</td></tr>
<tr><td class="doc"><a href="notations.htm"><img src="../../src/next.gif" width="10" height="10" border="0" hspace="10" alt="weiter"></a></td>
<td width="100%"><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="notations.htm">Notationen für referenzierte Daten</a>
</td></tr>
<tr>
<td class="doc"><a href="attribute.htm"><img src="../../src/prev.gif" width="10" height="10" border="0" hspace="10" alt="zurück"></a></td>
<td><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="attribute.htm">Attribute und Wertzuweisungen</a>
</td>
</tr>
<tr><td colspan="2" class="doc">&nbsp;</td>
</tr>
<tr>
<td colspan="2" class="nav"><a class="an" name="bottom"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">XML/DTDs</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Dokumenttyp-Definitionen (DTDs)</a></td>
</tr>
</table>

<p>&copy; 2007 <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../editorial/impressum.htm">Impressum</a></p>

</body>
</html>
