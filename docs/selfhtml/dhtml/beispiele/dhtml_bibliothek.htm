<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>SELFHTML: Dynamisches HTML / Beispiele für die Praxis / Allgemeine DHTML-Bibliothek</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Wie Sie eine Funktionsbibliothek als externes JavaScript erstellen können, die DHTML erleichtert.">
<meta name="keywords"       content="SELFHTML, Dynamisches HTML, Dynamic HTML, DHTML, Document Object Model, DOM, Bibliotheksfunktionen, DHTML-Bibliothek">
<meta name="author"         content="Redaktion SELFHTML, selfhtml81@selfhtml.org">
<meta name="robots"         content="noindex, nofollow">
<meta name="DC.Publisher"   content="SELFHTML e. V.">
<meta name="DC.Date"        content="2005-09-20T06:08:05+02:00">
<meta name="DC.Identifier"  content="http://de.selfhtml.org/dhtml/beispiele/dhtml_bibliothek.htm">
<meta name="DC.Language"    content="de">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.created" content="2001-10-27T08:00+01:00">
<meta name="SELF.Pagetype"  content="page">
<link rel="alternate" type="application/atom+xml" title="SELFHTML-Weblog (Atom, gesamt)" href="http://aktuell.de.selfhtml.org/weblog/atom-feed">
<link rel="alternate" type="application/rss+xml" title="SELFHTML-Weblog (RSS, Auszüge)" href="http://aktuell.de.selfhtml.org/weblog/rss-feed">
<link rel="shortcut icon" type="image/x-icon" href="../../src/favicon.ico">
<link rel="author" title="Impressum" href="../../editorial/impressum.htm">
<link rel="contents" title="Inhaltsverzeichnis" href="../../navigation/inhalt.htm">
<link rel="index" title="Stichwortverzeichnis" href="../../navigation/stichwort.htm">
<link rel="search" title="Suche" href="../../navigation/suche/index.htm">
<link rel="help" title="Hilfe" href="../../editorial/index.htm">
<link rel="copyright" title="Urheberrecht" href="../../editorial/copyright.htm">
<link rel="top" title="SELFHTML" href="../../index.htm">
<link rel="up" title="Beispiele für die Praxis" href="index.htm">
<link rel="next" title="Dynamische Navigationsleiste" href="navigation.htm">
<link rel="prev" title="Dynamische Filter (nur Microsoft)" href="../modelle/dynamische_filter.htm">
<link rel="last" title="Bilderbuch zum Umblättern" href="bilderbuch.htm">
</head>
<body>

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td colspan="2" class="nav"><a class="an" name="top"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Dynamisches HTML</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Beispiele für die Praxis</a></td>
</tr>
<tr>
<td class="doc" width="110"><a href="../../index.htm"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></a></td>
<td class="docbot" width="100%"><h1 class="ph1">Allgemeine DHTML-Bibliothek</h1></td>
</tr>
<tr>
<td class="doctop">
<img src="../../src/dokx.gif" width="30" height="20" vspace="6" alt="Informationsseite">
</td>
<td valign="top" nowrap="nowrap">
<p>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#hinweise">Hinweise zu diesem Beispiel</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#quelltext">Quelltext mit Erläuterungen</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#test">Test der DHTML-Bibliothek</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#erweitern">DHTML-Bibliothek erweitern</a><br>
</p>
</td>
</tr><tr><td colspan="2" class="doc">&nbsp;<a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a>&nbsp;</td></tr>
</table>



<h2><a class="an" name="hinweise">Hinweise zu diesem Beispiel</a></h2>

<p>Angesichts der vielen verschiedenen DHTML-Modelle, die derzeit noch kursieren, ist es für Programmierer oft nicht einfach, sich die ganzen unterschiedlichen Befehle und Zugriffsmöglichkeiten zu merken. Außerdem werden Dateien bei größeren Scripts ganz schön stark aufgebläht, wenn man immer wieder die gleichen Browser-Abfragen und Konstrukte für den Elementzugriff notiert. Besser ist es deshalb, einmal eine Bibliothek an allgemein geschriebenen DHTML-Funktionen zu schreiben, diese in eine externe JavaScript-Datei auszulagern, und die JavaScript-Datei dann in denjenigen Dateien mit einzubinden, wo der Code der DHTML-Funktionen benötigt wird.</p>

<p>Das Beispiel auf dieser Seite stellt eine solche Bibliothek für DHTML-Funktionen vor. Die einzelnen Funktionen werden dabei auch genau erklärt. In den anderen Beispielen in diesem Kapitel kommt die hier erstellte Bibliothek dann zum praktischen Einsatz.</p>

<p>Selbstverständlich können Sie die Funktionsbibliothek für Ihre Zwecke beliebig erweitern. So ist es z.B. denkbar, allgemein geschriebene Funktionen zur CSS-Formatierung oder -Positionierung von Elementen hinzuzufügen. Der hier vorgestellte Grundstock an Funktionen soll vor allem den Zugriff auf Elemente erleichtern und Browser-Abfragen reduzieren.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js12.gif" width="30" height="30" alt="JavaScript 1.2" title="JavaScript 1.2"><img src="../../src/netsc4.gif" width="30" height="30" alt="Netscape 4.0" title="Netscape 4.0"><img src="../../src/msie4.gif" width="30" height="30" alt="MS IE 4.0" title="MS IE 4.0"><img src="../../src/op7.gif" width="30" height="30" alt="Opera 7" title="Opera 7"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="quelltext">Quelltext mit Erläuterungen</a></h2>

<p>Der folgende Quelltext zeigt die vollständige DHTML-Bibliothek. Kopieren Sie sich den vollständigen Quelltext und speichern Sie ihn in einer Textdatei mit dem Namen <var>dhtml.js</var>. Dann haben Sie die externe JavaScript-Datei mit den DHTML-Funktionen.</p>

<h3 class="xmp">Beispiel - Datei <var>dhtml.js</var>:</h3>

<pre>
/* DHTML-Bibliothek */

var DHTML = false, DOM = false, MSIE4 = false, NS4 = false, OP = false;

if (document.getElementById) {
  DHTML = true;
  DOM = true;
} else {
  if (document.all) {
    DHTML = true;
    MSIE4 = true;
  } else {
    if (document.layers) {
      DHTML = true;
      NS4 = true;
    }
  }
}
if (window.opera) {
  OP = true;
}

function getElement (Mode, Identifier, ElementNumber) {
  var Element, ElementList;
  if (DOM) {
    if (Mode.toLowerCase() == "id") {
      Element = document.getElementById(Identifier);
      if (!Element) {
        Element = false;
      }
      return Element;
    }
    if (Mode.toLowerCase() == "name") {
      ElementList = document.getElementsByName(Identifier);
      Element = ElementList[ElementNumber];
      if (!Element) {
        Element = false;
      }
      return Element;
    }
    if (Mode.toLowerCase() == "tagname") {
      ElementList = document.getElementsByTagName(Identifier);
      Element = ElementList[ElementNumber];
      if (!Element) {
        Element = false;
      }
      return Element;
    }
    return false;
  }
  if (MSIE4) {
    if (Mode.toLowerCase() == "id" || Mode.toLowerCase() == "name") {
      Element = document.all(Identifier);
      if (!Element) {
        Element = false;
      }
      return Element;
    }
    if (Mode.toLowerCase() == "tagname") {
      ElementList = document.all.tags(Identifier);
      Element = ElementList[ElementNumber];
      if (!Element) {
        Element = false;
      }
      return Element;
    }
    return false;
  }
  if (NS4) {
    if (Mode.toLowerCase() == "id" || Mode.toLowerCase() == "name") {
      Element = document[Identifier];
      if (!Element) {
        Element = document.anchors[Identifier];
      }
      if (!Element) {
        Element = false;
      }
      return Element;
    }
    if (Mode.toLowerCase() == "layerindex") {
      Element = document.layers[Identifier];
      if (!Element) {
        Element = false;
      }
      return Element;
    }
    return false;
  }
  return false;
}

function getAttribute (Mode, Identifier, ElementNumber, AttributeName) {
  var Attribute;
  var Element = getElement(Mode, Identifier, ElementNumber);
  if (!Element) {
    return false;
  }
  if (DOM || MSIE4) {
    Attribute = Element.getAttribute(AttributeName);
    return Attribute;
  }
  if (NS4) {
    Attribute = Element[AttributeName]
    if (!Attribute) {
       Attribute = false;
    }
    return Attribute;
  }
  return false;
}

function getContent (Mode, Identifier, ElementNumber) {
  var Content;
  var Element = getElement(Mode, Identifier, ElementNumber);
  if (!Element) {
    return false;
  }
  if (DOM &amp;&amp; Element.firstChild) {
    if (Element.firstChild.nodeType == 3) {
      Content = Element.firstChild.nodeValue;
    } else {
      Content = "";
    }
    return Content;
  }
  if (MSIE4) {
    Content = Element.innerText;
    return Content;
  }
  return false;
}

function setContent (Mode, Identifier, ElementNumber, Text) {
  var Element = getElement(Mode, Identifier, ElementNumber);
  if (!Element) {
    return false;
  }
  if (DOM &amp;&amp; Element.firstChild) {
    Element.firstChild.nodeValue = Text;
    return true;
  }
  if (MSIE4) {
    Element.innerText = Text;
    return true;
  }
  if (NS4) {
    Element.document.open();
    Element.document.write(Text);
    Element.document.close();
    return true;
  }
}
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Die externe JavaScript-Datei darf nichts anderes als JavaScript-Code enthalten, so wie im Beispiel gezeigt. Im Folgenden werden die globalen Variablen und die Funktionen beschrieben. Denn mit diesen Variablen und Funktionen können Sie arbeiten, wenn Sie die Bibliothek verwenden wollen.</p>

<p>In den globalen Variablen wird gespeichert, welche DHTML-Fähigkeiten der Browser unterstützt. Sie werden direkt am Anfang der Bibliothek automatisch mit ihren Werten versorgt und sollten anschließend nicht mehr geändert werden. Die Wirkungsweise der übrigen Funktionen ist davon abhängig, dass die globalen Variablen mit korrekten Werten versorgt sind.</p>

<p>Um in Erfahrung zu bringen, welches DHTML-Modell verwendet werden muss, wird <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../javascript/sprache/objekte.htm#existenzabfrage">abgefragt, ob bestimmte Objekte existieren</a>.<br>
Zum Testen auf DOM-Verfügbarkeit eignet sich die Frage, ob
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../javascript/objekte/document.htm#get_element_by_id">document.getElementById</a> existiert, denn das ist eine wichtige DOM-Methode, die in allen DOM-Implementierungen existieren sollte. Beachten Sie, dass manche Browser zwar <code>document.getElementById</code> kennen, aber andere Teile des umfangreichen DOM nicht unterstützen. Wenn Sie spezielle DOM-Techniken verwenden, sollten Sie jeweils im Einzelfall überprüfen, ob die benötigten Objekte zur Verfügung stehen.<br>
Zum Testen auf die ältere Microsoft- und Netscape-Syntax wird auf deren zentrale DHTML-Objekte hin abgefragt. Wenn <code>document.all</code> verfügbar ist, ist Syntax nach dem älteren Microsoft-Modell angesagt. Wenn <code>document.layers</code> verfügbar ist, Syntax nach dem älteren Netscape-Modell.<br>
Zum Schluss wird über <code>window.opera</code> abgefragt, ob es sich um einen Opera-Browser handelt. Dies ist zur Bestimmung des verwendeten DHTML-Modells nicht nötig, aber Opera bedarf an einigen Stellen der Funktionen der Bibliothek einer Sonderbehandlung.</p>

<h4>Globale Variable <code>DHTML</code>:</h4>

<p>Diese Variable speichert, ob Dynamisches HTML bei dem vom Anwender eingesetzten Browser verfügbar ist oder nicht. Wenn Dynamisches HTML nach irgendeinem der bekannten <img src="../../src/kap.gif" width="15" height="13" alt="Kapitel">&nbsp;<a href="../modelle/index.htm">DHTML-Modelle</a> verfügbar ist, dann erhält sie den Wert <code>true</code> (wahr), wenn nicht, dann den Wert <code>false</code> (unwahr). Mit der simplen Abfrage <code>if (DHTML)</code> können Sie dann im Verlauf eines eigenen Scripts überprüfen, ob überhaupt Dynamisches HTML möglich ist.</p>

<h4>Globale Variable <code>DOM</code>:</h4>

<p>Diese Variable speichert, ob Dynamisches HTML nach DOM-Syntax möglich ist oder nicht (Wert <code>true</code> oder Wert <code>false</code>). Mit <code>if (DOM)</code> können Sie abfragen, ob ein neuerer Browser am Werk ist, der das DOM in seiner JavaScript-Implementierung unterstützt.</p>

<h4>Globale Variable <code>MSIE4</code>:</h4>

<p>Wenn der Wert der Variable <code>MSIE4</code> gleich <code>true</code> ist, dann läuft Ihr Script mit auf einem Internet Explorer der 4er-Generation. Mit <code>if (MSIE4)</code> können Sie also in Ihrem Script abfragen, ob mit dem DHTML-Modell des Internet Explorer 4.x gearbeitet werden muss.</p>

<h4>Globale Variable <code>NS4</code>:</h4>

<p>Wenn diese Variable den Wert <code>true</code> besitzt, dann läuft Ihr Script mit auf einem Netscape-Browser der 4er-Generation. Wenn ein 6er-Netscape oder ein anderer Abkömmling des Mozilla-Browsers eingesetzt wird, ist stattdessen die Variable <code>DOM</code> gleich <code>true</code>, während <code>NS4</code> gleich <code>false</code> ist. Mit <code>if (NS4)</code> können Sie also in Ihrem Script abfragen, ob mit der DHTML-Syntax des alten 4er-Netscape gearbeitet werden muss.</p>

<h4>Globale Variable <code>OP</code>:</h4>

<p>Wenn die Variable <code>OP</code> den Wert <code>true</code> hat, dann läuft Ihr Script auf einem Opera-Browser. Mit <code>if (OP)</code> können Sie also in Ihrem Script abfragen, ob ein Opera-Browser am Werk ist. Handelt es sich um einen neueren Opera-Browser, ist in den Variablen <code>DOM</code> der Wert <code>true</code> gespeichert.</p>


<h4>Funktion <code>getElement()</code> - Elementobjekt ermitteln:</h4>

<p>Beispielaufrufe:</p>

<pre>Elementobjekt = getElement("id", "Hinweis");
Elementobjekt = getElement("name", "Eingabefeld", 0);
Elementobjekt = getElement("tagname", "p", 8);
if (NS4) Layerobjekt = getElement("layerindex", 2);
</pre>

<p>Diese Funktion ist eigentlich die zentrale Funktion der hier vorgestellten Bibliothek. Sie greift auf ein bestimmtes Element im Dokument zu und gibt das Objekt dieses Elements zurück. Das funktioniert mit DOM-fähigen Browsern ebenso wie mit dem älteren Internet Explorer 4.x und in eingeschränkter Form auch mit Netscape 4.x: Sie können in diesem Browser auf <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/layer/index.htm">Layer</a> und <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../modelle/netscape.htm#simulieren">simulierte Layer</a> über deren Namen, ID oder Indexnummer zugreifen sowie auf Grafiken, Links bzw. Anker, Java-Applets und Formulare über deren Namen.</p>

<p>In den meisten Fällen müssen Sie diese Funktion nicht selber aufrufen. Es handelt sich vielmehr um eine Basisfunktion, die von den übrigen Funktionen der Bibliothek benutzt wird. Dennoch gibt es auch Fälle, in denen ein Direktaufruf dieser Funktion einen Sinn hat. Die Funktion erwartet folgende Parameter:</p>

<p><strong><code>Mode</code></strong> ist die Art und Weise, wie auf ein Element zugegriffen werden soll. Es gibt vier erlaubte Werte für diesen Parameter: <code>"id"</code>, <code>"name"</code>, <code>"tagname"</code> und <code>"layerindex"</code>. Übergeben Sie <code>"id"</code>, wenn Sie auf ein Element zugreifen wollen, das ein <code>id</code>-Attribut hat, z.B. <code>&lt;div&nbsp;id="Bereich"&gt;</code>. Übergeben Sie <code>"name"</code>, wenn das Element, auf das Sie zugreifen wollen, kein <code>id</code>-Attribut, aber dafür ein <code>name</code>-Attribut hat, z.B. <code>&lt;a&nbsp;name="Anker"&gt;</code>. Übergeben Sie <code>"tagname"</code>, wenn das Element, auf das Sie zugreifen wollen, weder ein <code>id</code>- noch ein <code>name</code>-Attribut hat. Übergeben Sie <code>"layerindex"</code> nur dann, wenn es sich um Netscape-Layer handelt, die über das <code>layers</code>-Objekt mit Hilfe von Indexnummern angesprochen werden sollen.</p>

<p><strong><code>Identifier</code></strong> ist die nähere Angabe zu dem, was Sie bei <code>Mode</code> festgelegt haben: Wenn Sie bei <code>Mode</code> den Wert <code>"id"</code> übergeben, dann erwartet die Funktion bei <code>Identifier</code> den Wert des <code>id</code>-Attributs. Wenn Sie bei <code>Mode</code> den Wert <code>"name"</code> übergeben, dann erwartet <code>Identifier</code> den Wert des <code>name</code>-Attributs. Wenn Sie bei <code>Mode</code> den Wert <code>tagname</code> übergeben haben, dann erwartet <code>Identifier</code> den gewünschten Elementnamen, also z.B. <code>"h1"</code> oder <code>"div"</code>. Wenn Sie bei <code>Mode</code> den Wert <code>"layerindex"</code> übergeben haben, erwartet <code>Identifier</code> die Indexnummer für den gewünschten Netscape-Layer.</p>

<p><strong><code>ElementNumber</code></strong> wird nur dann benötigt, wenn bei <code>Mode</code> einer der beiden Werte <code>"name"</code> oder <code>"tagname"</code> angegeben wurde. In diesem Fall müssen Sie bei <code>ElementNumber</code> eine Indexnummer angeben, mit der Sie festlegen, das wievielte Element im Dokument mit dem entsprechenden Namen oder Elementnamen Sie meinen. Das erste Element hat die Indexnummer <code>0</code>, das zweite Nummer <code>1</code> usw.</p>

<p>Die Funktion <code>getElement()</code> geht der Reihe nach die möglichen DHTML-Modelle durch und fragt zuerst mit <code>if (DOM)</code> die globale Variable <code>DOM</code> daraufhin ab, ob DOM-Syntax verfügbar ist. Wenn ja, dann wird abhängig von den übergebenen Parametern das gewünschte Element nach DOM-Syntax ermittelt und zurückgegeben. Nur wenn keine DOM-Syntax verfügbar ist, wird versucht, die älteren DHTML-Modelle anzuwenden. Zunächst wird mit <code>if (MSIE4)</code> geprüft, ob das ältere DHTML-Modell von Microsoft verfügbar ist. Wenn ja, wird das Element nach dessen Syntax über das <code>document.all</code>-Objekt ermittelt. Wenn auch die Microsoft-Syntax nicht greift, bleibt noch die ältere Netscape-Syntax, die mit <code>if (NS4)</code> abgefragt wird. In diesem Fall wird aus den übergebenen Parametern der Zugriff auf ein Layer-Objekt konstruiert.</p>

<p>Gleichzeitig erfolgt in der Funktion eine Fehlerbehandlung. In jedem Zweig der Funktion wird jeweils geprüft, ob das gewünschte Element überhaupt existiert. Tritt dieser Fall ein, wird das Element zurückgegeben. Andernfalls wird <code>false</code> zurückgegeben.</p>

<h4>Funktion <code>getAttribute()</code> - Attributwert ermitteln:</h4>

<p>Beispielaufrufe:</p>

<pre>Attribut = getAttribute("name", "Bildname", 0, "height");
Attribut = getAttribute("id", "Bereich", null, "id");
if (!NS4) Attribut = getAttribute("name", "Anker", 0, "href");
</pre>

<p>Über diese Funktion, die ihrerseits auf die Funktion <code>getElement()</code> zurückgreift, können Sie auf bequeme Weise den Wert eines Attributs eines bestimmten Elements ermitteln - zumindest wenn das DOM-Modell oder das ältere Microsoft-Modell für DHTML verfügbar sind. Neben den drei bereits bekannten ersten Parametern erwartet diese Funktion einen vierten Parameter <code>AttributeName</code>. Bei diesem müssen Sie den Namen des gewünschten Attributs übergeben. Wenn Sie den dritten Parameter <code>ElementNumber</code> nicht angeben, notieren Sie an dessen Stelle das Schlüsselwort <code>null</code>.</p>

<p>Die Funktion <code>getAttribute()</code> benutzt die Objektmethoden <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../javascript/objekte/node.htm#get_attribute">getAttribute()</a>, die sowohl im DOM-Modell als auch im älteren Microsoft-Modell verfügbar sind. Bei Netscape 4 dagegen wird die gewünschte Eigenschaft direkt abgefragt.</p>

<p>Die Auswahl des richtigen Objekts übernimmt die Basisfunktion <code>getElement()</code>. Natürlich erfolgt auch in jedem Fall die Überprüfung, ob das gewünschte Objekt überhaupt existiert.</p>

<h4>Funktion <code>getContent()</code> - Elementinhalt ermitteln:</h4>

<p>Beispielaufrufe:</p>

<pre>if (!NS4) Elementinhalt = getContent("id", "Hinweis");
if (!NS4) Elementinhalt = getContent("name", "Verweis", 3);
if (!NS4) Elementinhalt = getContent("tagname", "p", 8);</pre>

<p>Über diese Funktion können Sie auf bequeme Weise den Inhalt eines Elements ermitteln - zumindest wenn das DOM-Modell oder das ältere Microsoft-Modell für DHTML verfügbar sind. <code>getContent()</code> bedient sich der Basisfunktion <code>getElement()</code> und reicht ihre drei übergebenen Parameter einfach an jene durch. Bei DOM-Syntax versucht sie, an den Textinhalt des Elements mit <code>firstChild.nodeValue</code> zu kommen, bei Microsoft-Syntax über die Eigenschaft <code>innerText</code> des <code>all</code>-Objekts.</p>

<p> Das ältere Netscape-Modell kennt kein Auslesen von Elementinhalten. In den Beispielaufrufen ist der Funktionsaufruf deshalb davon abhängig gemacht, dass nicht nach älterer Netscape-Syntax gearbeitet wird (<code>if (!NS4)</code>). Sie können diese Funktion zwar auch im Netscape 4 ausführen, sie wird aber immer <code>false</code> anstelle des gewüschten Elementinhalts zurückgeben.</p>

<p>Beachten Sie, dass die Funktion <code>getContent()</code> bei Verwendung des DOM-Modells eine leere Zeichenkette zurückliefert, wenn der erste Kindknoten des Elements kein Text ist, sondern ein weiteres Element. Wenn also beispielsweise notiert ist:<br>
<code>&lt;p id="Absatz"&gt;der Text&lt;/p&gt;</code><br>
Dann liefert der Funktionsaufruf <code>getContent("id", "Absatz")</code> den Wert <code>der Text</code> zurück. Wenn aber notiert ist:<br>
<code>&lt;p id="Absatz"&gt;&lt;b&gt;der Text&lt;/b&gt;&lt;/p&gt;</code><br>
Dann liefert der Funktionsaufruf bei Anwendung des DOM-Modells eine leere Zeichenkette zurück, da es keinen Text als Elementinhalt von <code>p</code> gibt, sondern der Inhalt ein anderes Element, nämlich ein <code>b</code>-Element ist.<br>
Die Parameter sind bei <code>getContent()</code> die gleichen wie bei <code>getElement()</code>. Nur der Wert <code>"layerindex"</code> beim Parameter <code>Mode</code> wird von dieser Funktion nicht verarbeitet, da sich dieser auf Netscape-spezifisches Verhalten bezieht.</p>

<p>Die Funktion <code>getContent()</code> kümmert sich auch um ältere Browser, die Inhalte nicht dynamisch lesen können, jedoch andere Teile der Bibliothek interpretieren. Bevor der Versuch unternommen wird, Inhalte zu lesen, fragt sie ab, ob das gewünschte Objekt existiert und ob auch das Objekt <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../javascript/objekte/node.htm#first_child">firstChild</a> vorhanden ist. Erst wenn diese Bedingung erfüllt ist, wird versucht den Inhalt zu lesen. Dadurch wird in jedem Fall eine Fehlermeldung vermieden.</p>

<h4>Funktion <code>setContent()</code> - Elementinhalt dynamisch ändern:</h4>

<p>Beispielaufrufe:<br>
<code>setContent("id", "Hinweis", null, "neuer Hinweistext");</code><br>
<code>setContent("name", "Verweis", 3, "neuer Verweistext");</code><br>
<code>setContent("tagname", "p", 8, "neuer Textinhalt des Elements");</code><br>
<code>if (NS4) setContent("layerindex", 2, null, "neuer Inhalt des Layers");</code></p>

<p>Mit dieser Funktion können Sie den Inhalt eines Elements dynamisch ändern. Die Funktion <code>setContent()</code> bedient sich für den Zugriff auf das gewünschte Element der Basisfunktion <code>getElement()</code>. Die ersten drei Parameter, die bei denen der übrigen Funktionen gleichen, werden dazu an <code>getElement()</code> weitergereicht. Als vierten Parameter <code>Text</code> erwartet die Funktion <code>setContent()</code> den gewünschten Textinhalt. Beachten Sie, dass dieser Text zumindest beim DOM-Modell und beim älteren Microsoft-Modell nur als reiner Text interpretiert wird. HTML-Formatierungen im Text werden dabei als Klartext interpretiert.<br>
Übergeben Sie bei Parametern, für die Sie keinen Wert angeben, das Schlüsselwort <code>null</code>.<br>
Bei Netscape-Layern benutzt die Funktion <code>setContent()</code> automatisch die üblichen Befehle zum Öffnen des Layer-Dokuments (<code>document.Layer.document.open()</code>), zum Schreiben (<code>document.Layer.document.write()</code>) und zum Schließen (<code>document.Layer.document.close()</code>).</p>

<p>Die Funktion <code>setContent()</code> kümmert sich auch um ältere Browser, die Inhalte noch nicht dynamisch ändern können, jedoch andere Teile der Bibliothek interpretieren. Bevor der Versuch unternommen wird, Inhalte zu ändern, fragt sie daher ab, ob das gewünschte Objekt existiert und ob auch das Objekt <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../javascript/objekte/node.htm#first_child">firstChild</a> existiert. Erst wenn diese Bedingung erfüllt ist, versucht sie den Inhalt zu ändern. Dadurch wird in jedem Fall eine Fehlermeldung vermieden.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js12.gif" width="30" height="30" alt="JavaScript 1.2" title="JavaScript 1.2"><img src="../../src/netsc4.gif" width="30" height="30" alt="Netscape 4.0" title="Netscape 4.0"><img src="../../src/msie4.gif" width="30" height="30" alt="MS IE 4.0" title="MS IE 4.0"><img src="../../src/op7.gif" width="30" height="30" alt="Opera 7" title="Opera 7"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="test">Test der DHTML-Bibliothek</a></h2>

<p>Das folgende Beispiel zeigt, wie Sie die DHTML-Bibliothek verwenden können. Die einzelnen Funktionen werden in dieser Beispieldatei mit konkreten Beispielen aufgerufen. Am besten können Sie die Funktionsweise testen, wenn Sie das Anzeigebeispiel mal mit verschiedenen Browsern aufrufen.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/dhtmltest.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type="text/javascript" src="dhtml.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
function Testen() {
  var Ausgabetext = "";
  if (DHTML) {
    Ausgabetext += "DHTML ist aktiviert!\n"
  } else {
    Ausgabetext += "DHTML ist nicht aktiviert!\n";
  }
  if (DOM) {
    Ausgabetext += "DOM wird unterstützt!\n";
  } else {
    Ausgabetext += "DOM wird nicht unterstützt!\n";
  }
  if (MSIE4)
    Ausgabetext += "Alte Microsoft-Technologie ohne DOM!\n";
  if (NS4)
    Ausgabetext += "Alte Netscape-Technologie ohne DOM!\n";

  var h1_Inhalt = getContent("tagname", "h1", 0);
  if (h1_Inhalt) {
    Ausgabetext += "Inhalt des h1-Elements: " + h1_Inhalt + "\n";
  } else {
    Ausgabetext += "Inhalt des h1-Elements konnte nicht ermittelt werden!\n";
  }

  var p_Inhalt = getContent("id", "Hinweisabsatz");
  if (p_Inhalt) {
    Ausgabetext += "Inhalt des p-Elements: " + p_Inhalt + "\n";
  } else {
    Ausgabetext += "Inhalt des p-Elements konnte nicht ermittelt werden!\n";
  }

  var Verweis = getContent("name", "Anker", 0);
  if (Verweis) {
    Ausgabetext += "Verweistext: " + Verweis + "\n";
  } else {
    Ausgabetext += "Verweistext konnte nicht ermittelt werden!\n";
  }

  var h1_align = getAttribute("tagname", "h1", 0, "align");
  if (h1_align) {
    Ausgabetext += "Ausrichtung des h1-Elements: " + h1_align + "\n";
  } else {
    Ausgabetext += "Ausrichtung des h1-Elements konnte nicht ermittelt werden!\n";
  }

  var Bild_Hoehe= getAttribute("name", "auge", 0, "height");
  if (Bild_Hoehe) {
    Ausgabetext += "Bildhöhe: " + Bild_Hoehe + " Pixel\n";
  } else {
    Ausgabetext += "Die Bildhöhe konnte nicht ermittelt werden!\n";
  }

  var Bereich_id = getAttribute("id", "Bereich", null, "id");
  if (Bereich_id) {
    Ausgabetext += "id-Name des Bereichs: " + Bereich_id + "\n";
  } else {
    Ausgabetext += "id-Name des Bereichs konnte nicht ermittelt werden!\n";
  }

  setContent("id", "Bereich", null, "Tests sind fertig!");

  alert(Ausgabetext);
}
&lt;/script&gt;
&lt;style type="text/css"&gt;
#Bereich { position:absolute; top:200px; left:10px; width:500px; height:100px; }
&lt;/style&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1 align="left"&gt;Test der dhtml.js&lt;/h1&gt;
&lt;hr noshade="noshade" size="1"&gt;
&lt;p id="Hinweisabsatz"&gt;Die Tests testen die Funktionen der DHTML-Bibliothek&lt;/p&gt;
&lt;p&gt;&lt;img name="auge" src="../../../src/auge.gif" width="24" height="16" border="0" alt="Testbild"&gt;
&lt;a name="Anker" href="javascript:Testen()"&gt;Test starten&lt;/a&gt;&lt;/p&gt;
&lt;div id="Bereich"&gt;&amp;nbsp;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel enthält im sichtbaren Bereich der HTML-Datei eine Überschrift erster Ordnung, einen Textabsatz, einen weiteren Textabsatz mit einem Verweis, vor dem außerdem eine Grafik eingebunden ist, und schließlich einen <code>div</code>-Bereich, der mit Hilfe von CSS absolut positioniert ist. Die entsprechenden CSS-Angaben zur Positionierung stehen im Dateikopf in einem <code>style</code>-Bereich, wo die Formate für <code>#Bereich</code> notiert sind. Generell ist es wegen einiger Schwächen von Netscape 4.x besser, die CSS-Formatierungen der <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../modelle/netscape.htm#simulieren">simulierten Layer</a> in einem zentralen Stylesheet gleich im Dateikopf zu notieren und nicht im einleitenden <code>&lt;div&gt;</code>-Tag.</p>

<p>Im Dateikopf sind ferner zwei JavaScript-Bereiche definiert. Der erste ist leer und bindet lediglich die DHTML-Bibliothek ein, die in der externen JavaScript-Datei <code>dhtml.js</code> gespeichert ist. Der zweite Script-Bereich enthält den JavaScript-Code, der die Testaufrufe durchführt.</p>

<p>Das JavaScript innerhalb des Dateikopfes wird aufgerufen, wenn der Anwender auf den Verweis klickt, der in der Datei notiert ist. Dann wird die Funktion <code>Testen()</code> aufgerufen. Diese Funktion wie auch das gesamte JavaScript kann ohne weitere Umwege auf alle globalen Variablen und die Funktionen der DHTML-Bibliothek zugreifen.</p>

<p>Zunächst greift die Funktion <code>Testen()</code> auf die initialisierten globalen Variablen der DHTML-Bibliothek zu und prüft, welches DHTML-Modell verfügbar ist. Abhängig davon, was verfügbar ist, wird die Variable <code>Ausgabetext</code> um einen Text erweitert.</p>

<p>Als nächstes wird mit der Funktion <code>getContent()</code> aus der DHTML-Bibliothek gespielt.<br>
Mit <code>getContent("tagname", "h1", 0)</code> wird via Elementname auf das erste <code>h1</code>-Element (Indexzähler 0) zugegriffen. Der Rückgabewert von <code>getContent()</code> wird in der Variablen <code>h1_Inhalt</code> gespeichert. Abhängig davon, ob diese nach dem Funktionsaufruf eine Zeichenkette mit einer Länge größer 0 enthält (<code>if (h1_Inhalt)</code>), wird die Variable <code>Ausgabetext</code> wieder um einen weiteren Text erweitert.</p>

<p>Zwei weitere Aufrufe von <code>getContent()</code> folgen, die andere Varianten der Parameterversorgung ausprobieren.<br>
Mit <code>getContent("id", "Hinweisabsatz")</code> wird auf das Element mit dem Attribut <code>id="Hinweisabsatz"</code> zugegriffen.<br>
Mit <code>getContent("name", "Anker", 0)</code> wird auf das erste Element im Dokument zugegriffen, bei dem das Attribut <code>name="Anker"</code> notiert ist.</p>

<p>Daran anschließend probiert die Funktion <code>Testen()</code> die Bibliotheksfunktion <code>getAttribute()</code> mit drei Aufrufen aus, einmal über den Elementnamen, einmal über den Tagnamen und einmal über das <code>id</code>-Attribut.</p>

<p>Schließlich wird auch noch <code>setContent()</code> aufgerufen. Damit es in allen Browsern inklusive Netscape 4.x funktioniert, wird der Inhalt des absolut positionierten <code>div</code>-Bereichs neu gesetzt, den Netscape als Layer erkennt.</p>

<p>Am Ende gibt die Funktion <code>Testen()</code> die gesammelten Einzelergebnisse, die sie in der Variablen <code>Ausgabetext</code> zusammengetragen hat, in einem Meldungsfenster aus.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Die DHTML-Bibliothek deckt der Einfachheit halber nicht alle Zugriffsmöglichkeiten ab, die Netscape 4 bietet. Obwohl die Funktion <code>getContent()</code> im Netscape 4 beim Auslesen des Verweistextes scheitert, ist das Auslesen über <code>document.anchors.Anker.text</code> möglich. Auch das Ansprechen von gewissen Elementen - den besagten Grafiken, Java-Applets und Formularen - über deren Indexnummer ist über die DHTML-Bibliothek nur durch umständlich möglich. Wenn Sie ein Element über dessen Tag-Namen ansprechen wollen, können Sie für neuere Browser beim Parameter <code>Mode</code> den Wert <code>"tagname"</code> wählen. Im Netscape 4 können Sie stattdessen die Objekte <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../javascript/objekte/links.htm">document.links</a> bzw. <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../javascript/objekte/anchors.htm">document.anchors</a> für <code>a</code>-Elemente, <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../javascript/objekte/applets.htm">document.applets</a> für <code>applet</code>-Elemente, <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../javascript/objekte/forms.htm">document.forms</a> für <code>form</code>-Elemente und <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../javascript/objekte/images.htm">document.images</a> für <code>img</code>-Elemente verwenden.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="erweitern">DHTML-Bibliothek erweitern</a></h2>

<p>Die hier vorgestellte DHTML-Bibliothek leistet nur einige wenige Grundfunktionen, erleichtert den Zugriff auf Elemente etwas und macht in vielen Fällen den JavaScript-Code etwas übersichtlicher und besser lesbar. Es gibt aber noch vieles, was sie nicht leistet. Wenn Sie häufig mit Dynamischem HTML arbeiten, empfiehlt es sich, wenn Sie die DHTML-Bibliothek um eigene, andere Funktionen erweitern. Wichtig ist bei so einer Funktionsbibliothek, dass alle Funktionen allgemein geschrieben sind. Deshalb erwarten die Funktionen in der Regel mehrere Parameter, um ihren Input für die zu verarbeitenden Daten zu erhalten.</p>

<p>Denkbar wären beispielsweise noch Funktionen, die direkt auf CSS-Eigenschaften von Elementen zugreifen, oder Funktionen, die in der Lage sind, ein Element dynamisch neu zu positionieren. Ausgehend davon sind auch Funktionen möglich, die bestimmte Bewegungsabläufe wie Kreisbahnen usw. berechnen und Elemente entsprechend positionieren. Andere denkbare Funktionen könnten sich dem leider noch ziemlich komplizierten, weil sehr unterschiedlich implementierten Event-Handling widmen und dort einiges vereinfachen.</p>

<p>Eine Funktionsbibliothek sollte andererseits jedoch nicht zu groß werden. Denn wenn Sie am Ende zig Kilobyte externes JavaScript einbinden, um drei triviale Anweisungen zu notieren, dann ist eine Funktionsbibliothek nicht angemessen. In solchen Fällen ist es besser, die paar Befehle ohne Zuhilfenahme einer Funktionsbibliothek zu notieren.</p>

<p>Achten Sie stets darauf, dass Ihre Bibliotheken eine Fehlerhandlung durchführen und jeweils die Verfügbarkeit der angesprochenen Objekte überprüft.</p>



<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" class="doc">
&nbsp;<a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a>
</td></tr>
<tr><td class="doc"><a href="navigation.htm"><img src="../../src/next.gif" width="10" height="10" border="0" hspace="10" alt="weiter"></a></td>
<td width="100%"><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="navigation.htm">Dynamische Navigationsleiste</a>
</td></tr>
<tr>
<td class="doc"><a href="../modelle/dynamische_filter.htm"><img src="../../src/prev.gif" width="10" height="10" border="0" hspace="10" alt="zurück"></a></td>
<td><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../modelle/dynamische_filter.htm">Dynamische Filter (nur Microsoft)</a>
</td>
</tr>
<tr><td colspan="2" class="doc">&nbsp;</td>
</tr>
<tr>
<td colspan="2" class="nav"><a class="an" name="bottom"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Dynamisches HTML</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Beispiele für die Praxis</a></td>
</tr>
</table>

<p>&copy; 2007 <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../editorial/impressum.htm">Impressum</a></p>

</body>
</html>
