<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>SELFHTML: JavaScript / Objektreferenz / document</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Welche Aufgaben, Eigenschaften und Methoden das window-Objekt in JavaScript hat.">
<meta name="keywords"       content="SELFHTML, JavaScript, Objekte, document, alinkColor, bgColor, charset, cookie, defaultCharset, domain, fgColor, lastModified, linkColor, referrer, title, URL, vlinkColor, captureEvents, close, getElementById, getElementsByName, getSelection, handleEvent, open, releaseEvents, routeEvent, write, writeln">
<meta name="author"         content="Redaktion SELFHTML, selfhtml81@selfhtml.org">
<meta name="robots"         content="noindex, nofollow">
<meta name="DC.Publisher"   content="SELFHTML e. V.">
<meta name="DC.Date"        content="2005-11-16T01:48:05+01:00">
<meta name="DC.Identifier"  content="http://de.selfhtml.org/javascript/objekte/document.htm">
<meta name="DC.Language"    content="de">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.created" content="2001-10-27T08:00+01:00">
<meta name="SELF.Pagetype"  content="page">
<link rel="alternate" type="application/atom+xml" title="SELFHTML-Weblog (Atom, gesamt)" href="http://aktuell.de.selfhtml.org/weblog/atom-feed">
<link rel="alternate" type="application/rss+xml" title="SELFHTML-Weblog (RSS, Auszüge)" href="http://aktuell.de.selfhtml.org/weblog/rss-feed">
<link rel="shortcut icon" type="image/x-icon" href="../../src/favicon.ico">
<link rel="author" title="Impressum" href="../../editorial/impressum.htm">
<link rel="contents" title="Inhaltsverzeichnis" href="../../navigation/inhalt.htm">
<link rel="index" title="Stichwortverzeichnis" href="../../navigation/stichwort.htm">
<link rel="search" title="Suche" href="../../navigation/suche/index.htm">
<link rel="help" title="Hilfe" href="../../editorial/index.htm">
<link rel="copyright" title="Urheberrecht" href="../../editorial/copyright.htm">
<link rel="top" title="SELFHTML" href="../../index.htm">
<link rel="up" title="Objektreferenz" href="index.htm">
<link rel="next" title="HTML-Elementobjekte" href="htmlelemente.htm">
<link rel="prev" title="frames" href="frames.htm">
<link rel="first" title="Hinweise zur JavaScript-Objektreferenz" href="hinweise.htm">
<link rel="last" title="Objektunabhängige Funktionen" href="unabhaengig.htm">
</head>
<body>

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td colspan="2" class="nav"><a class="an" name="top"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">JavaScript/DOM</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Objektreferenz</a></td>
</tr>
<tr>
<td class="doc" width="110"><a href="../../index.htm"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></a></td>
<td class="docbot" width="100%"><h1 class="ph1">document</h1></td>
</tr>
<tr>
<td class="doctop">
<img src="../../src/dokx.gif" width="30" height="20" vspace="6" alt="Informationsseite">
</td>
<td valign="top" nowrap="nowrap">
<p><img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#allgemeines">document: Allgemeines zur Verwendung</a> </p>

<h3>Eigenschaften:</h3>

<p>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#alink_color">alinkColor</a> (Farbe für Verweise beim Anklicken)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#bg_color">bgColor</a> (Hintergrundfarbe)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#charset">charset</a> (verwendete Zeichenkodierung)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#cookie">cookie</a> (beim Anwender speicherbare Zeichenkette)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#default_charset">defaultCharset</a> (voreingestellte Zeichenkodierung)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#fg_color">fgColor</a> (Farbe für Text)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#last_modified">lastModified</a> (letzte Änderung am Dokument)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#link_color">linkColor</a> (Farbe für Verweise)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#referrer">referrer</a> (zuvor besuchte Seite)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#title">title</a> (Titel der Datei)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#url">URL</a> (URL-Adresse der Datei)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#vlink_color">vlinkColor</a> (Farbe für Verweise zu besuchten Zielen)
</p>

<h3>Methoden:</h3>

<p><img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#capture_events">captureEvents()</a> (Ereignisse überwachen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#close">close()</a> (schließen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#create_attribute">createAttribute()</a> (Attributknoten erzeugen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#create_element">createElement()</a> (Elementknoten erzeugen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#create_text_node">createTextNode()</a> (Textknoten erzeugen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#get_element_by_id">getElementById()</a> (HTML-Elementzugriff über id-Attribut)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#get_elements_by_name">getElementsByName()</a> (HTML-Elementzugriff über name-Attribut)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#get_elements_by_tag_name">getElementsByTagName()</a> (HTML-Elementzugriff über Elementliste)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#get_selection">getSelection()</a> (selektierter Text)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#handle_event">handleEvent()</a> (Ereignisse verarbeiten)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#open">open()</a> (Dokument öffnen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#release_events">releaseEvents()</a> (Ereignisse abschließen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#route_event">routeEvent()</a> (Event-Handler-Hierarchie durchlaufen)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#write">write()</a> (ins Dokumentfenster schreiben)<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#writeln">writeln()</a> (zeilenweise schreiben)</p>

<h3>Unterobjekte:</h3>

<p>
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="htmlelemente.htm">HTML-Elemente</a><br>
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="node.htm">node</a><br>
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="all.htm">all</a><br>
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="anchors.htm">anchors</a><br>
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="applets.htm">applets</a><br>
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="forms.htm">forms</a><br>
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="images.htm">images</a><br>
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="layers.htm">layers</a><br>
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="links.htm">links</a></p>
</td>
</tr><tr><td colspan="2" class="doc">&nbsp;<a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a>&nbsp;</td></tr>
</table>



<h2><a class="an" name="allgemeines">document: Allgemeines zur Verwendung</a></h2>

<p>Das <code>document</code>-Objekt bezieht sich auf den Inhalt, der in einem Browser-Fenster angezeigt wird. In der Objekthierarchie von JavaScript liegt es unterhalb des <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm">window</a>-Objekts.<br>
Im Document Object Model (DOM) des W3-Konsortiums ist das <code>document</code>-Objekt das Ausgangsobjekt für den Elementenbaum. Die Elemente eines HTML-Dokuments stellen dem DOM zufolge also Unterobjekte des <code>document</code>-Objekts dar. Die einzelnen HTML-Elemente können dabei eigene Eigenschaften und Methoden haben. Diese werden im Abschnitt über <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="htmlelemente.htm">HTML-Elementobjekte</a> beschrieben. Entscheidend für den Zugriff auf den HTML-Elementenbaum sind beim <code>document</code>-Objekt die DOM-Methoden <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#get_element_by_id">getElementById</a> und <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#get_elements_by_name">getElementsByName</a>.<br>
Darüber hinaus enthält das <code>document</code>-Objekt selber eine Reihe wichtiger Eigenschaften und Methoden, die dokumentglobale Eigenschaften speichern oder Funktionen ausführen. Die meisten davon werden auch vom DOM unterstützt. Das Ansprechen dieser Eigenschaften und Methoden funktioniert wie folgt:</p>

<h3 class="xmp">Beispiele:</h3>

<pre>
x = document.title;
x = window.document.title;

Zweitfenster = window.open("datei2.htm", "Fenster");
x = Zweitfenster.document.title;

y = parent.frames[2].document.bgColor;

document.write("Hallo Welt");
window.document.write("Hallo Welt");

Zweitfenster.document.close();
parent.frames[2].document.close();
</pre>

<h3 class="xpl">Erläuterung:</h3>
<p>Eigenschaften des document-Objekts, wie etwa der Titel der angezeigten HTML-Datei (<code>&lt;title&gt;</code>...<code>&lt;/title&gt;</code>), können Sie mit <code>document</code> ansprechen, den Titel der Datei also <code>document.title</code>. Entsprechend werden Methoden des document-Objekts angesprochen, zum Beispiel die write-Methode mit <code>document.write()</code>. Sie können auch <code>window.document.title</code> oder <code>window.document.write()</code> notieren. Da es sich dabei aber um den Inhalt des aktuellen Fensters handelt, ist die Angabe des Fensterobjekts nicht zwingend erforderlich. Anders beim Zugriff auf andere Fenster oder Frame-Fenster. In diesen Fällen müssen Sie das Fenster korrekt adressieren. Lesen Sie für zusätzliche Fenster den Abschnitt zur <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm#allgemeines">Verwendung des window-Objekts</a> und für Frame-Fenster den Abschnitt über die <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="frames.htm#allgemeines">Verwendung des frames-Objekts</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op8.gif" width="30" height="30" alt="Opera 8" title="Opera 8"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0"><img src="../../src/jswrite.gif" width="60" height="30" alt="Lesen/Ändern">&nbsp;<a class="an" name="alink_color">alinkColor</a></h2>

<p>Speichert die Farbe für Verweise, während sie aktiviert sind, wie beim Attribut <code>alink</code> im <code>&lt;body&gt;</code>-Tag oder vom Anwender in seinen Browser-Einstellungen festlegbar ist (siehe auch <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/dateiweit/farben.htm">Farben für Hintergrund, Text und Verweise</a>).</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_alink_color.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type="text/javascript"&gt;
var i = 0;
function AndereFarbe () {
  if (i == 0) {
    document.alinkColor = "#000000";
  } else if (i == 1) {
    document.alinkColor = "#FF0000";
  } else if (i == 2) {
    document.alinkColor = "#0000FF";
  } else if (i == 3) {
    document.alinkColor = "green";
  }
  i = i + 1;
  if (i &gt; 3)
    i = 0;
}
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;a href="javascript:AndereFarbe()"&gt;Verweisfarbe&lt;/a&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ruft beim Aktivieren des Verweises eine Funktion namens <code>AndereFarbe()</code> auf. Diese Funktion ändert bei jedem ihrer Aufrufe den Wert für <code>document.alinkColor</code>. Beachten Sie, dass Farben dabei entweder hexadezimal notiert werden oder in Form erlaubter Farbnamen (siehe auch <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/allgemein/farben.htm">Farben definieren in HTML</a>). Der Wert muss in jedem Fall in Anführungszeichen stehen.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Diese klassische, im herkömmlichen JavaScript gültige Implementierung von <code>alinkColor</code> als direkte Eigenschaft des <code>document</code>-Objekts wird vom HTML-spezifischen DOM missbilligt. Laut DOM besitzt das HTML-Elementobjekt <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="htmlelemente.htm#body">body</a> eine Eigenschaft namens <code>aLink</code> in Entsprechung zum
Attribut <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/dateiweit/farben.htm#text_verweise">alink</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op7.gif" width="30" height="30" alt="Opera 7" title="Opera 7"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0"><img src="../../src/jswrite.gif" width="60" height="30" alt="Lesen/Ändern">&nbsp;<a class="an" name="bg_color">bgColor</a></h2>

<p>Speichert die Hintergrundfarbe der HTML-Datei, wie sie beim Attribut  <code>bgcolor</code> im <code>&lt;body&gt;</code>-Tag oder vom Anwender in seinen Browser-Einstellungen festlegbar ist. (siehe auch <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/dateiweit/farben.htm">Farben für Hintergrund, Text und Verweise</a>).</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_bg_color.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type="text/javascript"&gt;
var X = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F");
var x1 = 0, x2 = 0;
var i = 0;
function setColor () {
  document.bgColor = "#" + X[x1] + X[x2] + X[x1] + X[x2] + X[x1] + X[x2];
  x2 = x2 + 1;
  if (x2 % 16 == 0) {
    x2 = 0;
    x1 = x1 + 1;
  }
  i++;
  if (i &lt; 256)
    window.setTimeout("setColor()", 10);
}
&lt;/script&gt;
&lt;/head&gt;&lt;body bgcolor="#000000"&gt;
&lt;p&gt;&lt;a href="javascript:setColor()"&gt;Hintergrund &amp;auml;ndern&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>
<p>Das Beispiel blendet beim Einlesen die Hintergrundfarbe von Schwarz über Graustufen nach Weiß auf. Dazu wird ein <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="array.htm">Array</a> <code>X</code> definiert, in dem die Hexadezimalziffern 0 bis 9 und A bis F gespeichert werden.
Im Seitenkörper wird ein Verweis notiert, bei dessen Aktivierung die Funktion <code>setColor()</code> ausgeführt wird. Innerhalb dieser Funktion wird der Eigenschaft <code>document.bgColor</code> jeweils ein neuer Wert zugewiesen. Dabei wird aus den zuvor definierten Ziffern der Arrays <code>X</code> eine gültige Farbangabe konstruiert. Am Ende der Funktion ruft sich die Funktion über <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm#set_timeout">window.setTimeout()</a> mit einer Zeitverzögerung von 10 Millisekunden selbst auf. Somit wird die Funktion 256 mal ausgeführt, bis die Hintergrundfarbe Weiß ist.</p>

<p>Beachten Sie, dass Farben entweder hexadezimal notiert werden, oder in Form erlaubter Farbnamen (siehe auch <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/allgemein/farben.htm">Farben definieren in HTML</a>). Der Wert muss in jedem Fall in Anführungszeichen stehen. Im obigen Beispiel fehlen die Anführungszeichen, weil es sich um eine Zeichenkette handelt, die dynamisch konstruiert wird. Fixe Angaben wären beispielsweise <code>"#0099CC"</code> oder <code>"blue"</code>.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Diese klassische, im herkömmlichen JavaScript gültige Implementierung von <code>bgColor</code> als direkte Eigenschaft des <code>document</code>-Objekts wird vom HTML-spezifischen DOM missbilligt. Laut DOM besitzt das HTML-Elementobjekt <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="htmlelemente.htm#body">body</a> eine Eigenschaft namens <code>bgColor</code> in Entsprechung zum
Attribut <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/dateiweit/farben.htm#hintergrund">bgColor</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/msjs.gif" width="30" height="30" alt="MS JScript" title="MS JScript"><img src="../../src/msie4.gif" width="30" height="30" alt="MS IE 4.0" title="MS IE 4.0"><img src="../../src/jswrite.gif" width="60" height="30" alt="Lesen/Ändern">&nbsp;<a class="an" name="charset">charset</a></h2>

<p>Speichert die verwendete Zeichenkodierung eines Dokuments.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_charset.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;meta http-equiv="content-type" content="text/html; charset=ISO-8859-1"&gt;
&lt;script type="text/javascript"&gt;
function iso5 () {
  document.charset = "ISO-8859-5";
  document.open();
  document.write("Text mit ä ö ü");
  document.close();
}
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;a href="javascript:iso5()"&gt;iso-8859-5&lt;/a&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>
<p>Das Beispiel enthält im Dateikopf eine <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/kopfdaten/meta.htm#zeichenkodierung">Angabe zur verwendeten Zeichenkodierung</a> des Dokuments. Dort wird <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../inter/zeichenkodierungen.htm#iso8859">ISO-8859-1</a> angegeben, die verbreitete Kodierung für westliche Sprachen, inklusive der deutschen. Ferner enthält die Datei einen Verweis. Beim Anklicken wird die Funktion <code>iso5()</code> aufgerufen. Diese Funktion ändert die verwendete Kodierung auf ISO-8859-5 (Kyrillisch). Anschließend werden dynamisch Inhalte in das Dokumentfenster geschrieben. Der Internet Explorer schreibt den angegebenen Text in das Dokumentfenster, schaltet dabei jedoch auf eine spezielle Unicode-Schriftart zur Darstellung um.<br>
Beachten Sie, dass zum Schreiben des neuen Inhalts die Methoden <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#open">open()</a> und <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#close">close()</a> verwendet werden.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Der Internet Explorer akzeptiert die geänderte Kodierung oft erst nach dem Reload der Seite und einer erneuten Ausführung der Änderung.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf13.gif" width="30" height="30" alt="Safari 1.3" title="Safari 1.3"><img src="../../src/jswrite.gif" width="60" height="30" alt="Lesen/Ändern">&nbsp;<a class="an" name="cookie">cookie</a></h2>

<p>Cookies (<i>cookies = Kekse - die Herkunft des Namens ist unbekannt</i>) bieten Ihnen die Möglichkeit, direkt aus einer HTML-Datei heraus Daten auf dem Rechner des Anwenders zu speichern und beim erneuten Aufruf der gleichen HTML-Datei wieder auszulesen. So kann eine WWW-Seite dynamisch auf gespeicherte Daten reagieren. Es ist nur möglich, diejenigen Cookies auszulesen, die man selbst gesetzt hat. Eine Virenübertragung mit Cookies ist ausgeschlossen. Ein Cookie ist in etwa das gleiche wie ein Eintrag in einer INI-Datei unter Microsoft Windows. Es wird eine Variable mit einem zugewiesenen Wert abgespeichert, zum Beispiel Datum und Uhrzeit des letzten Besuchs der Web-Seite. Es können keine Rechnerdaten des Anwenders ausgelesen werden. Angesichts des vorherrschenden Misstrauens bei Anwendern, die nicht wissen, was ein Cookie ist, sollten Sie Cookies nur verwenden, wenn Sie einen Grund dazu haben.</p>

<p>Netscape verwaltet Cookies in einer Datei namens <var>cookies.txt</var> auf dem Rechner des Anwenders. Der Internet Explorer verwaltet die Cookies in einem Unterverzeichnis des Windows-Verzeichnisses.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_cookie.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type="text/javascript"&gt;
var gespeichert = "nichts gespeichert";
if (document.cookie) {
  gespeichert = document.cookie;
} else {
  document.cookie = "Zeitstempel=" + document.lastModified;
}
alert(document.lastModified + " - " + gespeichert);
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>
<p>Das Lesen eines Cookies funktioniert nach dem Schema <code>x = document.cookie</code>.<br>
Das Schreiben eines Cookies funktioniert nach dem Schema <code>document.cookie = x</code>.</p>

<p>Das Beispiel fragt beim Einlesen der Datei ab, ob diese Datei schon einmal einen Cookie gesetzt hat. Eine solche Abfrage ist mit <code>if(document.cookie)</code> möglich. Im Beispiel wird die Variable <code>gespeichert</code> mit dem Wert des gespeicherten Cookies versorgt, falls ein Cookie vorhanden ist. Im <code>else</code>-Zweig des Beispiels steht der Fall, dass noch kein Cookie gesetzt wurde. In diesem Fall wird als Cookie die Zeichenkette <code>Zeitstempel</code> und dahinter der Wert von <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#last_modified">lastModified</a> geschrieben. Am Ende werden mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm#alert">alert()</a> zwei Werte ausgegeben: nämlich der Wert von <code>document.lastModified</code> und der Wert der Variablen <code>gespeichert</code>. Wenn ein Cookie gesetzt ist (also ab dem zweiten Aufruf der Datei), wird der Inhalt des Cookies ausgegeben, der sich von <code>document.lastModified</code> dann unterscheidet, wenn die Datei mittlerweile geändert wurde.</p>

<p>Beim Setzen eines Cookies können Sie außerdem einen Verfallszeitpunkt angeben. Wenn der Verfallszeitpunkt erreicht ist, löscht der Browser den Cookie selbständig. Notieren Sie dazu eine Anweisung der Form:<br>
<code>document.cookie = "expires=" + Verfallsdatum</code>.<br>
Damit der Browser diese Eigenschaft interpretiert, muss das Verfallsdatum mit der Methode <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="date.htm#to_gmt_string">toGMTString()</a> des Date-Objektes formatiert werden.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_cookie_verfall.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type="text/javascript"&gt;
var ablauf = new Date();
var infuenfTagen = ablauf.getTime() + (5 * 24 * 60 * 60 * 1000);
ablauf.setTime(infuenfTagen);
document.cookie = "Name=SELFHTML; expires=" + ablauf.toGMTString();
alert(document.cookie);
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In der Variablen <code>ablauf</code> wird eine neue Instanz des <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="date.htm#allgemeines">Date</a>-Objekt angelegt. Diese enthält das aktuelle Datum. Das Verfallsdatum ist 5 Tage nach dem Setzen des Cookies. Zur Bestimmung des Verfallsdatums wird das aktuelle Datum mit der Methode <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="date.htm#get_time">getTime()</a> in Millisekunden umgewandelt. Zu diesem Wert wird die Anzahl der Millisekunden für 5 Tage addiert. Um den Millisekundenwert zu ermitteln, können Sie wie im Beispiel eine Multiplikationskette übergeben: 1000 Millisekunden sind eine Sekunde, mal 60 macht eine Minute, mal 60 macht eine Stunde, mal 24 ein Tag, und mal 5 macht fünf Tage.<br>
Um eine gültige Datumszeichenkette zu erhalten, wird mit der Methode
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="date.htm#set_time">setTime()</a> dem Datum ein neuer Wert zugewiesen. In der Variablen <code>ablauf</code> ist dann das korrekte Ablaufdatum gespeichert.<br>
Dem Cookie wird schließlich das mit der Methode <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="date.htm#to_gmt_string">toGMTString()</a> formatierte Datum übergeben.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Jede HTML-Datei hat Kenntnis von allen Cookies, die von Dateien aus dem gleichen oder einem höheren Verzeichnis gesetzt wurden. Angenommen, bei einer Domain <var>http://www.test.de</var> mit dem Unterverzeichnis <var>/A</var> gibt es in diesem Unterverzeichnis sowie im Wurzelverzeichnis <var>/</var> jeweils eine Datei namens <var>x.htm</var>. Beide Dateien enthalten jeweils ein JavaScript mit der Anweisung:<br>
<code>document.cookie = location.href;</code><br>
Damit wird der URI der Datei in einem Cookie gespeichert. Ferner gibt es in beiden Verzeichnissen eine Datei <var>y.htm</var>, die jeweils folgende JavaScript-Anweisung enthält:<br>
<code>document.write(document.cookie);</code><br>
Damit wird ein vorhandener Cookie dynamisch ins Dokumentfenster geschrieben. Bei der angenommenen Anordnung liefern folgende Dateien folgende Ausgaben:<br>
<var>http://www.test.de/y.htm</var> liefert:<br>
<code>http://www.test.de/x.htm</code> (kann also den Cookie lesen, den <var>x.htm</var> im gleichen Verzeichnis gesetzt hat)<br>
<var>http://www.test.de/A/y.htm</var> liefert:<br>
<code>http://www.test.de/A/x.htm; http://www.test.de/x.htm</code> (kann also den Cookie lesen, den <var>x.htm</var> im gleichen Verzeichnis gesetzt hat, sowie den Cookie, den die <var>x.htm</var> im Verzeichnis oberhalb gesetzt hat)</p>

<p>Mittels der Eigenschaft <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="navigator.htm#cookie_enabled">navigator.cookieEnabled</a> können Sie abfragen, ob der Anwender Cookies aktiviert hat.</p>

<p>Opera bis Version 6 erlaubt kein Setzen von Cookies im Protokoll <i>file://</i>, also beim Aufrufen von HTML-Dateien mit JavaScript direkt von der Festplatte. Dies gilt ebenfalls für den Webbrowser Safari.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/msjs.gif" width="30" height="30" alt="MS JScript" title="MS JScript"><img src="../../src/msie4.gif" width="30" height="30" alt="MS IE 4.0" title="MS IE 4.0"><img src="../../src/jswrite.gif" width="60" height="30" alt="Lesen/Ändern">&nbsp;<a class="an" name="default_charset">defaultCharset</a></h2>

<p>Speichert die Kodierung, die der Anwender als Standard im Browser eingestellt hat. Wenn die HTML-Datei keine <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/kopfdaten/meta.htm#zeichenkodierung">Meta-Angabe zur verwendeten Kodierung</a> enthält, benutzt der Browser diese Kodierung.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_default_charset.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type="text/javascript"&gt;
alert("Sie haben als Zeichenkodierung eingestellt: " + document.defaultCharset);
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>
<p>Das Beispiel gibt beim Einlesen der Datei mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm#alert">alert()</a> aus, welche Kodierung der Anwender als Standard eingestellt hat.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op7.gif" width="30" height="30" alt="Opera 7" title="Opera 7"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0"><img src="../../src/jswrite.gif" width="60" height="30" alt="Lesen/Ändern">&nbsp;<a class="an" name="fg_color">fgColor</a></h2>

<p>Speichert die Farbe für Text, wie beim Attribut <code>text</code> im <code>&lt;body&gt;</code>-Tag oder vom Anwender in seinen Browser-Einstellungen festlegbar (siehe auch <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/dateiweit/farben.htm">Farben für Hintergrund, Text und Verweise</a>).</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_fg_color.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type="text/javascript"&gt;
function FarbeAendern () {
  document.fgColor = "#FF0000";
}
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;p&gt;Ein kleiner Text&lt;/p&gt;
&lt;p&gt;&lt;a href="javascript:FarbeAendern()">Textfarbe &amp;auml;ndern&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel wird eine Funktion namens <code>FarbeAendern()</code> definiert und ein Verweis, der beim Aktivieren diese Funktion ausführt. Die Funktion ändert die Textfarbe auf rot (<code>#FF0000</code>).</p>

<p>Die Farbangabe wird entweder hexadezimal notiert oder in Form erlaubter Farbnamen (siehe auch <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/allgemein/farben.htm">Farben definieren in HTML</a>). Der Wert muss in jedem Fall in Anführungszeichen stehen.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Farbänderungen für die Textfarbe können je nach Browser erst dann möglich sein, nachdem die HTML-Seite komplett eingelesen wurde. Deshalb wurde das Beispiel so konzipiert, dass die Farbänderung erst nach dem Laden durchgeführt wird.</p>

<p>Diese klassische, im herkömmlichen JavaScript gültige Implementierung von <code>fgColor</code> als direkte Eigenschaft des <code>document</code>-Objekts wird vom HTML-spezifischen DOM missbilligt. Laut DOM besitzt das HTML-Elementobjekt <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="htmlelemente.htm#body">body</a> eine Eigenschaft namens <code>text</code> in Entsprechung zum
Attribut <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/dateiweit/farben.htm#text_verweise">text</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq34.gif" width="30" height="30" alt="Konqueror 3.4" title="Konqueror 3.4"><img src="../../src/saf13.gif" width="30" height="30" alt="Safari 1.3" title="Safari 1.3"><img src="../../src/jsread.gif" width="60" height="30" alt="Lesen">&nbsp;<a class="an" name="last_modified">lastModified</a></h2>

<p>Speichert Datum und Uhrzeit der letzten Änderung der Datei.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_last_modified.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;script type="text/javascript"&gt;
document.write("letzter Update: " + document.lastModified);
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>
<p>Das Beispiel schreibt mit der Methode <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#write">write()</a> den Zeitpunkt der letzten Änderung dynamisch in die HTML-Datei.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Die Formatierung der Zeichenkette ist stark abhängig vom Browser und dem verwendeten Betriebssystem. So kann bei der Weiterverarbeitung dieser Eigenschaft mit dem <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="date.htm#allgemeines">Date</a>-Objekt eine zweistellige Jahreszahl übergeben und dadurch ein falscher Wochentag und ein falsches Jahr zurückgegeben werden.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op7.gif" width="30" height="30" alt="Opera 7" title="Opera 7"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0"><img src="../../src/jswrite.gif" width="60" height="30" alt="Lesen/Ändern">&nbsp;<a class="an" name="link_color">linkColor</a></h2>

<p>Speichert die Farbe für unbesuchte Verweise, wie beim Attribut <code>link</code> im <code>&lt;body&gt;</code>-Tag oder vom Anwender in seinen Browser-Einstellungen festlegbar (siehe auch <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/dateiweit/farben.htm">Farben für Hintergrund, Text und Verweise</a>).</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_link_color.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type="text/javascript"&gt;
function FarbeAendern () {
  document.linkColor = "#FF0000";
}
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;p&gt;&lt;a href="http://news.bbc.co.uk/"&gt;Verweis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="javascript:FarbeAendern()"&gt;Verweisfarbe &amp;auml;ndern&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel werden zwei Verweise notiert. Der erste verweist auf eine Seite, von der angenommen wird, dass sie der Browsre nicht als besucht ansieht. Der zweite Verweise führt beim Aktivieren eine Funktion namens <code>FarbeAendern()</code>, die im Seitenkopf definiert ist. Diese Funktion ändert die Farbe für unbesuchte Links auf rot (<code>#FF0000</code>).</p>

<p>Die Farbangabe wird entweder hexadezimal notiert oder in Form erlaubter Farbnamen (siehe auch <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/allgemein/farben.htm">Farben definieren in HTML</a>). Der Wert muss in jedem Fall in Anführungszeichen stehen.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Konqueror 3.1 ermöglicht das Auslesen der Eigenschaft <code>linkColor</code>, wenn ein <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/dateiweit/farben.htm#text_verweise">link</a>-Attribut beim Element <code>body</code> vorhanden ist. Das Setzen ist zwar möglich, die Farbe der Verweise im Dokument ändert sich darauf jedoch erst in Konqueror 3.3.</p>

<p>Diese klassische, im herkömmlichen JavaScript gültige Implementierung von <code>linkColor</code> als direkte Eigenschaft des <code>document</code>-Objekts wird vom HTML-spezifischen DOM missbilligt. Laut DOM besitzt das HTML-Elementobjekt <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="htmlelemente.htm#body">body</a> eine Eigenschaft namens <code>link</code> in Entsprechung zum Attribut <code>link</code>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op6.gif" width="30" height="30" alt="Opera 6" title="Opera 6"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0"><img src="../../src/jsread.gif" width="60" height="30" alt="Lesen">&nbsp;<a class="an" name="referrer">referrer</a></h2>

<p>Speichert den URI, von dem aus die aktuelle Datei aufgerufen wurde. Voraussetzung ist, dass er die aktuellen Datei über einen Verweis aufgerufen hat. Wenn er die Adresse der Datei stattdessen etwa als Lesezeichen ausgewählt oder direkt in die Adresszeile des Browsers eingegeben hat, ist in <code>document.referrer</code> nichts gespeichert. Beim Internet Explorer und in Netscape 6 wird in <code>document.referrer</code> nur dann etwas gespeichert, wenn der Aufruf der aktuellen Datei über das HTTP-Protokoll erfolgte, also mit einem Verweis vom Typ <code>http://...</code>. Einige Browser ermöglichen es dem Anwender zudem, den Zugriff auf diese Eigenschaft zu unterbinden. Sie können sich daher nicht darauf verlassen, dass <code>document.referrer</code> gefüllt ist.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_referrer.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;script type="text/javascript"&gt;
document.write("&lt;h1&gt;Lieber Besucher&lt;\/h1&gt;");
document.write("Du hast also von " + document.referrer + " hierher gefunden");
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>
<p>Das Beispiel gibt im HTML-Text mit der Methode <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#write">write()</a> aus, von woher der Anwender die aktuelle Datei aufgerufen hat.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0"><img src="../../src/jswrite.gif" width="60" height="30" alt="Lesen/&Auml;ndern">&nbsp;<a class="an" name="title">title</a></h2>

<p>Speichert den Titel einer HTML-Datei, wie er bei <code>&lt;title&gt;</code>...<code>&lt;/title&gt;</code> vergeben wurde.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_title.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;
&lt;script type="text/javascript"&gt;
document.write(document.title);
&lt;/script&gt;
&lt;/h1&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel schreibt mit der Methode <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#write">write()</a> den Titel der HTML-Datei dynamisch als Inhalt in eine Überschrift 1. Ordnung (<code>&lt;h1&gt;</code>...<code>&lt;/h1&gt;</code>).</p>

<h3>Beachten Sie:</h3>

<p>In Netscape JavaScript ist die Eigenschaft <code>document.title</code> als nur lesbar definiert, gemäß dem HTML-spezifischen DOM und Microsofts JScript allerdings können Sie diese Eigenschaft auch ändern. Unter anderem der Internet Explorer, Opera, Firefox, Safari und Konqueror unterstützen dies.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0"><img src="../../src/jsread.gif" width="60" height="30" alt="Lesen">&nbsp;<a class="an" name="url">URL</a></h2>

<p>Speichert den vollständigen URI des aktuellen Dokuments.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_url.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;script type="text/javascript"&gt;
window.alert("Diese Datei: " + document.URL);
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel gibt mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm#alert">alert()</a> die vollständige Adresse des gegenwärtigen HTML-Dokuments aus.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Vermeiden Sie es, die Adresse des Dokuments mit der Methode <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#write">write()</a> direkt und ungefiltert auszugeben. Ein Angreifer kann die Adresse so manipulieren, dass auf diese Weise fremder HTML- und JavaScript-Code in die Seite eingeschleust wird. Gelingt es dem Angreifer, dass jemand Ihre Site über die manipulierte Adresse besucht, stellt dies möglicherweise ein Sicherheitsrisiko dar. Diese Angriffsmethode wird <i>Cross Site Scripting</i> genannt. Viele dynamische Webseiten, zum Beispiel Online-Banking, E-Mail-Dienste, Online-Shops sowie Foren und Communities, arbeiten mit Cookie-basierter Authentifizierung. Gelingt es dem Angreifer, fremden JavaScript-Code einzuschleusen, kann er eine solche Sitzung übernehmen und missbrauchen (sogenanntes <i>Session Hijacking</i>).</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op7.gif" width="30" height="30" alt="Opera 7" title="Opera 7"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0"><img src="../../src/jswrite.gif" width="60" height="30" alt="Lesen/Ändern">&nbsp;<a class="an" name="vlink_color">vlinkColor</a></h2>

<p>Speichert die Farbe für Verweise zu bereits besuchten Seiten, wie beim Attribut <code>vlink</code> im <code>&lt;body&gt;</code>-Tag oder vom Anwender in seinen Browser-Einstellungen festlegbar (siehe auch <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/dateiweit/farben.htm">Farben für Hintergrund, Text und Verweise</a>).</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_vlink_color.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type="text/javascript"&gt;
function FarbeAendern () {
  document.vlinkColor = "#A0A0A0";
}
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;p&gt;&lt;a href="../document.htm"&gt;besuchter Verweis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="javascript:FarbeAendern()"&gt;Farbe ändern&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel wird ein Verweis zu einer bereits besuchten Seite notiert. Der Kopf der Datei enthält eine JavaScript-Funktion <code>FarbeAendern()</code>, welche durch das Aktivieren eines weiteren Verweises im Dateikörper aufgerufen wird. Die Funktion ändert die Farbe für besuchte Links zu einem Grauton (<code>#A0A0A0</code>).</p>

<p>Die Farbangabe wird entweder hexadezimal notiert oder in Form erlaubter Farbnamen (siehe auch <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/allgemein/farben.htm">Farben definieren in HTML</a>). Der Wert muss in jedem Fall in Anführungszeichen stehen.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Konqueror 3.1 ermöglicht das Auslesen der Eigenschaft <code>vlinkColor</code>, wenn ein <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/dateiweit/farben.htm#text_verweise">vlink</a>-Attribut beim Element <code>body</code> vorhanden ist. Das Setzen ist zwar möglich, die Farbe der besuchten Verweise im Dokument ändert sich darauf jedoch erst in Konqueror 3.3.</p>

<p>Diese klassische, im herkömmlichen JavaScript gültige Implementierung von <code>vlinkColor</code> als direkte Eigenschaft des <code>document</code>-Objekts wird vom HTML-spezifischen DOM missbilligt. Laut DOM besitzt das HTML-Elementobjekt <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="htmlelemente.htm#body">body</a> eine Eigenschaft namens <code>vLink</code> in Entsprechung zum Attribut <code>vlink</code>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/js12.gif" width="30" height="30" alt="JavaScript 1.2" title="JavaScript 1.2"><img src="../../src/netsc4.gif" width="30" height="30" alt="Netscape 4.0" title="Netscape 4.0">&nbsp;<a class="an" name="capture_events">captureEvents()</a></h2>

<p>Überwacht Anwenderereignisse im aktuellen Dokument. Funktioniert genau so wie <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm#capture_events">captureEvents() beim window-Objekt</a> (nähere Informationen siehe dort). Der einzige Unterschied ist, dass Sie mit <code>document.captureEvents()</code> nur Ereignisse innerhalb des Dokumentfensters überwachen können, jedoch keine Ereignisse im gesamten Fensterbereich (zu dem beispielsweise auch Titelleiste, Menüleisten usw. gehören).</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Netscape 6 interpretiert diese Methode nicht mehr.</p>


<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="close">close()</a></h2>

<p>Schließt einen Dokumentinhalt, der mit der <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#open">open()</a>-Methode geöffnet und mit den Methoden <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#write">write()</a> oder <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#writeln">writeln()</a> beschrieben wurde.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_close.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;script type="text/javascript"&gt;
document.open();
document.write(document.URL);
document.close();
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>
<p>Das Beispiel öffnet den Dokumentinhalt zum Schreiben, dann schreibt es etwas (den aktuellen URI) mit der Methode <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#write">write()</a>, und zuletzt schließt es den Vorgang mit <code>document.close()</code> ab.<br>
Mit dem Schließen des Dokumentes wird dem Browser signalisiert, dass der Aufbau der Seite abgeschlossen ist. Dies ist besonders beim dynamischen Schreiben von <img src="../../src/kap.gif" width="15" height="13" alt="Kapitel">&nbsp;<a href="../../html/frames/index.htm">Frames</a> und zum Beschreiben von <img src="../../src/kap.gif" width="15" height="13" alt="Kapitel">&nbsp;<a href="../../html/layer/index.htm">Layern</a> erforderlich.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js15.gif" width="30" height="30" alt="JavaScript 1.5" title="JavaScript 1.5"><img src="../../src/netsc6.gif" width="30" height="30" alt="Netscape 6.0" title="Netscape 6.0"><img src="../../src/msie6.gif" width="30" height="30" alt="MS IE 6.0" title="MS IE 6.0"><img src="../../src/op72.gif" width="30" height="30" alt="Opera 7.20" title="Opera 7.20"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="create_attribute">createAttribute()</a></h2>

<p>Erzeugt ein neues Attribut für den Elementenbaum. Lässt sich auf HTML-, aber auch auf XML-Dokumente anwenden.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_create_attribute.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Eine sehr dynamische Seite&lt;/h1&gt;
&lt;script type="text/javascript"&gt;
var Ausrichtung = document.createAttribute("align");
Ausrichtung.nodeValue = "right";
var Element = document.getElementsByTagName("h1")[0];
Element.setAttributeNode(Ausrichtung);
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel enthält eine Überschrift erster Ordnung ohne weitere Attribute. Unterhalb davon ist ein JavaScript-Bereich notiert. Dort wird mit <code>document.createAttribute("align")</code> ein neues Attribut mit Namen <code>align</code> erzeugt, das in diversen HTML-Elementen zum Ausrichten des Inhalts verwendet werden kann. Das Attribut hat damit aber noch keine Wirkung - es hängt weder im Elementenbaum des Dokuments, noch hat es einen Wert. Das Attribut ist lediglich als Objekt erzeugt.<br>
Die Methode <code>createAttribute()</code> gibt das erzeugte Objekt, also in dem Fall das <code>align</code>-Attribut, zurück. Der Rückgabewert wird in der Variablen <code>Ausrichtung</code> gespeichert. Über diese Variable ist das neu erzeugte Attribut von da ab ansprechbar.</p>

<p>Damit das Attribut einen Inhalt erhält, wird der dem Attributknoten über die Objekteigenschaft <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="node.htm#node_value">nodeValue</a> der gewünschte Wert <code>right</code> zugewiesen. Anschließend müssen das Attribut und sein Wert noch in den vorhandenen Elementenbaum eingehängt werden. Dies geschieht in der Anweisung <code>Element.setAttributeNode(Ausrichtung);</code> (siehe auch <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="node.htm#set_attribute_node">setAttributeNode()</a>). Dabei wurde zuvor in der Variablen <code>Element</code> das <code>h1</code>-Element gespeichert, auf das mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#get_elements_by_tag_name">getElementsByTagName()</a> zugegriffen wurde. Somit wird die Überschrift dynamisch rechtsbündig ausgerichtet.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Mit dem Internet Explorer 5.5 war dieses Beispiel nicht nachvollziehbar, wenngleich Microsoft behauptet, diese Methode in den Internet Explorer implementiert zu haben. Im Internet Explorer 6 ist das Beispiel dagegen nachvollziehbar.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js15.gif" width="30" height="30" alt="JavaScript 1.5" title="JavaScript 1.5"><img src="../../src/netsc6.gif" width="30" height="30" alt="Netscape 6.0" title="Netscape 6.0"><img src="../../src/msie55.gif" width="30" height="30" alt="MS IE 5.5" title="MS IE 5.5"><img src="../../src/op7.gif" width="30" height="30" alt="Opera 7" title="Opera 7"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="create_element">createElement()</a></h2>

<p>Erzeugt ein neues Element für den Elementenbaum. lässt sich auf HTML-, aber auch auf XML-Dokumente anwenden.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_create_element.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;div id="Bereich" style="border:1px black solid; padding:10px"&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
var myH1 = document.createElement("h1");
var myText = document.createTextNode("Eine sehr dynamische Seite");
myH1.appendChild(myText);
var Ausgabebereich = document.getElementById("Bereich");
Ausgabebereich.appendChild(myH1);
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel enthält einen <code>div</code>-Bereich, der zunächst leer ist. Unterhalb davon ist ein JavaScript-Bereich notiert. Dort wird mit <code>document.createElement("h1")</code> ein neues Element vom Typ <code>h1</code> erzeugt, also eine HTML-Überschrift erster Ordnung. Die Überschrift wird damit aber noch nicht angezeigt - sie hängt noch nicht einmal im Elementenbaum des Dokuments. Das Element ist lediglich als Objekt erzeugt.<br>
Die Methode <code>createElement()</code> gibt das erzeugte Objekt, also in dem Fall das <code>h1</code>-Element, zurück. Der Rückgabewert wird in der Variablen <code>myH1</code> gespeichert. Über diese Variable ist das neu erzeugte Element von da ab ansprechbar.</p>

<p>Damit die Überschrift einen Inhalt erhält, wird mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#create_text_node">createTextNode()</a> ein Textknoten erzeugt. Mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="node.htm#append_child">appendChild()</a> wird dann der Textknoten als Kindelement der Überschrift erster Ordnung definiert. Anschließend muss noch die ganze Überschrift in den vorhandenen Elementenbaum eingehängt werden. Dies geschieht in der Anweisung <code>Ausgabebereich.appendChild(myH1);</code>. Dabei wurde zuvor in der Variablen <code>Ausgabebereich</code> das leere <code>div</code>-Element gespeichert, auf das mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#get_element_by_id">getElementById()</a> zugegriffen wurde. Somit wird die Überschrift mit ihrem Text als Kindelement dynamisch in den <code>div</code>-Bereich eingefügt.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js15.gif" width="30" height="30" alt="JavaScript 1.5" title="JavaScript 1.5"><img src="../../src/netsc6.gif" width="30" height="30" alt="Netscape 6.0" title="Netscape 6.0"><img src="../../src/msie55.gif" width="30" height="30" alt="MS IE 5.5" title="MS IE 5.5"><img src="../../src/op7.gif" width="30" height="30" alt="Opera 7" title="Opera 7"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="create_text_node">createTextNode()</a></h2>

<p>Erzeugt einen neuen Textknoten für den Elementenbaum. lässt sich auf HTML-, aber auch auf XML-Dokumente anwenden.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_create_text_node.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;p id="Absatz"&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;
var Zeitstempeltext = document.createTextNode(document.lastModified);
var TextZuvor = document.createTextNode("Datum des letzten Updates: ");
document.getElementById("Absatz").appendChild(TextZuvor);
document.getElementById("Absatz").appendChild(Zeitstempeltext);
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel enthält einen <code>p</code>-Absatz, der zunächst leer ist. Unterhalb davon ist ein JavaScript-Bereich notiert. Dort wird mit <code>document.createTextNode()</code> zwei neue Zeichenketten erzeugt, einmal der gespeicherte Wert von <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#last_modified">lastModified</a>, und einmal ein statischer Text. Die Texte werden damit aber noch nicht angezeigt - sie sind auch noch nicht in den Elementenbaum des Dokuments eingehängt. Die Textknoten sind lediglich als Objekt erzeugt.<br>
Die Methode <code>createTextNode()</code> gibt das erzeugte Objekt zurück. Der Rückgabewert wird in den beiden Beispielaufrufen in den Variablen <code>Zeitstempeltext</code> und <code>TextZuvor</code> gespeichert. Über diese Variablen sind die neu erzeugten Textknoten von da ab ansprechbar.</p>

<p>Mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="node.htm#append_child">appendChild()</a> werden dann die Textknoten als Kindelemente des über dem JavaScript notierten Textabsatzes definiert. Dazu wird mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#get_element_by_id">getElementById()</a> auf das <code>p</code>-Element zugegriffen. Der leere Absatz erhält somit dynamisch einen Inhalt.</p>
<h3 class="inf">Beachten Sie:</h3>

<p>Konqueror vor Version 3.4 und Safari vor 1.3 interpretieren <code>createTextNode()</code> bereits. Das oben angeführte Beispiel zeigt dies jedoch nicht, da diese älteren Browserversionen <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#last_modified">lastModified</a> noch nicht interpretieren.</p>

<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js15.gif" width="30" height="30" alt="JavaScript 1.5" title="JavaScript 1.5"><img src="../../src/netsc6.gif" width="30" height="30" alt="Netscape 6.0" title="Netscape 6.0"><img src="../../src/msie55.gif" width="30" height="30" alt="MS IE 5.5" title="MS IE 5.5"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="get_element_by_id">getElementById()</a></h2>

<p>Greift entsprechend der HTML-Variante des DOM auf ein HTML-Element zu, das ein <code>id</code>-Attribut besitzt. </p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_get_element_by_id.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;style type="text/css"&gt;
.normal { font-style:normal }
&lt;/style&gt;
&lt;script type="text/javascript"&gt;
function Ausrichten (wie) {
  document.getElementById("unentschlossen").align = wie;
}
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1 id="unentschlossen"&gt;Wo gehöre ich eigentlich hin?&lt;/h1&gt;
&lt;a href="javascript:Ausrichten('left')"&gt;links?&lt;/a&gt;&lt;br&gt;
&lt;a href="javascript:Ausrichten('center')"&gt;zentriert?&lt;/a&gt;&lt;br&gt;
&lt;a href="javascript:Ausrichten('right')"&gt;rechts?&lt;/a&gt;&lt;br&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel enthält eine Überschrift erster Ordnung mit dem Attribut <code>id="unentschlossen"</code>. Unterhalb davon sind drei Verweise notiert. Jeder der Verweise ruft die Funktion <code>Ausrichten()</code> auf, die im Dateikopf notiert ist, und übergibt ihr jeweils einen anderen Wert. Innerhalb der Funktion <code>Ausrichten()</code> wird mit <code>document.getElementById("unentschlossen")</code> auf die Überschrift erster Ordnung zugegriffen. Die Funktion weist der Eigenschaft <code>align</code> den jeweils übergebenen Wert zu. Dadurch wird die Ausrichtung der Überschrift dynamisch geändert.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Die Methode <code>getElementById()</code> regelt lediglich den Zugriff auf HTML-Elemente. Um zu wissen, was Sie mit welchen HTML-Elementen überhaupt tun können, können Sie sich im Abschnitt über die <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="htmlelemente.htm">HTML-Elementobjekte</a> einen Überblick verschaffen. Weitere Möglichkeiten, um HTML-Elemente dynamisch zu beeinflussen, bietet das <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="node.htm">node</a>-Objekt an.</p>

<p>Sie können an diese Methode auch Variablen übergeben. Dazu notieren Sie einfach den Variablennamen ohne Anführungszeichen  anstatt eines festen Wertes z.B. <code>getElementById(Variablenname)</code>.
Voraussetzung ist jedoch, dass die Variable auch existiert.</p>

<p>Opera 5 und 6 kennen die Methode <code>getElementById()</code> zum Ansprechen von Elementen ebenfalls. Das obige Beispiel funktioniert jedoch in diesen Browsern nicht.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js15.gif" width="30" height="30" alt="JavaScript 1.5" title="JavaScript 1.5"><img src="../../src/netsc6.gif" width="30" height="30" alt="Netscape 6.0" title="Netscape 6.0"><img src="../../src/msie55.gif" width="30" height="30" alt="MS IE 5.5" title="MS IE 5.5"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="get_elements_by_name">getElementsByName()</a></h2>

<p>Greift entsprechend der HTML-Variante des DOM auf ein HTML-Element zu, das ein <code>name</code>-Attribut besitzt.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_get_elements_by_name.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;style type="text/css"&gt;
.normal { font-style:normal }
&lt;/style&gt;
&lt;script type="text/javascript"&gt;
function Ankreuzen () {
  document.getElementsByName("Zutat")[0].checked = true;
}
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;form name="Formular" action=""&gt;
&lt;input type="checkbox" name="Zutat" value="Salami"&gt; Salami &lt;br&gt;
&lt;input type="checkbox" name="Zutat" value="Pilze"&gt; Pilze &lt;br&gt;
&lt;input type="checkbox" name="Zutat" value="Oliven"&gt; Oliven &lt;br&gt;
&lt;input type="button" value="Test" onclick="Ankreuzen()"&gt;
&lt;/form&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel wird eine Gruppe von Checkboxen definiert, die alle den gleichen Namen, nämlich <code>Zutat</code>, haben. Darunter ist ein Klick-Button notiert, bei dessen Anklicken die Funktion <code>Ankreuzen()</code> aufgerufen wird, die im Dateikopf notiert ist. Diese Funktion kreuzt die erste der drei Checkboxen an. Durch <code>getElementsByName("Zutat")[0]</code> greift sie auf das erste Element mit <code>name="Zutat"</code> zu. Auch wenn ein solcher Elementname nur einmal im Dokument vorkommt, muss stets mit Array-Syntax auf die Elemente zugegriffen werden. So wäre im Beispiel das Formularelement etwa über <code>getElementsByName("Formular")[0]</code> ansprechbar. Die zweite Checkbox mit dem Namen <code>"Zutat"</code> wäre über <code>getElementsByName("Zutat")[1]</code> ansprechbar usw.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Die Methode <code>getElementsByName()</code> regelt lediglich den Zugriff auf HTML-Elemente. Um zu wissen, was Sie mit welchen HTML-Elementen überhaupt tun können, können Sie sich im Abschnitt über die <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="htmlelemente.htm">HTML-Elementobjekte</a> einen Überblick verschaffen. Weitere Möglichkeiten, um HTML-Elemente dynamisch zu beeinflussen, bietet das <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="node.htm">node</a>-Objekt an.</p>

<p>Sie können an diese Methode auch Variablen übergeben. Dazu notieren Sie einfach den Variablennamen  ohne Anführungszeichen  anstatt eines festen Wertes z.B. <code>getElementsByName(Variablenname)</code>.
Voraussetzung ist jedoch, dass die Variable auch existiert.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js15.gif" width="30" height="30" alt="JavaScript 1.5" title="JavaScript 1.5"><img src="../../src/netsc6.gif" width="30" height="30" alt="Netscape 6.0" title="Netscape 6.0"><img src="../../src/msie55.gif" width="30" height="30" alt="MS IE 5.5" title="MS IE 5.5"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="get_elements_by_tag_name">getElementsByTagName()</a></h2>

<p>Greift entsprechend dem DOM auf ein beliebiges Element im Elementenbaum des Dokuments zu. Maßgeblich ist dabei der Elementname, in HTML also beispielsweise Namen wie <code>h1</code>, <code>blockquote</code> oder <code>img</code>. Für jeden HTML-Elementtyp wird im Dokument ein Array erzeugt, über den die einzelnen Elemente dann ansprechbar sind.</p>

<p>Wenn Sie anstatt den Namen eines HTML Elementes ein Sternchen <code>"*"</code> als Parameter übergeben, können alle HTML Elemente eines Dokumentes angesprochen werden.

<p>Diese Methode ist nicht Bestandteil des HTML-spezifischen DOM, sondern des allgemeinen Kern-DOM für beliebige XML- bzw. SGML-basierte Dokumente. Nicht alle Eigenschaften und Methoden des <code>document</code>-Objekts des Kern-DOM werden hier beschrieben.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_get_elements_by_tag_name.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;style type="text/css"&gt;
.normal { font-style:normal }
&lt;/style&gt;
&lt;script type="text/javascript"&gt;
function neueTexte () {
  document.getElementsByTagName("p")[0].firstChild.data = "neuer erster";
  document.getElementsByTagName("p")[1].firstChild.data = "neuer zweiter";
  document.getElementsByTagName("p")[2].firstChild.data = "neuer dritter";
  document.getElementsByTagName("h1")[0].firstChild.data = "Alles anders";
}
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Dynamisch, sehr dynamisch&lt;/h1&gt;
&lt;p&gt;Ein erster Absatz&lt;/p&gt;
&lt;p&gt;Ein zweiter Absatz&lt;/p&gt;
&lt;p&gt;Ein dritter Absatz&lt;/p&gt;

&lt;p&gt;&lt;a href="javascript:neueTexte()"&gt;neue Texte&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel werden eine Überschrift erster Ordnung und drei Textabsätze notiert. Keines dieser Elemente enthält irgendein Attribut, über das es individuell angesprochen werden könnte. Unterhalb davon ist ein Verweis notiert, bei dessen Anklicken die Funktion <code>neueTexte()</code> aufgerufen wird, die im Dateikopf notiert ist. Diese Funktion ändert dynamisch die Texte aller drei Textabsätze und der Überschrift.<br>
Über <code>document.getElementsByTagName("p")[0]</code> greift sie auf den ersten Textabsatz des Dokuments zu, über <code>document.getElementsByTagName("p")[1]</code> auf den zweiten, über <code>document.getElementsByTagName("h1")[0]</code> auf die erste Überschrift erster Ordnung usw.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Die Methode <code>getElementsByTagName()</code> regelt lediglich den Zugriff auf Elemente. Um zu wissen, was Sie mit welchen HTML-Elementen überhaupt tun können, können Sie sich im Abschnitt über die <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="htmlelemente.htm">HTML-Elementobjekte</a> einen Überblick verschaffen. Weitere Möglichkeiten, um HTML-Elemente dynamisch zu beeinflussen, bietet das <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="node.htm">node</a>-Objekt an. Die Eigenschaft <code>firstChild.data</code>, die im obigen Beispiel verwendet wird, um den im Element enthaltenen Text dynamisch zu ändern, gehört ebenfalls zum Komplex des <code>node</code>-Objekts.</p>

<p>Opera Version 5.12 kennt die Methode <code>getElementsByTagName()</code> zum Ansprechen von Elementen. Das obige Beispiel funktioniert aufgrund von <code>firstChild</code> jedoch erst ab Version 7.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/js12.gif" width="30" height="30" alt="JavaScript 1.2" title="JavaScript 1.2"><img src="../../src/netsc4.gif" width="30" height="30" alt="Netscape 4.0" title="Netscape 4.0"><img src="../../src/msie5.gif" width="30" height="30" alt="MS IE 5.0" title="MS IE 5.0"><img src="../../src/op8.gif" width="30" height="30" alt="Opera 8" title="Opera 8"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq33.gif" width="30" height="30" alt="Konqueror 3.3" title="Konqueror 3.3"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="get_selection">getSelection()</a></h2>

<p>Ermittelt Text, der vom Anwender im Dokument selektiert wurde. Im Netscape 4 war diese diese Methode an das document-Objekt gebunden. Seit Netscape 6 ist sie dem <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm">window</a>-Objekt zugeordnet.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_get_selection.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type="text/javascript"&gt;
function selektierterText () {
  if (window.getSelection) {
    alert(window.getSelection());
  } else if (document.getSelection) {
    alert(document.getSelection());
  } else if (document.selection) {
    alert(document.selection.createRange().text);
  }
}
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
viel Text zum Selektieren viel Text zum Selektieren
&lt;form&gt;
&lt;input type="button" value="zeigen" onmousedown="selektierterText();"&gt;
&lt;/form&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ruft beim Klick auf den definierten Button die Funktion <code>selektierterText()</code> auf. Innerhalb dieser Funktion wird geprüft, ob der Browser die window-Methode <code>window.getSelection()</code> kennt. Tritt dieser Fall ein, so wird sie aufgerufen und der selektierte Text wird ausgegeben. Kennt der Browser diese Methode nicht, so wird geprüft, ob er die Methode <code>document.getSelection()</code> kennt und gegebenenfalls der selektierte Text ausgegeben.<br>
Der zweite else-if-Zweig des Beispiels behandelt einen Sonderfall für den Internet Explorer. Dieser kennt die Methode <code>getSelection()</code> nicht, jedoch ein <code>selection</code>-Objekt. Mit <code>document.selection.createRange().text</code> erhalten Sie hier den selektierten Text. Voraussetzung ist, dass zuvor Text selektiert wurde. Ansonsten liefert die Funktion <code>selektierterText()</code> eine leere Zeichenkette (<code>""</code>) als Ergebnis.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Konqueror 3.1 interpretiert diese Methode noch nicht.</p>


<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/js12.gif" width="30" height="30" alt="JavaScript 1.2" title="JavaScript 1.2"><img src="../../src/netsc4.gif" width="30" height="30" alt="Netscape 4.0" title="Netscape 4.0">&nbsp;<a class="an" name="handle_event">handleEvent()</a></h2>

<p>Übergibt ein Ereignis an ein Element, das in der Lage ist, auf das Ereignis zu reagieren. Funktioniert genau so wie <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm#handle_event">handleEvent() im Zusammenhang mit dem window-Objekt</a> (nähere Informationen siehe dort). Der einzige Unterschied ist, dass <code>document.handleEvent()</code> nur Ereignisse übergeben kann, die mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#capture_events">document.captureEvents()</a> überwacht werden.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Netscape 6 interpretiert diese Methode nicht mehr.</p>


<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="open">open()</a></h2>

<p>Öffnet ein Dokument zum Schreiben. Dabei wird kein Fenster geöffnet, sondern der Fensterinhalt zum Neubeschreiben freigegeben. Falls das Dokument vorher einen Inhalt hatte, zum Beispiel eine zunächst geladene HTML-Datei, sollten Sie zuerst die <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#close">close()</a>-Methode aufrufen.</p>

<p>Gemäß dem HTML-spezifischen DOM erwartet <code>open()</code> keine Parameter. Gemäß den JavaScript-Spezifikationen von Netscape hingegen erwartet die Methode zwei optionale Parameter. Sie kann demnach ohne, mit einem oder mit zwei Parametern aufgerufen werden. Folgende Parameter werden definiert:<br>
<b>1.</b> <i>MIME-Typ</i> = Eine Bezeichnung des MIME-Typs für die Art der Daten, die in das Dokumentfenster geschrieben werden sollen. So können Sie das Dokumentfenster beispielsweise durch Angabe von <code>"x-world/x-vrml"</code> zum Schreiben von VRML-Code öffnen. Mit den <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#write">write()</a>- und <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#writeln">writeln()</a>-Methoden können Sie dann dynamisch VRML-Code schreiben.<br>
<b>2.</b> <i>replace</i> = mit <code>document.open("text/html", "replace")</code> öffnen Sie das Dokument zum Schreiben von HTML und bewirken, dass der neue Dokumentinhalt die gleiche Stelle in der History der besuchten Seiten einnimmt wie das Dokument, in dem der <code>open()</code>-Methodenaufruf steht.<br>
Die meisten aktuellen Browser folgen jedoch der Definition des HTML-spezifischen DOM und ignorieren die Parameter. Lediglich Netscape 4.x (neuere Versionen nicht) und der Internet Explorer beachten sie.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_open.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;script type="text/javascript"&gt;
function Wechsel () {
  document.open();
  document.write('&lt;a href="datei.htm"&gt;Und jetzt steh ich hier&lt;/a&gt;');
  document.close();
}

document.open();
document.write('&lt;a href="javascript:Wechsel()"&gt;Noch steh ich hier&lt;/a&gt;');
document.close();
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>
<p>Das Beispiel-Script führt zunächst den unteren Teil des Codes aus, da der obere in die Funktion <code>Wechsel()</code> eingebunden ist, die erst bei Aufruf ausgeführt wird. Im unteren Teil wird mit JavaScript dynamisch ein Verweis in das Dokumentfenster geschrieben. Wenn der Anwender den Verweis anklickt, wird die Funktion <code>Wechsel()</code> aufgerufen. Diese Funktion öffnet das Dokumentfenster zum neuen Schreiben und schreibt dynamisch einen Verweis auf die aktuelle Datei (im Beispiel wird angenommen, dass diese Datei <code>datei.htm</code> heißt). Klickt der Anwender auf den Verweis, wird die Datei erneut geladen, und dadurch wird wieder der erste Verweis geschrieben.<br>
Beachten Sie, dass das Beispiel erst ab Netscape 3.x so funktioniert wie beschrieben. Netscape 2.x kennt die <code>document.open()</code> zwar auch schon, doch leert dabei das Dokumentfenster nicht.</p>

<h3>Beachten Sie:</h3>
<p>Opera 5.12 kennt laut Dokumentation die Methode <code>open()</code> und wendet sie in vielen Fällen richtig an. Das vorliegende Beispiel wird jedoch vom Browser nicht abgeschlossen und nur ohne Verwendung von <code>document.open()</code> richtig ausgeführt. Als Alternative können Sie die Funktion mit <code>&lt;a href="#" onclick="Wechsel(); return false"&gt;</code> aufrufen.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/js12.gif" width="30" height="30" alt="JavaScript 1.2" title="JavaScript 1.2"><img src="../../src/netsc4.gif" width="30" height="30" alt="Netscape 4.0" title="Netscape 4.0">&nbsp;<a class="an" name="release_events">releaseEvents()</a></h2>

<p>Beendet die Überwachung von Anwenderereignissen. Funktioniert genau so wie <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm#release_events">releaseEvents() beim window-Objekt</a> (nähere Informationen siehe dort). Der einzige Unterschied ist, dass <code>document.releaseEvent()</code> nur Ereignisüberwachungen beenden kann, die mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#capture_events">document.captureEvents()</a> gestartet wurden.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Netscape 6 interpretiert diese Methode nicht mehr.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/js12.gif" width="30" height="30" alt="JavaScript 1.2" title="JavaScript 1.2"><img src="../../src/netsc4.gif" width="30" height="30" alt="Netscape 4.0" title="Netscape 4.0">&nbsp;<a class="an" name="route_event">routeEvent()</a></h2>

<p>Übergibt ein Anwenderereignis an das <code>document</code>-Objekt. Von dort aus wird das Ereignis immer weiter nach unten durchgereicht, bis sich ein Event-Handler findet, der das Ereignis verarbeitet. Funktioniert genau so wie <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm#route_event">routeEvent() beim window-Objekt</a> (nähere Informationen siehe dort). Der einzige Unterschied ist, dass <code>document.routeEvent()</code> nicht auf Fensterebene ansetzt, sondern auf Dokumentebene.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Netscape 6 interpretiert diese Methode nicht mehr.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="write">write()</a></h2>

<p>Gibt Text im Dokument aus. Erwartet eine Zeichenkette oder einen JavaScript-Ausdruck als Parameter.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_write.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;script type="text/javascript"&gt;
DeinName = prompt("Bitte Deinen Namen angeben:", "Name");
document.write("&lt;b&gt;Hallo " + DeinName + "&lt;\/b&gt;");
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>
<p>Das Beispiel zeigt beim Einlesen der Datei mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="window.htm#prompt">prompt()</a> ein Dialogfenster an, in dem der Anwender seinen Namen eingeben soll. Der eingegebene Wert wird in der Variablen <code>DeinName</code> gespeichert. Anschließend wird mit <code>document.write()</code> das Wort "Hallo" mit einem Leerzeichen dahinter geschrieben. An die Zeichenkette angehängt wird die Variable <code>DeinName</code>. Dadurch steht hinterher beispielsweise "Hallo Susi" im Text, wenn in dem Dialogfenster "Susi" als Name angegeben wurde. Damit die Ausgabe in Fettschrift erfolgt, wird sie in das entsprechende HTML-Element gesetzt.</p>

<p>Es ist auch erlaubt, mehrere Zeichenketten oder Ausdrücke durch Kommata getrennt innerhalb von <code>document.write()</code> zu verwenden, zum Beispiel:<br>
<code>document.write("Sie benutzen ", document.layers ? "Netscape ab V4" : "nicht Netscape ab V4");</code><br>
Dieses Beispiel enthält zunächst eine Zeichenkette und dann, durch ein Komma getrennt, einen komplexen Ausdruck, in dem ermittelt wird, ob der Anwender einen Browser benutzt, der das layers-Objekt kennt.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Der Schrägstrich <code>/</code> in schließenden HTML-Tags muss bei der Ausgabe mit dem Zeichen <code>\</code> maskiert werden. Das gilt besonders dann, wenn Sie dynamisch weiteren JavaScript-Code in der Form <code>document.write("&lt;script&gt;...&lt;/script&gt;")</code> schreiben möchten. Maskiert <code>&lt;script&gt;...&lt;\/script&gt;</code> geschrieben, wird der dynamisch geschriebene Script-Bereich als eigenständiger Block interpretiert, und das aktuelle Script wird unabhängig davon weiter ausgeführt.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><img src="../../src/dom10.gif" width="30" height="30" alt="DOM 1.0" title="DOM 1.0"><img src="../../src/js10.gif" width="30" height="30" alt="JavaScript 1.0" title="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" alt="Netscape 2.0" title="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" alt="MS IE 3.0" title="MS IE 3.0"><img src="../../src/op512.gif" width="30" height="30" alt="Opera 5.12" title="Opera 5.12"><img src="../../src/ffox1.gif" width="30" height="30" alt="Mozilla Firefox 1" title="Mozilla Firefox 1"><img src="../../src/konq31.gif" width="30" height="30" alt="Konqueror 3.1" title="Konqueror 3.1"><img src="../../src/saf1.gif" width="30" height="30" alt="Safari 1.0" title="Safari 1.0">&nbsp;<a class="an" name="writeln">writeln()</a></h2>

<p>Wie <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#write">write()</a> - fügt jedoch am Ende automatisch ein Zeilenumbruch-Zeichen ein. Dadurch ist diese Methode vor allem zum Schreiben von Inhalten interessant, bei denen Zeilenumbrüche wichtig sind.</p>

<h3 class="xmp">Beispiel:</h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="anzeige/document_writeln.htm">Anzeigebeispiel: So sieht's aus</a></p>

<pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;script type="text/javascript"&gt;
document.write("&lt;pre&gt;kein Umbruch ");
document.writeln("erste Zeile");
document.writeln("zweite Zeile &lt;\/pre&gt;");
document.writeln("dritte Zeile");
document.writeln("vierte Zeile");
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>In der ersten Zeile wird mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#write">document.write()</a> ein <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../html/text/praeformatiert.htm">präformatierter Text</a> eingeleitet. Dieser dient im Beispiel dazu, die Zeilenumbrüche sichtbar zu machen. Die Methode <code>document.write()</code> erzeugt keinen Zeilenumbruch. Der Inhalt der nachfolgenden Zeile ("erste Zeile") wird deshalb in der gleichen Zeile ausgegeben. Da diese Zeichenkette jedoch mit <code>document.writeln()</code> ausgegeben wird, entsteht im Quelltext am Ende ein Zeilenumbruch. Die nächste Zeile ("zweite Zeile") wird deshalb in einer neuen Zeile ausgegeben. Zugleich wird im Beispiel in dieser Zeile der präformatierte Abschnitt beendet. Die dritte und die vierte Zeile werden ebenfalls mit <code>document.writeln()</code> geschrieben. Intern entstehen Zeilenumbrüche im Quelltext. Bei der Ausgabe im Browser sind diese jedoch nur als Leerzeichen sichtbar, getreu der HTML-Regel, dass Zeilenumbrüche in Leerzeichen umgewandelt werden.</p>



<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" class="doc">
&nbsp;<a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a>
</td></tr>
<tr><td class="doc"><a href="all.htm"><img src="../../src/next.gif" width="10" height="10" border="0" hspace="10" alt="weiter"></a></td>
<td width="100%"><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="htmlelemente.htm">HTML-Elementobjekte</a>
</td></tr>
<tr>
<td class="doc"><a href="frames.htm"><img src="../../src/prev.gif" width="10" height="10" border="0" hspace="10" alt="zurück"></a></td>
<td><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="frames.htm">frames</a>
</td>
</tr>
<tr><td colspan="2" class="doc">&nbsp;</td>
</tr>
<tr>
<td colspan="2" class="nav"><a class="an" name="bottom"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">JavaScript/DOM</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Objektreferenz</a></td>
</tr>
</table>

<p>&copy; 2007 <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../editorial/impressum.htm">Impressum</a></p>

</body>
</html>