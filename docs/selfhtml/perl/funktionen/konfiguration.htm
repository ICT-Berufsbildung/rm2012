<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>SELFHTML: Perl / Funktionsreferenz / Funktionen für Informationen aus Konfigurationsdateien</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Welche Funktionen es in Perl gibt, um Daten aus Konfigurationsdateien des Rechners zu ermitteln.">
<meta name="keywords"       content="SELFHTML, Perl, Funktionen, Perl-Funktionen, Konfigurationsdaten, endgrent, endhostent, endnetent, endprotoent, endpwent, endservent, getgrent, getgrgid, getgrnam, gethostbyaddr, gethostbyname, gethostent, getlogin, getnetbyaddr, getnetbyname, getnetent, getprotobyname, getprotobynumber, getprotoent, getpwent, getpwnam, getpwuid, getservbyname, getservbyport, getservent, setgrent, sethostent, setnetent, setprotoent, setpwent, setservent">
<meta name="author"         content="Redaktion SELFHTML, selfhtml81@selfhtml.org">
<meta name="robots"         content="noindex, nofollow">
<meta name="DC.Publisher"   content="SELFHTML e. V.">
<meta name="DC.Date"        content="2005-11-06T15:17:41+01:00">
<meta name="DC.Identifier"  content="http://de.selfhtml.org/perl/funktionen/konfiguration.htm">
<meta name="DC.Language"    content="de">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.created" content="2001-10-27T08:00+01:00">
<meta name="SELF.Pagetype"  content="page">
<link rel="alternate" type="application/atom+xml" title="SELFHTML-Weblog (Atom, gesamt)" href="http://aktuell.de.selfhtml.org/weblog/atom-feed">
<link rel="alternate" type="application/rss+xml" title="SELFHTML-Weblog (RSS, Auszüge)" href="http://aktuell.de.selfhtml.org/weblog/rss-feed">
<link rel="shortcut icon" type="image/x-icon" href="../../src/favicon.ico">
<link rel="author" title="Impressum" href="../../editorial/impressum.htm">
<link rel="contents" title="Inhaltsverzeichnis" href="../../navigation/inhalt.htm">
<link rel="index" title="Stichwortverzeichnis" href="../../navigation/stichwort.htm">
<link rel="search" title="Suche" href="../../navigation/suche/index.htm">
<link rel="help" title="Hilfe" href="../../editorial/index.htm">
<link rel="copyright" title="Urheberrecht" href="../../editorial/copyright.htm">
<link rel="top" title="SELFHTML" href="../../index.htm">
<link rel="up" title="Perl-Funktionen" href="index.htm">
<link rel="next" title="Funktionen für Module und Packages" href="module.htm">
<link rel="prev" title="Funktionen für Betriebssystemaufrufe" href="systemaufrufe.htm">
<link rel="first" title="Funktionen für Zeichenketten" href="zeichenketten.htm">
<link rel="last" title="Funktionen für Module und Packages" href="module.htm">
</head>
<body>

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td colspan="2" class="nav"><a class="an" name="top"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Perl</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Perl-Funktionen</a></td>
</tr>
<tr>
<td class="doc" width="110"><a href="../../index.htm"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></a></td>
<td class="docbot" width="100%"><h1 class="ph1">Funktionen für Informationen aus Konfigurationsdateien</h1></td>
</tr>
<tr>
<td class="doctop">
<img src="../../src/dokx.gif" width="30" height="20" vspace="6" alt="Informationsseite">
</td>
<td valign="top" nowrap="nowrap">
<p>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#allgemeines">Allgemeines zu diesen Funktionen</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endgrent">endgrent</a> - zum Ende von <var>/etc/groups</var> springen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endhostent">endhostent</a> - zum Ende von <var>/etc/hosts</var> springen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endnetent">endnetent</a> - zum Ende von <var>/etc/networks</var> springen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endprotoent">endprotoent</a> - zum Ende von <var>/etc/protocols</var> springen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endpwent">endpwent</a> - zum Ende von <var>/etc/passwd</var> springen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endservent">endservent</a> - zum Ende von <var>/etc/services</var> springen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getgrent">getgrent</a> - nächsten Eintrag von <var>/etc/groups</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getgrgid">getgrgid</a> - Eintrag mit bestimmter Gruppen-ID aus <var>/etc/groups</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getgrnam">getgrnam</a> - Eintrag mit bestimmtem Gruppennamen aus <var>/etc/groups</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#gethostbyaddr">gethostbyaddr</a> - Eintrag mit bestimmter IP aus <var>/etc/hosts</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#gethostbyname">gethostbyname</a> - Eintrag mit bestimmtem Hostnamen aus <var>/etc/hosts</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#gethostent">gethostent</a> - nächsten Eintrag von <var>/etc/hosts</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getlogin">getlogin</a> - Namen des aktuellen Benutzers ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getnetbyaddr">getnetbyaddr</a> - Eintrag mit bestimmter IP aus <var>/etc/networks</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getnetbyname">getnetbyname</a> - Eintrag mit bestimmtem Netzwerknamen aus <var>/etc/networks</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getnetent">getnetent</a> - nächsten Eintrag von <var>/etc/networks</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getprotobyname">getprotobyname</a> - Eintrag mit bestimmtem Protokollnamen aus <var>/etc/protocols</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getprotobynumber">getprotobynumber</a> - Eintrag mit bestimmter Protokollnummer aus <var>/etc/protocols</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getprotoent">getprotoent</a> - nächsten Eintrag von <var>/etc/protocols</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getpwent">getpwent</a> - nächsten Eintrag von <var>/etc/passwd</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getpwnam">getpwnam</a> - Eintrag mit bestimmtem Benutzernamen aus <var>/etc/passwd</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getpwuid">getpwuid</a> - Eintrag mit bestimmter Benutzernummer aus <var>/etc/passwd</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getservbyname">getservbyname</a> - Eintrag mit bestimmtem Portnamen aus <var>/etc/services</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getservbyport">getservbyport</a> - Eintrag mit bestimmter Portnummer aus <var>/etc/services</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getservent">getservent</a> - nächsten Eintrag von <var>/etc/services</var> ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#setgrent">setgrent</a> - zum Anfang von <var>/etc/groups</var> springen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#sethostent">sethostent</a> - zum Anfang von <var>/etc/hosts</var> springen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#setnetent">setnetent</a> - zum Anfang von <var>/etc/networks</var> springen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#setprotoent">setprotoent</a> - zum Anfang von <var>/etc/protocols</var> springen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#setpwent">setpwent</a> - zum Anfang von <var>/etc/passwd</var> springen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#setservent">setservent</a> - zum Anfang von <var>/etc/services</var> springen<br>
</p>
</td>
</tr><tr><td colspan="2" class="doc">&nbsp;<a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a>&nbsp;</td></tr>
</table>



<h2><a class="an" name="allgemeines">Allgemeines zu diesen Funktionen</a></h2>

<p>Die hier versammelten Funktionen dienen dazu, Einträge aus System-Konfigurationsdateien zu ermitteln. Es handelt sich dabei ausschließlich um Konfigurationsdaten von Unix-Systemen. Der Vorteil der hier beschriebenen Funktionen gegenüber dem direkten Auslesen jener Dateien ist, dass sie rechnerunabhängig sind, d.h. die Befehle funktionieren auch dann, wenn ein Unix-System anders als im Normalfall konfiguriert ist und die entsprechenden Dateien an anderen Orten liegen.</p>

<p>Die relevanten Konfigurationsdateien werden im folgenden kurz vorgestellt. Die Pfadnamen entsprechen der üblichen Ablage.</p>

<h3 class="inf"><a name="group">Konfigurationsdatei: <var>/etc/group</var></a></h3>

<p>In dieser Datei werden Berechtigungsgruppen und deren Mitglieder gespeichert. Eine Berechtigungsgruppe kann bestimmte Rechte an Dateien und Verzeichnissen besitzen, die einem ihrer Mitglieder gehören. Neben Einträgen für "menschliche" Berechtigungsgruppen enthält die Datei auch solche für reservierte, rechnereigene Berechtigungsgruppen, wie beispielsweise <code>mail</code>, <code>bin</code> oder <code>tty</code>. Passwörter sind in dieser Datei nur verschlüsselt gespeichert.<br>
Typische Daten (Beispiel):<br>
<code>root&nbsp;&nbsp;x&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;root</code><br>
<code>bin&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;root bin daemon</code><br>
<code>sys&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;101&nbsp;&nbsp;root bin sys</code><br>
Jede Zeile der Datei enthält den Namen einer Berechtigungsgruppe, dahinter (verschlüsselt) deren Passwort, dahinter die Gruppennummer (GID) und dahinter die Liste der Mitglieder der Gruppe.<br>
Funktionen zu dieser Datei sind <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endgrent">endgrent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getgrent">getgrent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getgrgid">getgrgid</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getgrnam">getgrnam</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#setgrent">setgrent</a><br>
Im Beispiel zur Funktion <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getgrent">getgrent</a> wird gezeigt, wie Sie die komplette Datei <var>/etc/groups</var> ausgeben können. Dadurch gewinnen Sie einen vollständigen Überblick über den Inhalt der Datei.</p>

<h3 class="inf"><a name="hosts">Konfigurationsdatei: <var>/etc/hosts</var></a></h3>

<p>In dieser Datei werden IP-Adressen und Domain-Namen oder Rechnernamen zugeordnet, die der Rechner selber auflösen muss.<br>
Typische Daten (Beispiel):<br>
<code>127.0.0.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localhost</code><br>
<code>192.168.10.101&nbsp;&nbsp;sonne.galaxis.de&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sonne</code><br>
<code>192.168.85.1&nbsp;&nbsp;&nbsp;&nbsp;zeus.edu.saxedu.de&nbsp;&nbsp;&nbsp;zeus</code><br>
Jede Zeile der Datei enthält eine IP-Adresse, dahinter den offiziellen Domain-Namen und dahinter wahlweise den internen Rechnernamen, jeweils durch Leerzeichen oder Tabulatoren getrennt. Hinter dem internen Rechnernamen kann wahlweise auch noch ein Aliasname folgen.<br>
Funktionen zu dieser Datei sind <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endhostent">endhostent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#gethostbyaddr">gethostbyaddr</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#gethostbyname">gethostbyname</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#gethostent">gethostent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#sethostent">sethostent</a><br>
Im Beispiel zur Funktion <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#gethostent">gethostent</a> wird gezeigt, wie Sie die komplette Datei <var>/etc/hosts</var> ausgeben können. Dadurch gewinnen Sie einen vollständigen Überblick über den Inhalt der Datei.</p>

<h3 class="inf"><a name="networks">Konfigurationsdatei: <var>/etc/networks</var></a></h3>

<p>In dieser Datei werden Netzwerknamen und zugehörige IP-Adressen einander zugeordnet. Dabei wird oft auch der Adresstyp und die Netznummer angegeben.<br>
Typische Daten (Beispiel):<br>
<code>loopback&nbsp;&nbsp;127.0.0.0&nbsp;&nbsp;2&nbsp;&nbsp;2130706432</code><br>
Jede Zeile der Datei enthält einen Netzwerknamen, die zugehörige Netzwerk-IP-Adresse, den Adresstyp und die Netznummer.<br>
Funktionen zu dieser Datei sind <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endnetent">endnetent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getnetbyaddr">getnetbyaddr</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getnetbyname">getnetbyname</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getnetent">getnetent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#setnetent">setnetent</a><br>
Im Beispiel zur Funktion <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getnetent">getnetent</a> wird gezeigt, wie Sie die komplette Datei <var>/etc/networks</var> ausgeben können. Dadurch gewinnen Sie einen vollständigen Überblick über den Inhalt der Datei.</p>

<h3 class="inf"><a name="passwd">Konfigurationsdatei: <var>/etc/passwd</var></a></h3>

<p>In dieser Datei werden alle wichtigen Daten aller Benutzer gespeichert, die Zugang zum Rechner haben. Dazu gehören z.B. die Benutzernamen, ihre Passwörter, die Benutzernummern (UIDs) und die Heimatverzeichnisse der Anwender. Neben Einträgen für normale Benutzer enthält die Datei auch solche für reservierte Benutzer, wie beispielsweise <code>root</code> (auf emanzipierten Rechnern auch <code>ruth</code>), <code>daemon</code> oder <code>ftp</code> (für den anonymen FTP-Zugang). Passwörter sind in dieser Datei nur verschlüsselt gespeichert.<br>
Typische Daten (Beispiel):<br>
<code>root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/mysh</code><br>
<code>bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/mysh</code><br>
<code>customer&nbsp;&nbsp;x&nbsp;&nbsp;29&nbsp;&nbsp;29&nbsp;&nbsp;Kunde&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/usr/lib/kunde&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/mysh</code><br>
Jede Zeile der Datei enthält den Benutzernamen, das zugehörige Passwort (verschlüsselt), die zugehörige Benutzernummer (UID), die Nummer seiner Berechtigungsgruppe (GID), beschreibende Angaben zum Benutzer, sein Heimatverzeichnis auf dem Rechner, seine Shell (Instanz des Kommando-Interpreters), und gegebenenfalls Angaben zum Verfallsdatum der Gültigkeit des Eintrags.<br>
Funktionen zu dieser Datei sind <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endpwent">endpwent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getpwent">getpwent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getpwnam">getpwnam</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getpwuid">getpwuid</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#setpwent">setpwent</a><br>
Im Beispiel zur Funktion <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getpwent">getpwent</a> wird gezeigt, wie Sie die komplette Datei <var>/etc/passwd</var> ausgeben können. Dadurch gewinnen Sie einen vollständigen Überblick über den Inhalt der Datei.</p>

<h3 class="inf"><a name="protocols">Konfigurationsdatei: <var>/etc/protocols</var></a></h3>

<p>In dieser Datei sind die Protokollnamen und Protokollnummern der Transportprotokolle eingetragen, die das System unterstützt.<br>
Typische Daten (Beispiel):<br>
<code>ip&nbsp;&nbsp;&nbsp;&nbsp;IP&nbsp;&nbsp;&nbsp;&nbsp;0</code><br>
<code>icmp&nbsp;&nbsp;ICMP&nbsp;&nbsp;1</code><br>
<code>igmp&nbsp;&nbsp;IGMP&nbsp;&nbsp;2</code><br>
<code>ggp&nbsp;&nbsp;&nbsp;GGP&nbsp;&nbsp;&nbsp;3</code><br>
<code>tcp&nbsp;&nbsp;&nbsp;TCP&nbsp;&nbsp;&nbsp;6</code><br>
Jede Zeile der Datei enthält den Namen des Transportprotokolls, die Protokollnummer und den Aliasnamen des Protokolls.<br>
Funktionen zu dieser Datei sind <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endprotoent">endprotoent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getprotobyname">getprotobyname</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getprotobynumber">getprotobynumber</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getprotoent">getprotoent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#setprotoent">setprotoent</a><br>
Im Beispiel zur Funktion <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getprotoent">getprotoent</a> wird gezeigt, wie Sie die komplette Datei <var>/etc/protocols</var> ausgeben können. Dadurch gewinnen Sie einen vollständigen Überblick über den Inhalt der Datei.</p>

<h3 class="inf"><a name="services">Konfigurationsdatei: <var>/etc/services</var></a></h3>

<p>In dieser Datei werden die Namen von Netzwerkdiensten sowie die zugehörigen Portnummern und Protokollnamen gespeichert.<br>
Typische Daten (Beispiel):<br>
<code>ftp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;tcp</code><br>
<code>telnet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;tcp</code><br>
<code>smtp&nbsp;&nbsp;mail&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;tcp</code><br>
<code>whois&nbsp;&nbsp;nicname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;tcp</code><br>
<code>domain&nbsp;&nbsp;nameserver&nbsp;&nbsp;53&nbsp;&nbsp;tcp</code><br>
<code>gopher&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;70&nbsp;&nbsp;tcp</code><br>
<code>finger&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;79&nbsp;&nbsp;tcp</code><br>
<code>www&nbsp;&nbsp;http&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;80&nbsp;&nbsp;tcp</code><br>
<code>www&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;80&nbsp;&nbsp;udp</code><br>
Funktionen zu dieser Datei sind <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#endservent">endservent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getservbyname">getservbyname</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getservbyport">getservbyport</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getservent">getservent</a>&nbsp;<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#setservent">setservent</a><br>
Im Beispiel zur Funktion <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getservent">getservent</a> wird gezeigt, wie Sie die komplette Datei <var>/etc/services</var> ausgeben können. Dadurch gewinnen Sie einen vollständigen Überblick über den Inhalt der Datei.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="endgrent">endgrent - zum Ende von <var>/etc/groups</var> springen</a></h2>

<p>Springt an das Ende der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#group">/etc/group</a> und beendet den Zugriff darauf.</p>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
my $Wert = getgrent();
print "$Wert\n";
endgrent();
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getgrent">getgrent</a> den ersten Eintrag aus <var>/etc/groups</var>, gibt den ermittelten Wert aus und springt dann ans Ende der Datei.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="endhostent">endhostent - zum Ende von <var>/etc/hosts</var> springen</a></h2>

<p>Springt an das Ende der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#hosts">/etc/hosts</a> und beendet den Zugriff darauf.</p>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
my $Wert = gethostent();
print "$Wert\n";
endhostent();
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#gethostent">gethostent</a> den ersten Eintrag aus <var>/etc/hosts</var>, gibt den ermittelten Wert aus und springt dann ans Ende der Datei.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="endnetent">endnetent - zum Ende von <var>/etc/networks</var> springen</a></h2>

<p>Springt an das Ende der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#networks">/etc/networks</a> und beendet den Zugriff darauf.</p>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
my $Wert = getnetent();
print "$Wert\n";
endnetent();
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getnetent">getnetent</a> den ersten Eintrag aus <var>/etc/networks</var>, gibt den ermittelten Wert aus und springt dann ans Ende der Datei.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="endprotoent">endprotoent - zum Ende von <var>/etc/protocols</var> springen</a></h2>

<p>Springt an das Ende der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#protocols">/etc/protocols</a> und beendet den Zugriff darauf.</p>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
my $Wert = getprotoent();
print "$Wert\n";
endprotent();
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getprotoent">getprotoent</a> den ersten Eintrag aus <var>/etc/protocols</var>, gibt den ermittelten Wert aus und springt dann ans Ende der Datei.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="endpwent">endpwent - zum Ende von <var>/etc/passwd</var> springen</a></h2>

<p>Springt an das Ende der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#passwd">/etc/passwd</a> und beendet den Zugriff darauf.</p>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
my $Wert = getpwent();
print "$Wert\n";
endpwent();
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getpwent">getpwent</a> den ersten Eintrag aus <var>/etc/passwd</var>, gibt den ermittelten Wert aus und springt dann ans Ende der Datei.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="endservent">endservent - zum Ende von <var>/etc/services</var> springen</a></h2>

<p>Springt an das Ende der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#services">/etc/services</a> und beendet den Zugriff darauf.</p>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
my $Wert = getservent();
print "$Wert\n";
endservent();
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt mit <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#getservent">getnetent</a> den ersten Eintrag aus <var>/etc/services</var>, gibt den ermittelten Wert aus und springt dann ans Ende der Datei.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getgrent">getgrent - nächsten Eintrag von <var>/etc/groups</var> ermitteln</a></h2>

<p>Ermittelt im skalaren Kontext den jeweils nächsten Eintrag aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#group">/etc/group</a> oder den Listenkontext einer Liste mit vier Elementen.</p>

<p>Erwartet keine Parameter.</p>

<p>Gibt je nach Kontext entweder den nächsten Dateieintrag oder die Liste zurück. Bei Dateiende wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my @Liste = getgrent();
while(@Liste) {
  print "$Liste[0]]  $Liste[1]  $Liste[2]  $Liste[3]\n";
  @Liste = getgrent();
}

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel zeigt, wie Sie alle Einträge der Datei <var>/etc/groups</var> mit einem CGI-Script ausgeben lassen können. Zunächst wird <code>getgrent</code> erstmals aufgerufen. Der Rückgabewert wird als Listenkontext interpretiert und im Array <code>@Liste</code> gespeichert. Solange die Liste einen Inhalt enthält - <code>while(@Liste)</code> - werden die vier Elemente des Arrays ausgegeben, und <code>getgrent</code> wird für den nächsten Schleifendurchgang aufgerufen. Die vier Elemente des Arrays, die von der Funktion zurückgegeben werden, sind:<br>
<code>$Liste[0]</code> = Name der Berechtigungsgruppe,<br>
<code>$Liste[1]</code> = Passwort der Berechtigungsgruppe (verschlüsselt),<br>
<code>$Liste[2]</code> = Nummer der Berechtigungsgruppe (GID),<br>
<code>$Liste[3]</code> = Mitgliedernamen der Berechtigungsgruppe</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getgrgid">getgrgid - Eintrag mit bestimmter Gruppen-ID aus <var>/etc/groups</var> ermitteln</a></h2>

<p>Ermittelt aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#group">/etc/group</a> den zugehörigen Eintrag zu einer bestimmten Gruppen-ID (GID). Im skalaren Kontext wird dabei der zugehörige Gruppenname ermittelt, im Listenkontext der gesamte Eintrag zur GID.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> die gewünschte GID.</p>

<p>Gibt je nach Kontext entweder den Gruppennamen oder die Liste zurück. Wenn die angegebene GID nicht gefunden wurde, wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";

($Name,$Passwort,$Gid,$Mitglieder) = getgrgid(2);
print "&lt;h3&gt;Listenkontext:&lt;/h3&gt;";
print "&lt;pre&gt;$Name\n$GrPasswort\n$Gid\n$Mitglieder&lt;/pre&gt;";

print "&lt;h3&gt;Skalarer Kontext:&lt;/h3&gt;&lt;pre&gt;";
my $Wert = getgrgid(2);
print "&lt;pre&gt;$Wert&lt;/pre&gt;\n";

print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ruft insgesamt zweimal die Funktion <code>getgrgid</code> auf, zuerst im Listenkontext, später im skalaren Kontext. In beiden Fällen wird <code>2</code> als gesuchte Gruppennummer (GID) übergeben. Im Listenkontext wird der gesamte gefundene Eintrag, bestehend aus Gruppenname, Gruppenpasswort (verschlüsselt), Gruppennummer und Mitgliedernamen, vom Script ausgegeben. Im skalaren Kontext wird nur der zur Gruppennummer gehörige Gruppenname ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getgrnam">getgrnam - Eintrag mit bestimmtem Gruppennamen aus <var>/etc/groups</var> ermitteln</a></h2>

<p>Ermittelt aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#group">/etc/group</a> den zugehörigen Eintrag zu einem bestimmten Gruppennamen. Im skalaren Kontext wird dabei die Gruppen-ID (GID) des angegebenen Namens ermittelt, im Listenkontext der gesamte Eintrag zu dem Gruppennamen.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den gewünschten Gruppennamen.</p>

<p>Gibt je nach Kontext entweder die zugehörige Gruppennummer (GID) oder die Liste zurück. Wenn der angegebene Gruppenname nicht gefunden wurde, wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";

(my $Name, my $Passwort, my $Gid, my $Mitglieder) = getgrnam("mail");
print "&lt;h3&gt;Listenkontext:&lt;/h3&gt;";
print "&lt;pre&gt;$Name\n$Passwort\n$Gid\n$Mitglieder&lt;/pre&gt;";

print "&lt;h3&gt;Skalarer Kontext:&lt;/h3&gt;";
my $Wert = getgrnam("mail");
print "&lt;pre&gt;$Wert&lt;/pre&gt;\n";

print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ruft insgesamt zweimal die Funktion <code>getgrnam</code> auf, zuerst im Listenkontext, später im skalaren Kontext. In beiden Fällen wird <code>"mail"</code> als gesuchter Gruppenname übergeben. Im Listenkontext wird der gesamte gefundene Eintrag, bestehend aus Gruppenname, Gruppenpasswort (verschlüsselt), Gruppennummer und Mitgliedernamen, vom Script ausgegeben. Im skalaren Kontext wird nur die zum Gruppennamen gehörige Gruppennummer (GID) ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="gethostbyaddr">gethostbyaddr - Eintrag mit bestimmter IP aus <var>/etc/hosts</var> ermitteln</a></h2>

<p>Ermittelt aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#hosts">/etc/hosts</a> den Hostnamen zu einer bestimmten IP-Adresse.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> die gewünschte IP-Adresse, und zwar numerisch in binärer Schreibweise.<br>
<strong>2.</strong> den Adresstyp der IP-Adresse (numerisch).</p>

<p>Gibt den zugehörigen Hostnamen zurück. Wenn die angegebene IP-Adresse nicht gefunden wurde, wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

use Socket;
my $addr = inet_aton("127.0.0.1");
my $Wert  = gethostbyaddr($addr, AF_INET);
print "$Wert\n";

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel zeigt, wie Sie den Hostnamen zu einer IP-Adresse auf dem Rechner ermitteln können. Um die etwas komplizierte Parameterversorgung der Funktion <code>gethostbyaddr</code> sicherzustellen, wird das <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../module/standardmodule.htm">Standardmodul</a> <code>Socket</code> verwendet. Durch Aufruf der Modul-Funktion <code>inet_aton</code> wird eine in üblicher Schreibweise notierte, übergebene IP-Adresse in die erforderliche binäre Form umgewandelt. Das Ergebnis wird in dem Skalar <code>$addr</code> gespeichert. Das Modul <code>Socket</code> stellt auch Konstanten für den Adresstyp zur Verfügung. Die korrekte Konstante für den zweiten Parameter von <code>gethostbyaddr</code> ist <code>AF_INET</code>. Durch Übergabe von <code>$addr</code> und <code>AF_INET</code> wird <code>gethostbyaddr</code> richtig versorgt und gibt den Hostnamen zur Beispieladresse <code>127.0.0.1</code> aus (üblicherweise <code>localhost</code>).</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="gethostbyname">gethostbyname - Eintrag mit bestimmtem Hostnamen aus <var>/etc/hosts</var> ermitteln</a></h2>

<p>Ermittelt aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#hosts">/etc/hosts</a> die IP-Adresse zu einem bestimmten Hostnamen.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den gewünschten Hostnamen.</p>

<p>Gibt die zugehörige IP-Adresse zurück, allerdings binär numerisch.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

use Socket;
my $addr  = gethostbyname("localhost");
my $Wert = inet_ntoa($addr);
print "$Wert";

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel zeigt, wie Sie die IP-Adresse zu einem Hostnamen auf dem Rechner ermitteln können. Dazu wird das <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../module/standardmodule.htm">Standardmodul</a> <code>Socket</code> verwendet. Damit lässt sich der binär numerische Rückgabewert von <code>gethostbyname</code>, der im Beispiel in dem Skalar <code>$addr</code> gespeichert wird, bequem in die übliche Schreibweise konvertieren. Durch Aufruf der Modul-Funktion <code>inet_ntoa</code> wird <code>$addr</code> in die übliche Schreibweise umgewandelt. Das Ergebnis der Konvertierung wird im Beispiel in dem Skalar <code>$Wert</code> gespeichert. Anschließend wird die IP-Adresse zu dem Hostnamen <code>localhost</code> ausgegeben (üblicherweise <code>127.0.0.1</code>).</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="gethostent">gethostent - nächsten Eintrag von <var>/etc/hosts</var> ermitteln</a></h2>

<p>Ermittelt im skalaren Kontext den jeweils nächsten Eintrag aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#hosts">/etc/hosts</a> oder im Listenkontext eine Liste mit fünf und mehr Elementen.</p>

<p>Erwartet keine Parameter.</p>

<p>Gibt je nach Kontext entweder den nächsten Dateieintrag oder die Liste zurück. Bei Dateiende wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my @Liste = gethostent();
while(@Liste) {
  print "$Liste[0]   $Liste[1]   $Liste[2]";
  for(my $i = 0; $i &lt; $Liste[3]; $i++) {
    (my $a, my $b, my $c, my $d) = unpack('C4',$Liste[4+$i]);
    print "  $a.$b.$c.$d";
  }
  print "\n";
  @Liste = gethostent();
}

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel zeigt, wie Sie alle Einträge der Datei <var>/etc/hosts</var> mit einem CGI-Script ausgeben lassen können. Zunächst wird <code>gethostent</code> erstmals aufgerufen. Der Rückgabewert wird als Listenkontext interpretiert und im Array <code>@Liste</code> gespeichert. Solange die Liste einen Inhalt enthält - <code>while(@Liste)</code> - werden die Elemente der Liste ausgegeben, und <code>getgrent</code> wird für den nächsten Schleifendurchgang aufgerufen. Die Liste enthält als letztes Listenelement wiederum eine Liste, sodass eine weitere innere <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/schleifen.htm#for">for-Schleife</a> nötig ist, um alle Elemente zu ermitteln.
Die Elemente der Liste, die von der Funktion zurückgegeben wird, sind:<br>
<code>$Liste[0]</code> = Hostname,<br>
<code>$Liste[1]</code> = Aliasnamen des Hostnamens,<br>
<code>$Liste[2]</code> = Adresstyp,<br>
<code>$Liste[3]</code> = Anzahl der noch folgenden Listenelemente<br>
<code>$Liste[4]</code> und weitere = zugeordnete IP-Adressen<br>
Die zugeordneten IP-Adressen sind binär gespeichert. Um die übliche Vier-Zahlen-Darstellung zu erhalten, muss die binäre Schreibweise erst konvertiert werden. Das ist durch Anwendung der Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="zeichenketten.htm#unpack">unpack</a> mit <code>C4</code> als erstem Parameter möglich, so wie im obigen Beispiel. Dort werden auf diese Weise die vier Einzelzahlen der IP-Adresse ermittelt und in den Skalaren <code>$a</code>, <code>$b</code>, <code>$c</code> und <code>$d</code> gespeichert.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getlogin">getlogin - Namen des aktuellen Benutzers ermitteln</a></h2>

<p>Erwartet keine Parameter.</p>

<p>Gibt den Loginnamen des aktuellen Benutzers zurück.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
my $Wert = getlogin();
print "$Wert\n";
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt den Loginnamen mit <code>getlogin</code>, speichert ihn in dem Skalar <code>$Wert</code> und gibt diesen zur Kontrolle aus.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getnetbyaddr">getnetbyaddr - Eintrag mit bestimmter IP aus <var>/etc/networks</var> ermitteln</a></h2>

<p>Ermittelt aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#networks">/etc/networks</a> den Netzwerknamen zu einer bestimmten IP-Adresse.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> die gewünschte IP-Adresse, und zwar numerisch in binärer Schreibweise.<br>
<strong>2.</strong> den Adresstyp der IP-Adresse (numerisch).</p>

<p>Gibt den zugehörigen Netzwerknamen zurück. Wenn die angegebene IP-Adresse nicht gefunden wurde, wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

use Socket;
my $addr = inet_aton("127.0.0.0");
my $Wert  = getnetbyaddr($addr, AF_INET);
print "$Wert\n";

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel zeigt, wie Sie den Netzwerknamen zu einer IP-Adresse auf dem Rechner ermitteln können. Um die etwas komplizierte Parameterversorgung der Funktion <code>getnetbyaddr</code> sicherzustellen, wird das <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../module/standardmodule.htm">Standardmodul</a> <code>Socket</code> verwendet. Durch Aufruf der Modul-Funktion <code>inet_aton</code> wird eine in üblicher Schreibweise notierte, übergebene IP-Adresse in die erforderliche binäre Form umgewandelt. Das Ergebnis wird in dem Skalar <code>$addr</code> gespeichert. Das Modul <code>Socket</code> stellt auch Konstanten für den Adresstyp zur Verfügung. Die korrekte Konstante für den zweiten Parameter von <code>gethostbyaddr</code> ist <code>AF_INET</code>. Durch Übergabe von <code>$addr</code> und <code>AF_INET</code> wird <code>getnetbyaddr</code> richtig versorgt und gibt den Netzwerknamen zur Beispieladresse <code>127.0.0.0</code> aus (üblicherweise <code>loopback</code>).</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getnetbyname">getnetbyname - Eintrag mit bestimmtem Netzwerknamen aus <var>/etc/networks</var> ermitteln</a></h2>

<p>Ermittelt aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#hosts">/etc/networks</a> die IP-Adresse zu einem bestimmten Netzwerknamen.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den gewünschten Netzwerknamen.</p>

<p>Gibt die zugehörige IP-Adresse zurück, allerdings binär numerisch.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

use Socket;
my $addr  = getnetbyname("loopback");
my $Wert = inet_ntoa($addr);
print "$Wert";

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel zeigt, wie Sie die IP-Adresse zu einem Netzwerknamen auf dem Rechner ermitteln können. Dazu wird das <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../module/standardmodule.htm">Standardmodul</a> <code>Socket</code> verwendet. Damit lässt sich der binär numerische Rückgabewert von <code>getnetbyname</code>, der im Beispiel in dem Skalar <code>$addr</code> gespeichert wird, bequem in die übliche Schreibweise konvertieren. Durch Aufruf der Modul-Funktion <code>inet_ntoa</code> wird <code>$addr</code> in die übliche Schreibweise umgewandelt. Das Ergebnis der Konvertierung wird im Beispiel in dem Skalar <code>$Wert</code> gespeichert. Anschließend wird die IP-Adresse zu dem Netzwerknamen <code>loopback</code> ausgegeben (üblicherweise <code>127.0.0.0</code>).</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getnetent">getnetent - nächsten Eintrag von <var>/etc/networks</var> ermitteln</a></h2>

<p>Ermittelt im skalaren Kontext den jeweils nächsten Eintrag aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#networks">/etc/networks</a> oder im Listenkontext eine Liste mit vier Elementen.</p>

<p>Erwartet keine Parameter.</p>

<p>Gibt je nach Kontext entweder den nächsten Dateieintrag oder die Liste zurück. Bei Dateiende wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my @Liste = getnetent();
while(@Liste) {
  print "$Liste[0]  $Liste[1]  $Liste[2]  $Liste[3]\n";
  @Liste = getnetent();
}

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel zeigt, wie Sie alle Einträge der Datei <var>/etc/networks</var> mit einem CGI-Script im Browser ausgeben können. Zunächst wird <code>getnetent</code> erstmals aufgerufen. Der Rückgabewert wird als Listenkontext interpretiert und im Array <code>@Liste</code> gespeichert. Solange die Liste einen Inhalt enthält - <code>while(@Liste)</code> - werden die vier Elemente der Liste ausgegeben, und <code>getnetent</code> wird für den nächsten Schleifendurchgang aufgerufen. Die vier Elemente der Liste, die von der Funktion zurückgegeben wird, sind:<br>
<code>$Liste[0]</code> = Name des Netzwerks,<br>
<code>$Liste[1]</code> = Aliasnamen des Netzwerks,<br>
<code>$Liste[2]</code> = Adresstyp,<br>
<code>$Liste[3]</code> = Nummer des Netzwerks</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getprotobyname">getprotobyname - Eintrag mit bestimmtem Protokollnamen aus <var>/etc/protocols</var> ermitteln</a></h2>

<p>Ermittelt aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#protocols">/etc/protocols</a> die Protokollnummer zu einem bestimmten Protokollnamen.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den gewünschten Protokollnamen.</p>

<p>Gibt die zugehörige Protokollnummer zurück. Wenn der übergebene Protokollname nicht gefunden wurde, wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my $Wert = getprotobyname("tcp");
print "$Wert\n";

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt die Protokollnummer zum Protokoll <code>tcp</code>. Dazu dient der Aufruf <code>getprotobyname("tcp")</code>, dessen Rückgabewert im Skalar <code>$Wert</code> gespeichert wird. Zur Kontrolle wird der Wert ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getprotobynumber">getprotobynumber - Eintrag mit bestimmter Protokollnummer aus <var>/etc/protocols</var> ermitteln</a></h2>

<p>Ermittelt aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#protocols">/etc/protocols</a> den Protokollnamen zu einer bestimmten Protokollnummer.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> die gewünschte Protokollnummer.</p>

<p>Gibt den zugehörigen Protokollnamen zurück. Wenn die übergebene Protokollnummer nicht gefunden wurde, wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my $Wert = getprotobynumber(17);
print "$Wert\n";

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt den Protokollnamen zur Protokollnummer <code>17</code>. Dazu dient der Aufruf <code>getprotobynumber(17)</code>, dessen Rückgabewert im Skalar <code>$Wert</code> gespeichert wird. Zur Kontrolle wird der Wert ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getprotoent">getprotoent - nächsten Eintrag von <var>/etc/protocols</var> ermitteln</a></h2>

<p>Ermittelt im skalaren Kontext den jeweils nächsten Eintrag aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#protocols">/etc/protocols</a> oder im Listenkontext eine Liste mit drei Elementen.</p>

<p>Erwartet keine Parameter.</p>

<p>Gibt je nach Kontext entweder den nächsten Dateieintrag oder die Liste zurück. Bei Dateiende wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my @Liste = getprotoent();
while(@Liste) {
  print "$Liste[0]  $Liste[1]  $Liste[2]\n";
  @Liste = getprotoent();
}

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel zeigt, wie Sie alle Einträge der Datei <var>/etc/protocols</var> mit einem CGI-Script ausgeben lassen können. Zunächst wird <code>getprotoent</code> erstmals aufgerufen. Der Rückgabewert wird als Listenkontext interpretiert und im Array <code>@Liste</code> gespeichert. Solange die Liste einen Inhalt enthält - <code>while(@Liste)</code> - werden die vier Elemente der Liste ausgegeben, und <code>getnetent</code> wird für den nächsten Schleifendurchgang aufgerufen. Die drei Elemente der Liste, die von der Funktion zurückgegeben wird, sind:<br>
<code>$Liste[0]</code> = Protokollname,<br>
<code>$Liste[1]</code> = Protokollnummer,<br>
<code>$Liste[2]</code> = Aliasname des Protokolls</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getpwent">getpwent - nächsten Eintrag von <var>/etc/passwd</var> ermitteln</a></h2>

<p>Ermittelt im skalaren Kontext den jeweils nächsten Eintrag aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#passwd">/etc/passwd</a> oder im Listenkontext eine Liste mit bis zu neun Elementen.</p>

<p>Erwartet keine Parameter.</p>

<p>Gibt je nach Kontext entweder den nächsten Dateieintrag oder die Liste zurück. Bei Dateiende wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my @Liste = getpwent();
while(@Liste) {
  print "$Liste[0]  $Liste[1]  $Liste[2]  $Liste[3]  $Liste[4]  $Liste[5]  $Liste[6]  $Liste[7]  $Liste[8]\n";
  @Liste = getpwent();
}

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel zeigt, wie Sie alle Einträge der Datei <var>/etc/passwd</var> mit einem CGI-Script ausgeben lassen können. Zunächst wird <code>getpwent</code> erstmals aufgerufen. Der Rückgabewert wird als Listenkontext interpretiert und im Array <code>@Liste</code> gespeichert. Solange die Liste einen Inhalt enthält - <code>while(@Liste)</code> - werden die neun Elemente der Liste ausgegeben, und <code>getpwent</code> wird für den nächsten Schleifendurchgang aufgerufen. Die neun Elemente der Liste, die von der Funktion zurückgegeben wird, sind:<br>
<code>$Liste[0]</code> = Benutzername,<br>
<code>$Liste[1]</code> = Benutzerpasswort(verschlüsselt),<br>
<code>$Liste[2]</code> = Benutzernummer (UID),<br>
<code>$Liste[3]</code> = Nummer der zugehörigen Berechtigungsgruppe (GID),<br>
<code>$Liste[4]</code> = beschreibende Angaben,<br>
<code>$Liste[5]</code> = beschreibende Angaben,<br>
<code>$Liste[6]</code> = Heimatverzeichnis des Benutzers,<br>
<code>$Liste[7]</code> = Shell des Benutzers,<br>
<code>$Liste[8]</code> = (optional) Verfallszeitpunkt der Gültigkeit des Eintrags</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getpwnam">getpwnam - Eintrag mit bestimmtem Benutzernamen aus <var>/etc/passwd</var> ermitteln</a></h2>

<p>Ermittelt zu einem bestimmten Benutzernamen den Eintrag aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#passwd">/etc/passwd</a> den zugehörigen Eintrag. Im skalaren Kontext wird die Benutzernummer (UID) ermittelt, im Listenkontext eine Liste mit bis zu neun Elementen.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den gewünschten Benutzernamen.</p>

<p>Gibt im skalaren Kontext die zugehörige Benutzernummer (UID) und im Listenkontext eine Liste mit allen Daten des Eintrags zurück. Wenn der Benutzername nicht gefunden wurde, wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my @Liste = getpwnam("uucp");
print "$Liste[0]  $Liste[1]  $Liste[2]  $Liste[3]  $Liste[4]  $Liste[5]  $Liste[6]  $Liste[7]  $Liste[8]\n";

my $Wert = getpwnam("uucp");
print "$Wert\n";

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt für den Benutzernamen <code>uucp</code>, der der Funktion <code>getpwnam</code> übergeben wird, den zugehörigen Eintrag - zuerst im Listenkontext, und beim zweiten Aufruf im skalaren Kontext. Im Listenkontext werden alle neun Elemente des Eintrags ermittelt und im Array <code>@Liste</code> gespeichert, im skalaren Kontext nur die Benutzernummer (UID), gespeichert im Skalar <code>$Wert</code>. Das Beispiel gibt beide Aufrufergebnisse zur Kontrolle aus. Zur Bedeutung der Array-Elemente siehe Funktion <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#getpwent">getpwent</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getpwuid">getpwuid - Eintrag mit bestimmter Benutzernummer aus <var>/etc/passwd</var> ermitteln</a></h2>

<p>Ermittelt zu einer bestimmten Benutzernummer (UID) den Eintrag aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#passwd">/etc/passwd</a> den zugehörigen Eintrag. Im skalaren Kontext wird der Benutzername ermittelt, im Listenkontext eine Liste mit bis zu neun Elementen.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> die gewünschte Benutzernummer (UID).</p>

<p>Gibt im skalaren Kontext den zugehörigen Benutzernamen und im Listenkontext eine Liste mit allen Daten des Eintrags zurück. Wenn die Benutzernummer nicht gefunden wurde, wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my @Liste = getpwuid(2);
print "$Liste[0]  $Liste[1]  $Liste[2]  $Liste[3]  $Liste[4]  $Liste[5]  $Liste[6]  $Liste[7]  $Liste[8]\n";

my $Wert = getpwuid(2);
print "$Wert\n";

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt für die Benutzernummer <code>2</code>, der der Funktion <code>getpwuid</code> übergeben wird, den zugehörigen Eintrag - zuerst im Listenkontext, und beim zweiten Aufruf im skalaren Kontext. Im Listenkontext werden alle neun Elemente des Eintrags ermittelt und im Array <code>@Liste</code> gespeichert, im skalaren Kontext nur der Benutzername, gespeichert im Skalar <code>$Wert</code>. Das Beispiel gibt beide Aufrufergebnisse zur Kontrolle aus. Zur Bedeutung der Listenelemente siehe Funktion <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#getpwent">getpwent</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getservbyname">getservbyname - Eintrag mit bestimmtem Portnamen aus <var>/etc/services</var> ermitteln</a></h2>

<p>Ermittelt aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#services">/etc/services</a> die Portnummer zu einem bestimmten Netzwerkdienst.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den Namen des gewünschten Netzwerkdienstes,<br>
<strong>2.</strong> den Namen des gewünschten Protokolls.</p>

<p>Gibt die zugehörige Portnummer zurück. Wenn der übergebene Netzwerkname oder das Protokoll nicht gefunden wurde, wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my $Wert = getservbyname("www","tcp");
print "$Wert\n";

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt die Portnummer zum Netzwerkdienst <code>www</code> auf dem Netzwerkprotokoll <code>tcp</code>. Dazu dient der Aufruf <code>getservbyname("www","tcp")</code>, dessen Rückgabewert im Skalar <code>$Wert</code> gespeichert wird. Zur Kontrolle wird der Wert ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getservbyport">getservbyport - Eintrag mit bestimmter Portnummer aus <var>/etc/services</var> ermitteln</a></h2>

<p>Ermittelt aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#services">/etc/services</a> den Namen eines Netzwerkdienstes zu einer bestimmten Portnummer.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> die gewünschten Portnummer,<br>
<strong>2.</strong> den Namen des gewünschten Protokolls.</p>

<p>Gibt den Namen des zugehörigen Netzwerkdienstes zurück. Wenn die übergebene Portnummer oder das Protokoll nicht gefunden wurde, wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my $Wert = getservbyport(80,"tcp");
print "$Wert\n";

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt den Namen des Netzwerkdienstes mit der Portnummer <code>80</code> auf dem Netzwerkprotokoll <code>tcp</code>. Dazu dient der Aufruf <code>getservbyport(80,"tcp")</code>, dessen Rückgabewert im Skalar <code>$Wert</code> gespeichert wird. Zur Kontrolle wird der Wert ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="getservent">getservent - nächsten Eintrag von <var>/etc/services</var> ermitteln</a></h2>

<p>Ermittelt im skalaren Kontext den jeweils nächsten Eintrag aus der Datei <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#services">/etc/services</a> oder im Listenkontext eine Liste mit vier Elementen.</p>

<p>Erwartet keine Parameter.</p>

<p>Gibt je nach Kontext entweder den nächsten Dateieintrag oder die Liste zurück. Bei Dateiende wird <code>undef</code> zurückgegeben.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";

my @Liste = getservent();
while(@Liste) {
  print "$Liste[0]  $Liste[1]  $Liste[2]  $Liste[3]\n";
  @Liste = getservent();
}

print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel zeigt, wie Sie alle Einträge der Datei <var>/etc/services</var> mit einem CGI-Script ausgeben lassen können. Zunächst wird <code>getservent</code> erstmals aufgerufen. Der Rückgabewert wird als Listenkontext interpretiert und im Array <code>@Liste</code> gespeichert. Solange die Liste einen Inhalt enthält - <code>while(@Liste)</code> - werden die vier Elemente der Liste ausgegeben, und <code>getservent</code> wird für den nächsten Schleifendurchgang aufgerufen. Die vier Elemente der Liste, die von der Funktion zurückgegeben wird, sind:<br>
<code>$Liste[0]</code> = Name des Netzwerkdienstes,<br>
<code>$Liste[1]</code> = Aliasname des Netzwerkdienstes,<br>
<code>$Liste[2]</code> = Portnummer des Netzwerkdienstes,<br>
<code>$Liste[3]</code> = Name des zugehörigen Protokolls</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="setgrent">setgrent - zum Anfang von <var>/etc/groups</var> springen</a></h2>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
setgrent();
my $Wert = getgrent();
print "$Wert\n";
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel springt mit <code>setgrent</code> zum Anfang der Datei. Anschließend liest es mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#getgrent">getgrent</a> den nächsten, in dem Fall den ersten Eintrag der Datei aus. Der Rückgabewert, der im Skalar <code>$Wert</code> gespeichert ist, wird zur Kontrolle ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="sethostent">sethostent - zum Anfang von <var>/etc/hosts</var> springen</a></h2>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
sethostent();
my $Wert = gethostent();
print "$Wert\n";
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel springt mit <code>sethostent</code> zum Anfang der Datei. Anschließend liest es mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#gethostent">gethostent</a> den nächsten, in dem Fall den ersten Eintrag der Datei aus. Der Rückgabewert, der im Skalar <code>$Wert</code> gespeichert ist, wird zur Kontrolle ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="setnetent">setnetent - zum Anfang von <var>/etc/networks</var> springen</a></h2>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
setnetent();
my $Wert = getnetent();
print "$Wert\n";
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel springt mit <code>setnetent</code> zum Anfang der Datei. Anschließend liest es mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#getnetent">getnetent</a> den nächsten, in dem Fall den ersten Eintrag der Datei aus. Der Rückgabewert, der im Skalar <code>$Wert</code> gespeichert ist, wird zur Kontrolle ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="setprotoent">setprotoent - zum Anfang von <var>/etc/protocols</var> springen</a></h2>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
setprotoent();
my $Wert = getprotoent();
print "$Wert\n";
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel springt mit <code>setprotoent</code> zum Anfang der Datei. Anschließend liest es mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#getprotoent">getprotoent</a> den nächsten, in dem Fall den ersten Eintrag der Datei aus. Der Rückgabewert, der im Skalar <code>$Wert</code> gespeichert ist, wird zur Kontrolle ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="setpwent">setpwent - zum Anfang von <var>/etc/passwd</var> springen</a></h2>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
setpwent();
my $Wert = getpwent();
print "$Wert\n";
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel springt mit <code>setpwent</code> zum Anfang der Datei. Anschließend liest es mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#getpwent">getpwent</a> den nächsten, in dem Fall den ersten Eintrag der Datei aus. Der Rückgabewert, der im Skalar <code>$Wert</code> gespeichert ist, wird zur Kontrolle ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="setservent">setservent - zum Anfang von <var>/etc/services</var> springen</a></h2>

<p>Erwartet keine Parameter.</p>

<h3 class="xmp">Beispiel eines vollständigen CGI-Scripts in Perl:</h3>
<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
setservent();
my $Wert = getservent();
print "$Wert\n";
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel springt mit <code>setservent</code> zum Anfang der Datei. Anschließend liest es mit <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#getservent">getservent</a> den nächsten, in dem Fall den ersten Eintrag der Datei aus. Der Rückgabewert, der im Skalar <code>$Wert</code> gespeichert ist, wird zur Kontrolle ausgegeben.</p>



<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" class="doc">
&nbsp;<a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a>
</td></tr>
<tr><td class="doc"><a href="module.htm"><img src="../../src/next.gif" width="10" height="10" border="0" hspace="10" alt="weiter"></a></td>
<td width="100%"><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="module.htm">Funktionen für Module und Packages</a>
</td></tr>
<tr>
<td class="doc"><a href="systemaufrufe.htm"><img src="../../src/prev.gif" width="10" height="10" border="0" hspace="10" alt="zurück"></a></td>
<td><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="systemaufrufe.htm">Funktionen für Betriebssystemaufrufe</a>
</td>
</tr>
<tr><td colspan="2" class="doc">&nbsp;</td>
</tr>
<tr>
<td colspan="2" class="nav"><a class="an" name="bottom"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Perl</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Perl-Funktionen</a></td>
</tr>
</table>

<p>&copy; 2007 <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../editorial/impressum.htm">Impressum</a></p>

</body>
</html>
