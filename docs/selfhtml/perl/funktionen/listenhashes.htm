<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>SELFHTML: Perl / Funktionsreferenz / Funktionen für Listen bzw. Arrays und Hashes</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description" content="Welche Funktionen es in Perl gibt, um Listen bzw. Arrays und Hashes zu manipulieren, z.B. Elemente hinzufügen, löschen usw.">
<meta name="keywords" content="SELFHTML, CGI, Perl, Funktionen, Perl-Funktionen, Listen, Arrays, Hashes, , delete, each, exists, grep, join, keys, map, pop, push, reverse, shift, sort, splice, undef, unshift, values">
<meta name="author"         content="Redaktion SELFHTML, selfhtml81@selfhtml.org">
<meta name="robots"         content="noindex, nofollow">
<meta name="DC.Publisher"   content="SELFHTML e. V.">
<meta name="DC.Date"        content="2005-11-09T00:29:27+01:00">
<meta name="DC.Identifier"  content="http://de.selfhtml.org/perl/funktionen/listenhashes.htm">
<meta name="DC.Language"    content="de">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.created" content="2001-10-27T08:00+01:00">
<meta name="SELF.Pagetype"  content="page">
<link rel="alternate" type="application/atom+xml" title="SELFHTML-Weblog (Atom, gesamt)" href="http://aktuell.de.selfhtml.org/weblog/atom-feed">
<link rel="alternate" type="application/rss+xml" title="SELFHTML-Weblog (RSS, Auszüge)" href="http://aktuell.de.selfhtml.org/weblog/rss-feed">
<link rel="shortcut icon" type="image/x-icon" href="../../src/favicon.ico">
<link rel="author" title="Impressum" href="../../editorial/impressum.htm">
<link rel="contents" title="Inhaltsverzeichnis" href="../../navigation/inhalt.htm">
<link rel="index" title="Stichwortverzeichnis" href="../../navigation/stichwort.htm">
<link rel="search" title="Suche" href="../../navigation/suche/index.htm">
<link rel="help" title="Hilfe" href="../../editorial/index.htm">
<link rel="copyright" title="Urheberrecht" href="../../editorial/copyright.htm">
<link rel="top" title="SELFHTML" href="../../index.htm">
<link rel="up" title="Perl-Funktionen" href="index.htm">
<link rel="next" title="Funktionen für Berechnungen" href="berechnungen.htm">
<link rel="prev" title="Funktionen für Zeichenketten" href="zeichenketten.htm">
<link rel="first" title="Funktionen für Zeichenketten" href="zeichenketten.htm">
<link rel="last" title="Funktionen für Module und Packages" href="module.htm">
</head>
<body>

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td colspan="2" class="nav"><a class="an" name="top"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Perl</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Perl-Funktionen</a></td>
</tr>
<tr>
<td class="doc" width="110"><a href="../../index.htm"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></a></td>
<td class="docbot" width="100%"><h1 class="ph1">Funktionen für Listen bzw. Arrays und Hashes</h1></td>
</tr>
<tr>
<td class="doctop">
<img src="../../src/dokx.gif" width="30" height="20" vspace="6" alt="Informationsseite">
</td>
<td valign="top" nowrap="nowrap">
<p>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#allgemeines">Allgemeines zu diesen Funktionen</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#delete">delete</a> - Elementpaar aus Hash löschen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#each">each</a> - nächstes Elementpaar aus Hash ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#exists">exists</a> - Ermitteln ob ein Hash-Name existiert<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#grep">grep</a> - Teilliste aus Liste durch Bedingung extrahieren<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#join">join</a> - Liste in Zeichenkette verwandeln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#keys">keys</a> - Alle Namen eines Hashes ermitteln<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#map">map</a> - Befehle auf alle Listenelemente anwenden<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#pop">pop</a> - letztes Element eines Arrays löschen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#push">push</a> - Elemente an einen Array anhängen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#reverse">reverse</a> - Reihenfolge der Listenelemente umkehren<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#shift">shift</a> - erstes Element eines Arrays löschen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#sort">sort</a> - Listenelemente sortieren<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#splice">splice</a> - Elemente innerhalb eines Arrays löschen, hinzufügen, ersetzen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#undef">undef</a> - Wert aus Hash oder Array entfernen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#unshift">unshift</a> - Elemente am Anfang eines Arrays hinzufügen<br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#values">values</a> - Alle Werte eines Hashes ermitteln<br>
</p>
</td>
</tr><tr><td colspan="2" class="doc">&nbsp;<a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a>&nbsp;</td></tr>
</table>



<h2><a class="an" name="allgemeines">Allgemeines zu diesen Funktionen</a></h2>

<p>Um die hier versammelten Funktionen zu verstehen, müssen Sie wissen, welche Bedeutung Listen, Arrays und Hashes in Perl haben, wie sie definiert werden, und welche Besonderheiten sie aufweisen. Dies wird in den Abschnitten über <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/listen.htm">Listen</a> und <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/hashes.htm">Hashes</a> behandelt.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="delete">delete - Elementpaar aus Hash löschen</a></h2>

<p>Löscht ein beliebiges Elementpaar aus einem Hash. Im Gegensatz zur Funktion <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#undef">undef</a>, die nur den Wert löscht, das Elementpaar jedoch stehen lässt, entfernt <code>delete</code> das gesamte Elementpaar.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den Schlüssel des zu löschenden Elementes.</p>

<p>Gibt den Wert des gelöschten Elementpaars zurück, oder <code>undef</code>, falls nichts gelöscht wurde.</p>

<h3 class="xmp"><a class="an" name="beispiel1">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes1.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my %BodyFarben = ("text","#000000","link","#FF0000","alink","0000FF","vlink","#990000","bgcolor","#FFFFFF");
delete $BodyFarben{'bgcolor'};

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
print "text = $BodyFarben{'text'}&lt;br&gt;\n";
print "link = $BodyFarben{'link'}&lt;br&gt;\n";
print "alink = $BodyFarben{'alink'}&lt;br&gt;\n";
print "vlink = $BodyFarben{'vlink'}&lt;br&gt;\n";
print "bgcolor = $BodyFarben{'bgcolor'}\n";
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel definiert einen Hash namens <code>%BodyFarben</code>. Darin werden Elementpaare für die üblichen Attribute des <code>body</code>-Elements von HTML definiert. Mit Hilfe der Funktion <code>delete</code> wird anschließend das gesamte Elementpaar für <code>bgcolor</code> gelöscht. Zur Kontrolle wird HTML-Code erzeugt, der alle Elementpaare enthält. Der Versuch, das nicht mehr existerende Element <code>bgcolor</code> auszugeben, erzeugt dabei einen Fehler.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Sie können <code>delete</code> auch auf vordefinierte Hashes wie <code>%ENV</code> anwenden. Dabei werden die Umgebungsvariablen geändert!</p>

<p>Das obige Beispiel ist insofern unbefriedigend, als die Ausgabe <code>bgcolor = </code> leer im Raum stehen bleibt. Wie das verhindert werden kann, zeigt die Erweiterung des Beispiels im Zusammenhang mit der Funktion <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#exists">exists</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="each">each - nächstes Elementpaar aus Hash ermitteln</a></h2>

<p>Ermittelt das jeweils nächste Elementpaar eines Hashes und ist daher vor allem geeignet, alle Elementpaare in einer Schleife zu verarbeiten.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den Hash.</p>

<p>Gibt je nach Wunsch entweder eine 2-Element-Liste mit dem Namen und dem Wert des nächsten Elementpaars zurück, oder einen Skalar mit dem Namen des nächsten Elementpaars.</p>

<h3 class="xmp"><a class="an" name="beispiel2">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes2.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my %EMail = ("Sender","tabaluga\@example.org",
          "Received","from smtp\@mailout.de",
          "Date", "Sat, 01 Apr 2000 01:45:35 +0200",
          "X-Mailer","Mozilla 4.72 [en] (WinNT; U)",
          "To","beispiel\@example.org",
          "Content-Type","text/plain; charset=us-ascii");
print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n";
while (my ($Name, $Wert) = each %EMail) {
  print "$Name: $Wert\n";
}
print "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel definiert einen Hash mit Elementpaaren, die typische Kopfdaten einer E-Mail darstellen. Anschließend wird HTML-Code, in dem alle Elementpaare des Hashes zeilenweise ausgegeben werden, erzeugt. Dazu werden die Elementpaare in einer <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/schleifen.htm#while">while-Schleife</a> mit <code>each</code> abgearbeitet. Der Rückgabewert von <code>each</code> wird im Beispiel in einer 2-Element-Liste <code>my ($Name, $Wert)</code> gespeichert. Würde dort nur ein Skalar stehen, also etwa <code>$NextElement</code>, dann würde darin nur der Name des nächsten Elements gespeichert, also etwa <code>Sender</code>, nicht der zugehörige Wert (<code>tabaluga@example.org</code>). Das Beispiel gibt in jedem Schleifendurchlauf die ermittelten Daten zur Kontrolle aus.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="exists">exists - Ermitteln ob ein Hash-Name existiert</a></h2>

<p>Ermittelt, ob ein Name in einem Hash vorkommt und wird daher normalerweise in Verbindung mit einer <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/bedingt.htm#if_else_elsif">if-Abfrage</a> verwendet.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den Elementnamen.</p>

<p>Gibt <code>true</code> zurück, wenn der Elementname im Hash vorkommt.</p>

<h3 class="xmp"><a class="an" name="beispiel3">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes3.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my %BodyFarben = ("text","#000000","link","#FF0000","alink","0000FF","vlink","#990000","bgcolor","#FFFFFF");
delete $BodyFarben{'bgcolor'};

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";

print "text = $BodyFarben{'text'}&lt;br&gt;\n" if exists $BodyFarben{'text'};
print "link = $BodyFarben{'link'}&lt;br&gt;\n" if exists $BodyFarben{'link'};
print "alink = $BodyFarben{'alink'}&lt;br&gt;\n" if exists $BodyFarben{'alink'};
print "vlink = $BodyFarben{'vlink'}&lt;br&gt;\n" if exists $BodyFarben{'vlink'};
print "bgcolor = $BodyFarben{'bgcolor'}\n" if exists $BodyFarben{'bgcolor'};
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel definiert einen Hash namens <code>%BodyFarben</code>. Darin werden Elementpaare für die üblichen Attribute des <code>body</code>-Elements von HTML definiert. Mit Hilfe der Funktion <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#delete">delete</a> wird anschließend das gesamte Elementpaar für <code>bgcolor</code> gelöscht. Zur Kontrolle wird HTML-Code, der die Elementpaare enthält, erzeugt. Ausgegeben werden Elementpaare jedoch nur, wenn sie existieren. Dazu wird die Funktion <code>exists</code> in einer nachgestellten if-Abfrage auf das auszugebende Elementpaar angewendet. Nur wenn der Name des Elementpaars gefunden wird, werden die Daten ausgegeben. Im Beispiel wird auf diese Weise verhindert, dass die Zeile <code>bgcolor = </code> mit leerem Wert ausgegeben wird.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="grep">grep - Teilliste aus Liste durch Bedingung extrahieren</a></h2>

<p>Extrahiert bestimmte Elemente aus einer Liste, und zwar solche, die einer bestimmten Bedingung genügen, also etwa alle ungeraden Zahlen aus einer Liste mit Zahlen, oder alle Dateien ab einer bestimmten Größe aus einer Liste mit Dateien. Die extrahierten Elemente werden in einer eigenen neuen Liste gespeichert.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> die Bedingung, der zu extrahierende Elemente der Liste genügen sollen. Es kann sich beispielsweise um einen regulären Ausdruck handeln, aber auch um einen vergleichenden Ausdruck.<br>
<strong>2.</strong> die Liste, aus der extrahiert werden soll.</p>

<p>Gibt eine Liste mit extrahierten Elementen zurück, die der Bedingung genügen.</p>

<h3 class="xmp"><a class="an" name="beispiel4">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes4.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

opendir(DIR, "/var/www/selfhtml/dokumente");
my @Eintraege = readdir(DIR);
closedir(DIR);

chdir("/var/www/selfhtml/dokumente");

my @HTML_Dateien = grep(/\.htm/,@Eintraege);
my @Grosse_Dateien = grep(-s &gt; 50 * 1024, @Eintraege);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
print "&lt;h2&gt;HTML-Dateien im Verzeichnis&lt;/h2&gt;\n";
foreach(@HTML_Dateien) {
  print "$_&lt;br&gt;\n";
}
print "&lt;h2&gt;Dateien groesser 50KB im Verzeichnis&lt;/h2&gt;\n";
foreach(@Grosse_Dateien) {
  print "$_&lt;br&gt;\n";
}
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel wird ein Verzeichnis eingelesen. Die Dateien werden in der Liste <code>@Eintraege</code> gespeichert (zum Einlesen von Dateien siehe <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="einausgabe.htm#readdir">readdir</a>). Anschließend wird mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="dateiverwaltung.htm#chdir">chdir</a> in das zuvor eingelesene Verzeichnis gewechselt, weil der zweite der nachfolgenden <code>grep</code>-Aufrufe erfordert, dass das eingelesene Verzeichnis das aktuelle Verzeichnis ist.</p>

<p>Der erste der beiden Aufrufe von <code>grep</code> ermittelt aus der eingelesenen Liste <code>@Eintraege</code> alle Einträge, in denen <code>.htm</code> vorkommt. Auf diese Weise ermittelt <code>grep</code> alle HTML-Dateien der Liste. Die gefundenen Dateien werden in der zurückgegebenen Liste <code>@HTML_Dateien</code> gespeichert.</p>

<p>Während beim ersten Aufruf von <code>grep</code> ein <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/regexpr.htm">regulärer Ausdruck</a> verwendet wird, um die Extrahier-Bedingung zu formulieren, ist dies beim zweiten Aufruf eine vergleichende Bedingung, ähnlich wie man sie etwa aus <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/bedingt.htm#if_else_elsif">bedingte Anweisungen mit if/unless/else/elsif</a> kennt. Im Beispiel werden alle Einträge extrahiert, bei denen die Dateigröße mehr als 50 Kilobyte (50*1024 Byte) beträgt. Dabei kommt der <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="dateiverwaltung.htm#dateitest">Dateitestoperator</a> <code>-s</code> zum Einsatz. Die gefundenen Dateien werden in der zurückgegebenen Liste <code>@Grosse_Dateien</code> gespeichert.</p>

<p>Das obige Beispiel gibt anschließend HTML-Code mit den beiden ermittelten Listen für HTML-Dateien und Dateien größer 50 Kilobyte aus.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="join">join - Liste in Zeichenkette verwandeln</a></h2>

<p>Bindet die Elemente einer Liste zu einer Zeichenkette zusammen. In der Zeichenkette werden die ehemaligen Listenelemente durch ein bestimmtes Zeichen oder eine bestimmte Zeichenfolge voneinander getrennt.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> das Zeichen oder die Zeichenfolge, die zur Trennung der Listenelemente dienen soll,<br>
<strong>2.</strong> die Liste.</p>

<p>Gibt eine Zeichenkette zurück, in der alle Elemente der übergebenen Liste nacheinander notiert sind, getrennt durch das angegebene Zeichen oder die Zeichenfolge zur Trennung.</p>

<h3 class="xmp"><a class="an" name="beispiel5">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes5.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Werte;
for(my $i=0; $i&lt;16; $i++) {
    $Werte[$i] = 2 ** ($i+1);
}
my $Wertekette = join(";",@Werte);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
print "$Wertekette\n";
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel erzeugt in einer <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/schleifen.htm#for">for-Schleife</a> eine Liste namens <code>@Werte</code>. Darin werden alle Ergebnisse der Operationen von 2<sup>1</sup> bis 2<sup>16</sup> gespeichert (dazu dient der <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/operatoren.htm#berechnung">Berechnungsoperator</a> <code>**</code>). Anschließend wird diese Liste der Funktion <code>join</code> übergeben. Als Trennzeichen wird ein Semikolon (<code>;</code>) bestimmt. Das Ergebnis wird in dem Skalar <code>$Wertekette</code> gespeichert, einer einfachen Zeichenkette. Zur Kontrolle wird HTML-Code mit dem Ergebnis ausgegeben.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Die Umkehrfunktion zum Erzeugen einer Liste aus einer Zeichenkette mit Trennzeichen und Werten ist <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="zeichenketten.htm#split">split</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="keys">keys - Alle Namen eines Hashes ermitteln</a></h2>

<p>Speichert alle Namen von Elementpaaren eines Hashes in einer Liste.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den Hash.</p>

<p>Gibt eine Liste mit den Namen der Elementpaare zurück.</p>

<h3 class="xmp"><a class="an" name="beispiel6">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes6.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Umgebungsvariablen = keys(%ENV);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
print "&lt;p&gt;Folgende Umgebungsvariablen sind definiert:&lt;/p&gt;\n";
print "&lt;ul&gt;\n";
foreach(@Umgebungsvariablen) {
  print "&lt;li&gt;$_&lt;/li&gt;\n";
}
print "&lt;/ul&gt;\n";
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt alle Namen des <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/vordefiniert.htm">vordefinierten</a> Hashes <code>%ENV</code> in der Liste <code>@Umgebungsvariablen</code>. Zur Kontrolle wird HTML-Code erzeugt, in dem alle Umgebungsvariablen aufgelistet werden.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>In dem Beispiel werden nur die Namen der vorhandenen Umgebungsvariablen aufgelistet, nicht deren aktuelle Werte! Die Funktion, um nur die Werte, nicht die Namen eines Hashs zu ermitteln, ist <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#values">values</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="map">map - Befehle auf alle Listenelemente anwenden</a></h2>

<p>Wendet Befehle auf alle Elemente einer Liste an. Praktisch, um eine <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/schleifen.htm#for">for</a>- oder <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/schleifen.htm#foreach">foreach</a>-Schleife zu vermeiden.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> einen Befehl, der auf alle Listenelemente angewendet werden soll. Es kann sich um eine Funktion handeln, aber auch um eine ganze Folge von Anweisungen, die dann zu einem Block zusammengefasst werden (das aktuelle Listenelement steht dann in Form der Variable <code>$_</code> zur Verfügung).<br>
<strong>2.</strong> die Liste, auf die der Befehl angewendet werden soll.</p>

<p>Gibt die bearbeitete Liste zurück.</p>

<h3 class="xmp"><a class="an" name="beispiel7">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes7.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Dateien = ("Index.htm","ACDC.html","acdc.jpg","oasis.htm","Oasis.jpg");
@Dateien = map(lc, @Dateien);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
foreach(@Dateien) {
  print "$_&lt;br&gt;\n";
}
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel wird eine Liste mit Dateinamen definiert. Die Dateinamen enthalten zum Teil auch Großbuchstaben. Anschließend wird die Funktion <code>map</code> auf die Liste angewendet. Dabei wird die Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="zeichenketten.htm#lc">lc</a> auf alle Elemente der Liste angewendet, die eine Kleinschreibung aller Zeichen erzwingt. Zur Kontrolle gibt das Beispiel HTML-Code mit den Elementen der bearbeiteten Liste aus.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="pop">pop - letztes Element eines Arrays löschen</a></h2>

<p>Entfernt aus einem Array das letzte Element. Der Array wird um ein Element verkürzt.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den Array.</p>

<p>Gibt das gelöschte Element zurück.</p>

<h3 class="xmp"><a class="an" name="beispiel8">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes8.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $Satz = "Was du heute kannst besorgen das verschiebe nicht auf morgen";
my $Satzlaenge = length($Satz);
my @Zeichen;
for(my $i=0;$i&lt;$Satzlaenge;$i++) {
  $Zeichen[$i] = substr($Satz,$i,1);
}
print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
for(my $i=0; $i&lt;$Satzlaenge; $i++) {
  print "@Zeichen&lt;br&gt;\n";
  pop(@Zeichen);
}
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel definiert einen Satz und extrahiert alle einzelnen Zeichen daraus in einen Array (Erläuterung dazu siehe Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="zeichenketten.htm#substr">substr</a>). Das Beispiel erzeugt HTML-Code. Dabei wird in einer <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/schleifen.htm#for">for-Schleife</a>, die so oft durchlaufen wird, wie die Anzahl Zeichen im ursprünglichen Satz beträgt, jeweils der gesamte Array <code>@Zeichen</code> ausgegeben. Der Array wird jedoch bei jedem Schleifendurchgang mit Hilfe der Funktion <code>pop</code> um das letzte Element verkürzt. So wird bei jedem Schleifendurchgang jeweils ein Zeichen des Satzes weniger ausgegeben.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="push">push - Elemente an einen Array anhängen</a></h2>

<p>Fügt ein oder mehrere neue Elemente an das Ende eines Arrays an.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den Array, an den das Element angehängt werden soll,<br>
<strong>2.</strong> bis <strong>n.</strong> ein oder mehrere anzuhängende Elemente.</p>

<h3 class="xmp"><a class="an" name="beispiel9">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes9.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Orte = ("Wien","Madrid","Rom","Stockholm","Riga");
my @NeueOrte = ("Paris","Lissabon","Sofia");
foreach(@NeueOrte) {
  push(@Orte,$_);
}
@Orte = sort(@Orte);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
foreach(@Orte) {
  print "$_&lt;br&gt;\n";
}
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel werden zwei Listen definiert: <code>@Orte</code> und <code>@NeueOrte</code>. In einer <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/schleifen.htm#foreach">foreach-Schleife</a> werden die Elemente der Liste <code>@NeueOrte</code> der Reihe nach an die Liste <code>@Orte</code> angehängt. Mit Hilfe der Funktion <img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#sort">sort</a> wird die neue Liste mit allen Orten dann noch "asciibetisch" (nach der Reihenfolge der Zeichen in der ASCII-Codetabelle) sortiert. Das Beispiel gibt die gesamte neue Liste zur Kontrolle als HTML-Code aus.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="reverse">reverse - Reihenfolge der Listenelemente umkehren</a></h2>

<p>Dreht eine Liste so um, dass das erste Element hinterher das letzte ist, das zweite das zweitletzte usw.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> die gewünschte Liste.</p>

<p>Gibt die bearbeitete Liste zurück.</p>

<h3 class="xmp"><a class="an" name="beispiel10">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes10.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Zahlen = (1..100);
@Zahlen = reverse(@Zahlen);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
foreach(@Zahlen) {
  print "$_&lt;br&gt;\n";
}
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel definiert eine Liste mit Zahlen von 1 bis 100. Anschließend wird die Funktion <code>reverse</code> auf die Liste angewendet, sodass darin die Elemente von 100 bis 1 gespeichert sind. Zur Kontrolle wird HTML-Code mit der bearbeiteten Liste ausgegeben.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Die Funktion ist auch auf <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/hashes.htm">Hashes</a> anwendbar. Beispiel:<br>
<code>%Mailheader = reverse(%Mailheader);</code><br>
Dabei werden die Schlüssel und Werte der Elemente miteinander vertauscht. Dies ist jedoch dann problematisch, wenn ein Hash mehrere gleiche Werte besitzt. In diesem Fall wird im bearbeiteten Hash nur noch einer der Werte (der nun als Schlüssel dient) berücksichtigt.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="shift">shift - erstes Element eines Arrays löschen</a></h2>

<p>Entfernt das erste Element eines Arrays. Das zweite ist anschließend das erste usw. Der Array wird um ein Element kürzer.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den zu bearbeitenden Array.</p>

<p>Gibt das gelöschte Element zurück.</p>

<h3 class="xmp"><a class="an" name="beispiel11">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes11.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Zustaende = ("Angst, ","Melancholie, ","Trauer, ","Wut, ","Zwiespalt, ","Hass");

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
my $max = @Zustaende;
for(my $i = 0; $i &lt; $max; $i++) {
  print "&lt;p&gt;jetzt herrscht noch @Zustaende&lt;br&gt;\n";
  shift(@Zustaende);
}
print "&lt;p&gt;und jetzt herrscht Friede!&lt;/p&gt;\n";
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel definiert einen Array, der die Namen unangenehmer seelischer Zustände auflistet. Innerhalb des HTML-Codes ist eine <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/schleifen.htm#for">for-Schleife</a> notiert. Sie wird so oft durchlaufen, wie der ursprüngliche Array Elemente hat. Dazu wird die Länge der Liste in dem Skalar <code>$max</code> gespeichert. Bei jedem Schleifendurchgang wird ausgegeben, welche der unangenehmen Seelenzustände noch herrschen. Bei jedem Schleifendurchgang wird aber die erste dieser Befindlichkeiten aus dem Array mit <code>shift</code> gelöscht. Dadurch wird der Array immer kleiner, und die Stimmung immer aufgehellter. Am Ende ist die Seelenwelt wieder in Ordnung. Dann wird auch die Schleife beendet, und es wird noch ein triumphierender Satz ausgegeben.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Die Funktion <code>shift</code> wird in der Praxis auch gerne dazu verwendet, innerhalb von Subroutinen übergebene Parameter "abzuarbeiten". Ein Beispiel finden Sie im Abschnitt über <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/subroutinen.htm#parameter">Subroutinen mit Parametern aufrufen</a>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="sort">sort - Listenelemente sortieren</a></h2>

<p>Sortiert die Elemente einer Liste. Dabei gibt es zwei Möglichkeiten. Entweder Sie sortieren die Liste nach dem vorgegebenen Sortier-Algorithmus. Dieser sortiert alphabetisch, genauer gesagt, "asciibetisch" (nach der Reihenfolge der Zeichen in der ASCII-Codetabelle). Oder Sie erzwingen einen eigenen Sortier-Algorithmus. Dazu definieren Sie beispielsweise eine <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/subroutinen.htm">Subroutine</a>, die den entsprechenden Algorithmus leistet. Wichtig ist dies etwa, um Listenelemente numerisch zu sortieren.</p>

<p>Erwartet als Parameter:<br>
<strong>entweder:</strong><br>
<strong>1.</strong> die zu sortierende Liste.<br>
<strong>oder:</strong><br>
<strong>1.</strong> die Anweisung oder den Namen der Subroutine mit dem Sortier-Algorithmus,<br>
<strong>2.</strong> die zu sortierende Liste.
</p>

<p>Gibt die sortierte Liste zurück. Wichtig ist, dass der Rückgabewert in einer anderen Liste gespeichert wird als in der Liste, die als Parameter übergeben wird.</p>

<h3 class="xmp"><a class="an" name="beispiel12">Beispiel 1 eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes12.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Freundinnen = ("Nina","Martina","Janina","Christina","Ina","Sabrina");
my @Ordnung = sort(@Freundinnen);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
for(@Ordnung)
 {
  print "$_&lt;br&gt;\n";
 }
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Dieses Beispiel zeigt die einfache standardmäßige Sortierung. Es definiert eine Liste von Namen von Freundinnen. Anschließend wird die Liste mit Hilfe von <code>sort</code> sortiert. Die zurückgegebene Liste wird in der neuen Liste <code>@Ordnung</code> gespeichert. Zur Kontrolle wird HTML-Code mit der sortierten Liste ausgegeben.</p>

<h3 class="xmp"><a class="an" name="beispiel13">Beispiel 2 eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes13.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @HighscoreListe = (9834,9837,5989,4509,4329,6509,2837,8289,10845);
my @SortierteListe = sort(NummernSort @HighscoreListe);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
for(@SortierteListe) {
  print "$_&lt;br&gt;\n";
 }
print "&lt;/body&gt;&lt;/html&gt;\n";

sub NummernSort {
 if($a &lt; $b)
  { return -1; }
 elsif($a == $b)
  { return 0; }
 else
  { return 1; }
}
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das zweite Beispiel definiert eine Liste namens <code>@HighscoreListe</code>. Anschließend wird die Liste mit Hilfe von <code>sort</code> sortiert. Da es sich um numerische Werte handelt, wird eine Funktion benutzt, die den numerischen Sortier-Algorithmus bereitstellt. Denn "asciibetisch" betrachtet würde der letzte Wert 10845 in der aufsteigend sortierten Liste zuerst erscheinen, was er aber nicht soll, da er ja der höchste Wert ist, der zuletzt auftauchen soll. Dem Aufruf von <code>sort</code> wird deswegen zuerst der Name des Unterprogramms für die Sortierung übergeben, und dann, durch ein Leerzeichen getrennt (nicht durch Komma!), die zu sortierende Liste. Die zurückgegebene Liste wird im Beispiel in der neuen Liste <code>@SortierteListe</code> gespeichert. Zur Kontrolle wird HTML-Code mit der sortierten Liste ausgegeben.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Das im Beispiel notierte Unterprogramm <code>NummernSort</code> ist allgemein geschrieben und leistet eine einfache numerische Sortierung, so, wie es die <code>sort</code>-Funktion erwartet. Dieses Unterprogramm können Sie also immer verwenden, wenn Sie Listen numerisch sortieren möchten.</p>

<p>Um eine absteigende Sortierung zu erzwingen, können Sie beispielsweise nach Anwendung von <code>sort</code> noch die Funktion <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#reverse">reverse</a> auf die Liste anwenden.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="splice">splice - Elemente innerhalb eines Arrays löschen, hinzufügen, ersetzen</a></h2>

<p>Entfernt eines oder mehrere Elemente aus einem Array und kann außerdem an der gleichen Stelle eines oder mehrere Elemente einfügen. <code>splice</code> ist daher eine Art Universalfunktion zur Manipulation von Listen, die unter anderem alles ermöglicht, was die Einzelfunktionen <code>pop</code>, <code>push</code>, <code>shift</code> und <code>unshift</code> leisten, darüber hinaus aber noch mehr kann.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den zu bearbeitenden Array,<br>
<strong>2.</strong> Indexnummer des Elements, ab dem gelöscht werden soll (wobei bei 0 für das erste Listenelement zu zählen begonnen wird),<br>
<strong>3.</strong> (optional) Anzahl der zu löschenden Elemente. Wenn nicht angegeben, werden alle Elemente bis zum Listenende gelöscht! Um kein Element zu löschen, also nur einzufügen, muss an dieser Stelle 0 übergeben werden.<br>
<strong>4.</strong> bis <strong>n.</strong> (optional) ein bis n Elemente, die (anstelle der gelöschten Elemente) eingefügt werden sollen.
</p>

<p>Gibt eine Liste mit gelöschten Elementen zurück.</p>

<h3 class="xmp"><a class="an" name="beispiel14">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes14.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Datensatz = ("Heinrich","Loewe","Burgstr.1","01234 Regentenstadt");

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
print "&lt;h2&gt;E-Mail-Adresse und Webadresse neu:&lt;/h2&gt;\n";
splice(@Datensatz,2,0,"hdl\@example.org","http://www.example.org/hdl/");
my $Feld;
foreach $Feld (@Datensatz) {
  print "$Feld&lt;br&gt;\n";
}
print "&lt;h2&gt;Adresse neu:&lt;/h2&gt;\n";
splice(@Datensatz,4,1);
splice(@Datensatz,-1,1,"Postfach 1234, GERMANY");
foreach $Feld (@Datensatz) {
  print "$Feld&lt;br&gt;\n";
}
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel wird ein Array namens <code>@Datensatz</code> definiert, der aus mehreren Elementen besteht. Das Script erzeugt HTML-Code und gibt den Array darin aus. Dabei wird der Array jedoch mehrfach mit <code>splice</code> manipuliert. Zunächst werden Elemente für E-Mail-Adresse und Webadresse in den Datensatz eingefügt - und zwar hinter den beiden ersten Elementen, also hinter Vorname und Zuname. Dazu wird als zweiter Parameter die Indexnummer 2 für das dritte Element übergeben. Gelöscht werden soll kein Element, die Daten sollen nur eingefügt werden. Deshalb wird als dritter Parameter 0 übergeben. Zuletzt werden noch die beiden neuen Elemente für E-Mail-Adresse und Webadresse übergeben. Zur Kontrolle wird der Array dann erstmals ausgegeben. Er enthält zu diesem Zeitpunkt die Elemente:<br>
<code>Heinrich,Loewe,hdl@example.org,http://www.example.org/hdl/,Burgstr.1,01234 Regentenstadt</code></p>

<p>Der Array wird im Beispiel jedoch noch weiter manipuliert. Zunächst wird das Element mit der Indexnummer 4 (im aktuellen Stand von <code>@Datensatz</code> die Straßenangabe) gelöscht. Die als dritter Parameter übergebene 1 bewirkt, dass genau dieses eine Element gelöscht wird. <code>@Datensatz</code> besteht zu diesem Zeitpunkt aus den Elementen:<br>
<code>Heinrich,Loewe,hdl@example.org,http://www.example.org/hdl/,01234 Regentenstadt</code></p>

<p>Gleich anschließend folgt im Beispiel jedoch noch ein dritter <code>splice</code>-Aufruf. Dieser ersetzt das letzte Listenelement durch ein neues. Als zweiter Parameter wird zu diesem Zweck <code>-1</code> übergeben. Da der Perl-Interpreter bei negativen Indexnummern von hinten anfängt zu zählen, entspricht <code>-1</code> also der letzten Indexnummer, <code>-2</code> der vorletzten usw. Als dritter Parameter wird <code>1</code> übergeben, sodass dieses letzte Element gelöscht wird. Zuletzt wird jedoch noch ein weiterer Parameter übergeben, nämlich das zu ersetzende Element. So entsteht der Effekt, als ob einfach dem letzten Listenelement ein neuer Wert zugewiesen wird. Intern passiert jedoch mehr.</p>

<p>Der Array hat nach dem dritten Aufruf von <code>splice</code> folgendes Aussehen:<br>
Er besteht zu diesem Zeitpunkt aus den Elementen:<br>
<code>Heinrich,Loewe,hdl@example.org,http://www.example.org/hdl/,Postfach 1234, GERMANY</code>.<br>
Zur Kontrolle wird dieser Stand noch einmal ausgegeben.</p>

<p>Die folgende Tabelle zeigt zur Verdeutlichung noch ein paar <code>splice</code>-Beispiele und deren Entsprechung durch das Verwenden anderer Array-Funktionen:</p>

<table class="reftable" cellpadding="3" cellspacing="0" border="1">
<tr>
<th>Anweisung mit <code>splice</code>:</th>
<th>entspricht folgender anderer Anweisung:</th>
<th>siehe auch:</th>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code>splice(@Array,@Array,0,"Element")</code></td>
<td class="code" nowrap="nowrap"><code>push(@Array,"Element")</code></td>
<td class="tabxpl"><img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#push">push</a>
</td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code>splice(@Array,-1)</code></td>
<td class="code" nowrap="nowrap"><code>pop(@Array)</code></td>
<td class="tabxpl"><img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#pop">pop</a>
</td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code>splice(@Array,0,1)</code></td>
<td class="code" nowrap="nowrap"><code>shift(@Array)</code></td>
<td class="tabxpl"><img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#shift">shift</a>
</td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code>splice(@Array,0,0,"Element")</code></td>
<td class="code" nowrap="nowrap"><code>unshift(@Array,"Element")</code></td>
<td class="tabxpl"><img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#unshift">unshift</a>
</td>
</tr>
</table>
&#160;



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="undef">undef - Wert aus Hash oder Array entfernen</a></h2>

<p>Löscht einen Wert aus einem Hash oder einem Array. Das Element selbst bleibt dabei erhalten. Der Wert wird lediglich auf den Wert <code>undef</code> gesetzt.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> bei einem Hash den Elementnamen, und bei einem Array die Angabe dazu, das wievielte Element gemeint ist. Kann daneben auch auf einfache Skalare und Unterprogramme angewendet werden, um deren Wert oder Rückgabewert auf <code>undef</code> zu setzen.</p>

<p>Gibt in jedem Fall <code>undef</code> zurück.</p>

<h3 class="xmp"><a class="an" name="beispiel15">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes15.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Spieler = ("Richard","Anita","Fred","Miriam");
my %Spielstaende = ("Richard","350","Anita","400","Fred","150","Miriam","700");

undef($Spieler[2]);
undef($Spielstaende{'Fred'});

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
print "&lt;p&gt;Folgende Spieler nehmen teil:&lt;/p&gt;\n";
print "&lt;ul&gt;\n";
foreach(@Spieler) {
  print "&lt;li&gt;$_&lt;/li&gt;\n";
}
print "&lt;/ul&gt;\n";
print "&lt;p&gt;Folgende Spielst&amp;auml;nde sind aktuell:&lt;/p&gt;\n";
print "&lt;ul&gt;\n";
my @Namen = keys(%Spielstaende);
foreach(@Namen) {
  print "&lt;li&gt;$_: $Spielstaende{$_} Punkte&lt;/li&gt;\n";
}
print "&lt;/ul&gt;\n";
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel definiert einen Array namens <code>@Spieler</code> und einen Hash namens <code>%Spielstaende</code>. Der Spieler Fred, der sich aus dem Spiel ausklinkt, wird aus beiden Datenstrukturen mit <code>undef</code> entfernt. Dabei bleiben jedoch das Array-Element für Fred und das entsprechende Elementpaar im Hash erhalten. Im Array wird durch <code>undef</code> der Wert, also der Name entfernt, und im Hash bleibt der Name <code>Fred</code> erhalten, nur dessen zugeordneter Wert <code>100</code> wird entfernt. "Entfernt" bedeutet in beiden Fällen, dass der Wert auf <code>undef</code> gesetzt wird. Zur Kontrolle wird im Beispiel HTML-Code mit allen Daten ausgegeben. Die entfernten Elemente sind darin ebenfalls enthalten, weil sie noch vorhanden sind, jedoch ohne sichtbaren Wert. Stattdessen erfolgt beim Zugriff auf diese Elemente eine Fehlermeldung. Der Wert <code>undef</code> bedeutet, dass der entsprechende Skalar oder das entsprechende Element (noch) keinen Wert besitzt. Es ist "undefiniert". Es kann jedoch auf <code>undef</code> hin abgefragt werden. Beispiel:<br>
<code>unless (defined $Spielstaende{'Fred'}) { print "Fred ist ausgestiegen"; }</code>.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Um in einem Hash ein Elementpaar vollständig zu löschen, gibt es die Funktion <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#delete">delete</a>. Um ein Element aus einem Array vollständig zu löschen, stehen die Funktionen <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#pop">pop</a>, <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#shift">shift</a> und <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#splice">splice</a> zur Verfügung.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="unshift">unshift - Elemente am Anfang eines Arrays hinzufügen</a></h2>

<p>Fügt ein oder mehrere neue Elemente am Anfang eines Arrays an. Der Array wird entsprechend länger.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den gewünschten Array,<br>
<strong>2.</strong> bis <strong>n.</strong> das oder die vorne einzufügenden Elemente.</p>

<h3 class="xmp"><a class="an" name="beispiel16">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes16.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Links=("&lt;a href=\"http://www.willy-online.de/\"&gt;willy-online.de&lt;/a&gt;&lt;br&gt;\n",
        "&lt;a href=\"http://www.suedelbien.de/\"&gt;suedelbien.de&lt;/a&gt;&lt;br&gt;\n",
        "&lt;a href=\"http://www.sagmal.de/\"&gt;sagmal.de&lt;/a&gt;&lt;br&gt;\n");

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
unshift(@Links,"&lt;a href=\"http://www.ganze-kerle.de/\"&gt;ganze-kerle.de&lt;/a&gt;&lt;br&gt;\n");
print "@Links";
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel definiert einen Array mit drei WWW-Links, fertig notiert als HTML-Verweise. Bevor der Array mit den Links ausgegeben wird, wird dem Array mit <code>unshift</code> vorne ein neues Element angefügt. Anschließend wird der gesamte Array mit nunmehr vier Verweisen ausgegeben, wobei der hinzugefügte Verweis der erste ist.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="values">values - Alle Werte eines Hashes ermitteln</a></h2>

<p>Speichert alle Werte von Elementpaaren eines Hashes in einer Liste.</p>

<p>Erwartet als Parameter:<br>
<strong>1.</strong> den Hash.</p>

<p>Gibt eine Liste mit den Werten der Elementpaare zurück.</p>

<h3 class="xmp"><a class="an" name="beispiel17">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/listenhashes17.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Umgebungswerte = values(%ENV);
my @Umgebungsvariablen = keys(%ENV);
my @Umgebung;
for(my $i=0; $i &lt; @Umgebungswerte; $i++) {
  $Umgebung[$i] = $Umgebungsvariablen[$i]." = ".$Umgebungswerte[$i];
}
@Umgebung = sort(@Umgebung);

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test-Ausgabe&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n";
print "&lt;p&gt;Folgende Umgebungswerte sind definiert:&lt;/p&gt;\n";
print "&lt;ul&gt;\n";
foreach(@Umgebung) {
  print "&lt;li&gt;$_&lt;/li&gt;\n";
}
print "&lt;/ul&gt;\n";
print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel ermittelt mit <code>values</code> alle Werte des <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/vordefiniert.htm">vordefinierten</a> Hashes <code>%ENV</code> in der Liste <code>@Umgebungswerte</code>. Mit Hilfe der Funktion <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#keys">keys</a> wird eine entsprechende Liste <code>@Umgebungsvariablen</code> für die Elementnamen des Hashes erzeugt. Anschließend wird eine neue Liste <code>@Umgebung</code> erzeugt. In dieser Liste werden die beiden separaten Listen für die Namen und Werte in einer <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/schleifen.htm#for">for-Schleife</a> zusammengeführt. Jeder Listeneintrag der Liste <code>@Umgebung</code> besteht aus dem jeweiligen Namen einer Umgebungsvariablen, einem Gleichheitszeichen und dem zugehörigen Wert (siehe auch: <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../sprache/operatoren.htm#zeichenkettenverknuepfung">Zeichenketten zusammenfügen</a>). Diese neue Liste wird mit Hilfe der Funktion <img src="../../src/up.gif" width="14" height="10" alt="nach oben">&nbsp;<a href="#sort">sort</a> sortiert. Anschließend wird HTML-Code mit der sortierten Liste ausgegeben.</p>



<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" class="doc">
&nbsp;<a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a>
</td></tr>
<tr><td class="doc"><a href="berechnungen.htm"><img src="../../src/next.gif" width="10" height="10" border="0" hspace="10" alt="weiter"></a></td>
<td width="100%"><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="berechnungen.htm">Funktionen für Berechnungen</a>
</td></tr>
<tr>
<td class="doc"><a href="zeichenketten.htm"><img src="../../src/prev.gif" width="10" height="10" border="0" hspace="10" alt="zurück"></a></td>
<td><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="zeichenketten.htm">Funktionen für Zeichenketten</a>
</td>
</tr>
<tr><td colspan="2" class="doc">&nbsp;</td>
</tr>
<tr>
<td colspan="2" class="nav"><a class="an" name="bottom"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Perl</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Perl-Funktionen</a></td>
</tr>
</table>

<p>&copy; 2007 <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../editorial/impressum.htm">Impressum</a></p>

</body>
</html>
