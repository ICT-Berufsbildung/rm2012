<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>SELFHTML: Perl / Perl-Sprachelemente / Hashes (Variablen)</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Was Hashes in Perl sind, wie sie deklariert werden und wie sie sich verwenden lassen.">
<meta name="keywords"       content="SELFHTML, Perl, Hashes">
<meta name="author"         content="Redaktion SELFHTML, selfhtml81@selfhtml.org">
<meta name="robots"         content="noindex, nofollow">
<meta name="DC.Publisher"   content="SELFHTML e. V.">
<meta name="DC.Date"        content="2005-11-09T00:29:27+01:00">
<meta name="DC.Identifier"  content="http://de.selfhtml.org/perl/sprache/hashes.htm">
<meta name="DC.Language"    content="de">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.created" content="2001-10-27T08:00+01:00">
<meta name="SELF.Pagetype"  content="page">
<link rel="alternate" type="application/atom+xml" title="SELFHTML-Weblog (Atom, gesamt)" href="http://aktuell.de.selfhtml.org/weblog/atom-feed">
<link rel="alternate" type="application/rss+xml" title="SELFHTML-Weblog (RSS, Auszüge)" href="http://aktuell.de.selfhtml.org/weblog/rss-feed">
<link rel="shortcut icon" type="image/x-icon" href="../../src/favicon.ico">
<link rel="author" title="Impressum" href="../../editorial/impressum.htm">
<link rel="contents" title="Inhaltsverzeichnis" href="../../navigation/inhalt.htm">
<link rel="index" title="Stichwortverzeichnis" href="../../navigation/stichwort.htm">
<link rel="search" title="Suche" href="../../navigation/suche/index.htm">
<link rel="help" title="Hilfe" href="../../editorial/index.htm">
<link rel="copyright" title="Urheberrecht" href="../../editorial/copyright.htm">
<link rel="top" title="SELFHTML" href="../../index.htm">
<link rel="up" title="Perl-Sprachelemente" href="index.htm">
<link rel="next" title="Referenzen bzw. Zeiger (Variablen)" href="referenzen.htm">
<link rel="prev" title="Listen bzw. Arrays (Variablen)" href="listen.htm">
<link rel="first" title="CGI-notwendige Anweisungen in Perl" href="cginotwendig.htm">
<link rel="last" title="CGI-typische Aufgaben in Perl" href="cgitypisch.htm">
</head>
<body>

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td colspan="2" class="nav"><a class="an" name="top"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Perl</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Perl-Sprachelemente</a></td>
</tr>
<tr>
<td class="doc" width="110"><a href="../../index.htm"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></a></td>
<td class="docbot" width="100%"><h1 class="ph1">Hashes (Variablen)</h1></td>
</tr>
<tr>
<td class="doctop">
<img src="../../src/dokx.gif" width="30" height="20" vspace="6" alt="Informationsseite">
</td>
<td valign="top" nowrap="nowrap">
<p>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#definieren">Hashes deklarieren und Werte zuweisen</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#zugriff">Auf einzelne Schlüssel und Werte zugreifen</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#funktionen_operationen">Funktionen und Operationen zum Manipulieren von Hashes</a><br>
</p>
</td>
</tr><tr><td colspan="2" class="doc">&nbsp;<a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a>&nbsp;</td></tr>
</table>



<h2><a class="an" name="definieren">Hashes deklarieren und Werte zuweisen</a></h2>

<p>Gewöhnliche <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="listen.htm">Listen</a> bzw. Arrays bestehen aus einer Reihe von Werten, die über Indexnummern, beginnend bei 0, ansprechbar sind. So ist das 8. Element eines Arrays mit dem Namen <code>@Listenname</code> über <code>$Listenname[7]</code> ansprechbar. Ein assoziativer Array, in Perl als Hash bezeichnet, speichert dagegen pro Element zwei Werte: einen Namen und einen Wert. Werte innerhalb eines Hashs werden dann nicht über Indexnummern angesprochen, sondern über den zugehörigen Namen "assoziiert". Der Name wird daher auch als "Schlüssel" bezeichnet. Über den Schlüssel ist der Zugriff auf die damit verknüpften Daten möglich.</p>

<h3 class="xmp"><a class="an" name="beispiel1">Beispiel eines vollständigen CGI-Scripts:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/hashes1.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my %Daten = ("Name","Jana","Alter",23,"Ort","Berlin");
my %bessereDaten = (Name =&gt; "Jana", Alter =&gt; 23, Ort =&gt; "Berlin");

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Testausgabe&lt;/title&gt;\n";
print "&lt;/head&gt;&lt;body&gt;\n";

print "&lt;pre&gt;",%Daten,"&lt;/pre&gt;\n";
print "&lt;pre&gt;",%bessereDaten,"&lt;/pre&gt;\n";

print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Beispiel werden zwei Hashes namens <code>%Daten</code> und <code>%bessereDaten</code> deklariert. "Deklaration" bedeutet bei Hashes das gleiche wie bei <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="listen.htm">Arrays</a>. Ein Hash wird durch das Prozentzeichen <code>%</code> eingeleitet. Dahinter folgt der Name des Hashes. Bei der Deklaration eines Hashes können Sie Anfangswerte zuweisen oder auch nicht. In beiden obigen Beispielen werden Anfangswerte zugewiesen. Dabei gibt es zwei unterschiedliche Notationsweisen, von denen diejenige, die bei <code>%bessereDaten</code> angewendet wird, die übersichtlichere und daher empfehlenswertere ist. Sie können die Werte wie im ersten Hash gezeigt notieren. Dabei wird wie in einer Liste alles durch Kommata getrennt. Das erste, dritte, fünfte usw. Element bezeichnet jedoch einen Namen, und das zweite, vierte, sechste usw. Element den zugehörigen Wert. In der empfehlenswerteren Notation kommt dies besser zum Ausdruck. Dabei werden die Namen-Wert-Paare durch den Zeigeoperator <code>=&gt;</code> (der hier ein Synonym für das Komma darstellt, weshalb er auch als <i>fat comma</i> bezeichnet wird) getrennt, und Kommata werden nur zwischen den Paaren notiert. Bei der Notationsweise mit dem Operator <code>=&gt;</code> dürfen die Anführungszeichen bei den Namen, also den Schlüsseln, entfallen, wenn sie den Regeln der  <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../intro.htm#namensvergabe">Namensvergabe</a> genügen. Bei der anderen Notation mit Komma-Trennung zwischen Schlüssel und Wert sind die Anführungszeichen dagegen auch bei den Schlüsseln Pflicht. Die beiden Beispiel-Hashes zeigen diesen Unterschied.</p>

<p>Wie bei Skalaren und Listen können Sie leere Hashes deklarieren. Eine Anweisung wie <code>my %Daten;</code> deklariert einen Hash, der jedoch zunächst leer ist.</p>

<p>Wie Listen können auch Hashes bei den eigentlichen Werten nur Skalare enthalten, also Zeichenketten und Referenzen, die Sie auch hier beliebig mischen können. Im obigen Beispiel sind die Einzelwerte <code>Jana</code> und <code>Berlin</code> Zeichenketten, während <code>23</code> eine Zahl ist.</p>

<p>Das Beispiel gibt einfach die beiden Hash-Inhalte aus.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Skalare, Listen und Hashes haben unterschiedliche Namensräume. Variablen wie <code>$name</code>, <code>@name</code> und <code>%name</code> können also problemlos im gleichen Script vorkommen.</p>

<p>Komplette Hashes, also mit dem Prozentzeichen beginnend, werden innerhalb von Anführungszeichen in <code>print</code>-Anweisungen nicht interpretiert. Um einen Hash komplett auszugeben, so wie im obigen Beispiel, müssen Sie die Technik nutzen, mehrere Einzelwerte mit <code>print</code> auszugeben, die durch Kommata getrennt sind, wie im obigen Beispiel gezeigt.</p>

<p>Anstelle von konstanten Daten können Sie auch andere Variablen in einen Hash einfügen. Zum Beispiel:<br>
<code>my $Alter = 23;</code><br>
<code>my %Daten = (Name =&gt; "Jana", Alter =&gt; $Alter);</code></p>

<p>Hashes lassen sich im Zusammenhang mit CGI-Scripts sehr sinnvoll einsetzen. So ist es beispielsweise möglich, den Datenstrom eines vom Anwender ausgefüllten HTML-Formulars in einen Hash einzulesen, wobei als Hash-Schlüssel jeweils der Feldname des Formularelements gespeichert wird und als Wert der Wert, den der Anwender in dem betreffenden Formularelement eingegeben oder ausgewählt hat.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="zugriff">Auf einzelne Schlüssel und Werte zugreifen</a></h2>

<p>Genau wie bei Listen greifen Sie auf einen Skalar zu, wenn Sie einzelne gespeicherte Werte eines Hashes auslesen oder ihnen Werte zuweisen. Zum Zugriff verwenden Sie den Schlüssel.</p>

<h3 class="xmp"><a class="an" name="beispiel2">Beispiel eines vollständigen CGI-Scripts:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/hashes2.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my %Daten = (Name =&gt; "Jana", Alter =&gt; 23, Ort =&gt; "Berlin", Bildung =&gt; "Abitur");

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Testausgabe&lt;/title&gt;\n";
print "&lt;/head&gt;&lt;body&gt;\n";

print "$Daten{'Name'} ist $Daten{'Alter'} Jahre alt, wohnt in $Daten{'Ort'} und hat $Daten{'Bildung'}\n";

print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Im Script wird wieder der Hash <code>%Daten</code> deklariert und mit vier Werten initialisiert (diesmal gleich in der besseren Notationsweise). Das Script erzeugt wieder HTML-Code und gibt darin die Daten aus. Diesmal wird dabei jedoch auf die einzelnen Werte des Hashes <code>%Daten</code> zugegriffen. Mit <code>$Daten{'Name'}</code> wird auf jenes Element des Hashes zugegriffen, das den <strong>Schlüssel</strong> <code>Name</code> hat. Das wie vielte Element im Hash dies ist, brauchen Sie nicht zu wissen. Es genügt, den Schlüssel anzugeben. Damit wird auf den entsprechenden Wert zugegriffen. <code>$Daten{'Name'}</code> greift im Beispiel also auf den Wert <code>Jana</code> zu. Wichtig ist, dass der Schlüssel in <strong>geschweiften</strong> Klammern stehen muss. Die Klammern gehören in diesem Kontext (innerhalb von Zeichenketten) zum Variablennamen und müssen direkt hinter dem Namen des Hashes notiert werden (kein Leerraum erlaubt).</p>

<p>Die Syntax wie in <code>$Daten{'Name'}</code> zeigt mit dem voranstehenden Dollarzeichen, dass es sich bei einem Hash-Wert um einen Skalar handelt.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Anstelle von <code>$Daten{'Name'}</code> können Sie auch <code>$Daten{Name}</code> notieren, also ohne Anführungszeichen. Solange in den geschweiften Klammern nichts weiter steht als ein einzelner Schlüssel, der den Regeln der <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../intro.htm#namensvergabe">Namensvergabe</a> genügt, dürfen die Anführungszeichen entfallen.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="funktionen_operationen">Funktionen und Operationen zum Manipulieren von Hashes</a></h2>

<p>Viele Perl-Funktionen gelten für <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/listenhashes.htm">Listen und Hashes</a>, einige davon aber auch nur für Hashes, da das Manipulieren von Hashes einige Besonderheiten aufweist. Ein paar wichtige Möglichkeiten sollen hier mit Verweisen auf die Beschreibung der jeweiligen Funktionen genannt werden.</p>

<p><strong>Mit unbekannten Schlüsseln arbeiten</strong>:<br>
Wenn Sie einen Hash mit Werten initialisieren, kennen Sie natürlich auch die Schlüsselnamen. Aber wenn Sie Daten einlesen - etwa HTML-Formulardaten in einem CGI-Script - dann wissen Sie oft nicht, was in einem Hash, der die Daten aufgenommen hat, alles drinsteht. Um sich erst einmal einen Überblick zu verschaffen, welche Schlüssel eines Hashs eingelesen wurden, können Sie die Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/listenhashes.htm#keys">keys</a> verwenden. Anschließend haben Sie eine <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="listen.htm">Liste</a> mit allen Namen bzw. Schlüsseln des Hashes. Angenommen, Sie haben einen Hash <code>%Daten</code> mit Schlüsseln und Werten, die Ihnen zunächst nicht bekannt sind. Dann können Sie mit einer Anweisung wie <code>@Schluessel&nbsp;=&nbsp;keys(%Daten);</code> die Schlüssel ermitteln. Anschließend können Sie beispielsweise über <code>$Daten{$Schluessel[0]}</code> auf den Wert des Hashes zugreifen, der mit dem Namen assoziiert wird, der nun in <code>$Schluessel[0]</code> zu finden ist, ohne den Schlüssel explizit zu kennen.</p>

<p><strong>Werte ändern oder hinzufügen</strong>:<br>
Durch eine Anweisung wie <code>$Daten{Vorname}&nbsp;=&nbsp;"Oliver";</code> weisen Sie innerhalb des Hashes <code>%Daten</code> dem Element mit dem Schlüssel <code>Vorname</code> einen Wert zu. Falls bereits ein Schlüssel <code>Vorname</code> in dem Hash existiert, wird dessen bisher gespeicherter Wert durch den neu zugewiesenen Wert ersetzt. Wenn der Schlüssel dagegen noch nicht existiert, wird das Schlüssel-Wert-Paar einfach neu in den Hash aufgenommen. Ändern geht also, indem man einem vorhandenen Schlüssel einen Wert zuweist, und Hinzufügen, indem man einem noch nicht vorhandenen Schlüssel einen Wert zuweist.</p>

<p><strong>Schlüssel-Wert-Paar löschen</strong>:<br>
Zum Löschen eines kompletten Schlüssel-Wert-Paares bietet Perl die Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/listenhashes.htm#delete">delete</a> an.</p>

<p><strong>Kompletten Hash löschen</strong>:<br>
Zum Löschen aller bisher verwendeten Schlüssel-Wert-Paare initialisieren Sie einfach den Hash neu mit leerem Inhalt: <code>%Daten = ()</code>.</p>

<p><strong>Hash-Werte der Reihe nach abarbeiten und sortieren</strong>:<br>
Hashes werden intern in einer Datenstruktur gespeichert, die für Effizienz bei Schreib- und Lesezugriffen sorgt. Aufgrund dieser Tatsache ist die Reihenfolge der Schlüssel, wie sie beispielsweise von der Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/listenhashes.htm#keys">keys</a> geliefert wird, (scheinbar) mehr oder weniger zufällig und stimmt nur in den seltensten Fällen mit der Reihenfolge überein, in der Sie den Hash deklariert haben. Sie haben keine Möglichkeit, diese Reihenfolge zu verändern. Es hält Sie allerdings niemand davon ab, die Hash-Elemente in einer bestimmten Reihenfolge beispielsweise mit einer Schleife zu durchlaufen. So können Sie z.B. mit <code>@sortierteSchluessel = sort keys %Daten</code> die Schlüssel des Hashes <code>%Daten</code> alphabetisch sortieren und diese sortierte Liste von Schlüsseln dem Array <code>@sortierteSchluessel</code> zuweisen. So eine sortierte Liste von Schlüsseln können Sie anschließend (beispielsweise mit einer Schleife) benutzen, um die einzelnen Hash-Elemente in eben dieser sortierten Reihenfolge zu verarbeiten. Dabei können Sie wahlweise nach Schlüsseln oder nach Werten sortieren. Dazu müssen Sie allerdings ein paar Perl-Funktionen sowie eine Schleife anwenden. Im Abschnitt über Schleifen finden Sie eine Beschreibung zum Thema <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="schleifen.htm#schleifen_hashes">Hashes und Schleifen</a>.</p>

<p><strong>Anzahl Schlüssel-Wert-Paare eines Hashs ermitteln</strong>:<br>
Dies können Sie ebenfalls über die Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/listenhashes.htm#keys">keys</a> lösen. Mit einer Anweisung wie <code>$Anzahl = keys(%Daten);</code> speichern Sie im Skalar <code>$Anzahl</code> die Anzahl der in <code>%Daten</code> vorhandenen Schlüssel und damit der Schlüssel-Wert-Paare. Denn die Funktion <code>keys</code> gibt, wenn sie im skalaren Kontext aufgerufen wird, die Anzahl der Schlüssel zurück.</p>



<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" class="doc">
&nbsp;<a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a>
</td></tr>
<tr><td class="doc"><a href="referenzen.htm"><img src="../../src/next.gif" width="10" height="10" border="0" hspace="10" alt="weiter"></a></td>
<td width="100%"><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="referenzen.htm">Referenzen bzw. Zeiger (Variablen)</a>
</td></tr>
<tr>
<td class="doc"><a href="listen.htm"><img src="../../src/prev.gif" width="10" height="10" border="0" hspace="10" alt="zurück"></a></td>
<td><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="listen.htm">Listen bzw. Arrays (Variablen)</a>
</td>
</tr>
<tr><td colspan="2" class="doc">&nbsp;</td>
</tr>
<tr>
<td colspan="2" class="nav"><a class="an" name="bottom"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Perl</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Perl-Sprachelemente</a></td>
</tr>
</table>

<p>&copy; 2007 <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../editorial/impressum.htm">Impressum</a></p>

</body>
</html>
