<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>SELFHTML: Perl / Perl-Sprachelemente / Operatoren</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Welche Operatoren es in Perl gibt, und welche Aufgaben sie haben.">
<meta name="keywords"       content="SELFHTML, Perl, Operatoren, Zuweisung, Zuweisungsoperator, Vergleich, Vergleichsoperator, Rechenarten, Berechnungsoperator, Logische Operatoren, Bit-Operatoren, Zeichenkettenverknüpfung, Zeichenkettenwiederholung, Operatorenrangfolge">
<meta name="author"         content="Redaktion SELFHTML, selfhtml81@selfhtml.org">
<meta name="robots"         content="noindex, nofollow">
<meta name="DC.Publisher"   content="SELFHTML e. V.">
<meta name="DC.Date"        content="2005-11-09T00:29:27+01:00">
<meta name="DC.Identifier"  content="http://de.selfhtml.org/perl/sprache/operatoren.htm">
<meta name="DC.Language"    content="de">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.created" content="2001-10-27T08:00+01:00">
<meta name="SELF.Pagetype"  content="page">
<link rel="alternate" type="application/atom+xml" title="SELFHTML-Weblog (Atom, gesamt)" href="http://aktuell.de.selfhtml.org/weblog/atom-feed">
<link rel="alternate" type="application/rss+xml" title="SELFHTML-Weblog (RSS, Auszüge)" href="http://aktuell.de.selfhtml.org/weblog/rss-feed">
<link rel="shortcut icon" type="image/x-icon" href="../../src/favicon.ico">
<link rel="author" title="Impressum" href="../../editorial/impressum.htm">
<link rel="contents" title="Inhaltsverzeichnis" href="../../navigation/inhalt.htm">
<link rel="index" title="Stichwortverzeichnis" href="../../navigation/stichwort.htm">
<link rel="search" title="Suche" href="../../navigation/suche/index.htm">
<link rel="help" title="Hilfe" href="../../editorial/index.htm">
<link rel="copyright" title="Urheberrecht" href="../../editorial/copyright.htm">
<link rel="top" title="SELFHTML" href="../../index.htm">
<link rel="up" title="Perl-Sprachelemente" href="index.htm">
<link rel="next" title="Reguläre Ausdrücke" href="regexpr.htm">
<link rel="prev" title="Sprungbefehle" href="sprungbefehle.htm">
<link rel="first" title="CGI-notwendige Anweisungen in Perl" href="cginotwendig.htm">
<link rel="last" title="CGI-typische Aufgaben in Perl" href="cgitypisch.htm">
</head>
<body>

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td colspan="2" class="nav"><a class="an" name="top"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Perl</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Perl-Sprachelemente</a></td>
</tr>
<tr>
<td class="doc" width="110"><a href="../../index.htm"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></a></td>
<td class="docbot" width="100%"><h1 class="ph1">Operatoren</h1></td>
</tr>
<tr>
<td class="doctop">
<img src="../../src/dokx.gif" width="30" height="20" vspace="6" alt="Informationsseite">
</td>
<td valign="top" nowrap="nowrap">
<p>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#zuweisung">Zuweisungsoperatoren</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#vergleich">Vergleichsoperatoren</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#berechnung">Berechnungsoperatoren</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#logisch">Logische Operatoren</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#bit">Bit-Operatoren</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#zeichenkettenverknuepfung">Operator für Zeichenkettenverknüpfung</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#zeichenkettenwiederholung">Operator für Zeichenkettenwiederholung</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#rangfolge">Operatorenrangfolge</a><br>
</p>
</td>
</tr><tr><td colspan="2" class="doc">&nbsp;<a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a>&nbsp;</td></tr>
</table>



<h2><a class="an" name="zuweisung">Zuweisungsoperatoren</a></h2>

<p>Sie können zum Beispiel einem <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="skalare.htm">Skalar</a> einen Wert zuweisen. Der Zuweisungsoperator dafür ist ein Gleichheitszeichen.</p>

<h3 class="xmp">Beispiel:</h3>

<pre>
my $Name = "Josua Piesepampel";
my $Code = 4711;
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Den Skalaren wird mit dem Zuweisungsoperator <code>=</code> jeweils ein Wert zugewiesen.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="vergleich">Vergleichsoperatoren</a></h2>

<p>Vergleichsoperatoren brauchen Sie, wenn Sie zwei Werte vergleichen wollen, z.B. den aktuellen Inhalt eines Skalars mit einem fixen Wert.</p>

<h3 class="xmp">Beispiel:</h3>

<pre>
if($SinnDesLebens == 42)
 { print "Sie haben das Leben verstanden!\n" };
if($SinnDesLebens != 42)
 { print "Sie haben nix kapiert vom Leben!\n" };
if($SinnDesLebens &gt; 42)
 { print "Sind Sie wahnsinnig?\n" };
if($SinnDesLebens &lt; 42)
 { print "Sie sind eine Nummer zu klein für das Leben!\n" };
if($Alter &gt;= 18)
 { print "Sie dürfen selbst diesen Schwachsinn hier sehen!\n" };
if($Alter &lt;= 17)
 { print "Sie sind nicht mal alt genug für diesen Schwachsinn!\n" };

if($Passwort eq "Hexasex")
 { print "Sie haben Zugang zum Sex im hexadezimalen Raum!\n" };
if($Passwort ne "Hexasex")
 { print "Haben Sie lieber eindimensionalen Sex daheim im Bett!\n" };
if($Name gt "Y")
 { print "Sie sind aber auch immer der Letzte!\n" };
if($Name lt "B")
 { print "Sie sind aber auch immer der Erste!\n" };
if($Name ge "ZZ Top")
 { print "Ihre Lieblingsband ist ZZ Top oder was ganz Perverses!\n" };
if($Name le "Abba")
 { print "Ihre Lieblingsband ist Abba oder was ganz Perverses!\n" };

if($Alter =~ /[^0-9]/)
 { print "Das ist ja gar keine Zahl!\n" };
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Perl unterscheidet Vergleichsoperatoren für Zahlen und für Zeichenketten. Ferner gibt es einen speziellen Operator für Vergleiche mit
<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="regexpr.htm">regulären Ausdrücken</a>.</p>

<p>Um abzufragen, ob zwei Zahlen gleich sind, notieren Sie zwei Gleichheitszeichen <code>==</code> nebeneinander.<br>
Um abzufragen, ob zwei Zahlen unterschiedlich sind, notieren Sie zwischen beiden Werten die Zeichen <code>!=</code>.<br>
Um abzufragen, ob eine Zahl größer oder gleich ist als eine andere, notieren Sie die Zeichen <code>&gt;=</code>.<br>
Um abzufragen, ob eine Zahl in jedem Fall größer ist als eine andere, notieren Sie das Zeichen <code>&gt;</code>.<br>
Um abzufragen, ob eine Zahl kleiner oder gleich ist als eine andere, notieren Sie die Zeichen <code>&lt;=</code>.<br>
Um abzufragen, ob eine Zahl in jedem Fall kleiner ist als eine andere, notieren Sie das Zeichen <code>&lt;</code>.</p>

<p>Um abzufragen, ob zwei Zeichenketten gleich sind, notieren Sie <code>eq</code> zwischen den beiden Werten, die verglichen werden sollen (<i>eq = equal = gleich</i>).<br>
Um abzufragen, ob zwei Zeichenketten unterschiedlich sind, notieren Sie <code>ne</code> zwischen den beiden Werten, die verglichen werden sollen (<i>ne = not equal = nicht gleich</i>).<br>
Um abzufragen, ob eine erste Zeichenkette alphabetisch weiter hinten liegt als eine zweite, notieren Sie <code>gt</code> zwischen den beiden Werten, die verglichen werden sollen (<i>gt = greater than = größer als</i>).<br>
Um abzufragen, ob eine erste Zeichenkette alphabetisch weiter vorne liegt als eine zweite, notieren Sie <code>lt</code> zwischen den beiden Werten, die verglichen werden sollen (<i>lt = less than = kleiner als</i>).<br>
Um abzufragen, ob eine erste Zeichenkette alphabetisch gleich ist wie eine zweite oder weiter hinten liegt, notieren Sie <code>ge</code> zwischen den beiden Werten, die verglichen werden sollen (<i>ge = greater or equal = größer oder gleich</i>).<br>
Um abzufragen, ob eine erste Zeichenkette alphabetisch gleich ist wie eine zweite oder weiter vorne liegt, notieren Sie <code>le</code> zwischen den beiden Werten, die verglichen werden sollen (<i>le = less or equal = kleiner oder gleich</i>).</p>

<p>Um den Wert eines Skalars, egal ob Zahl oder Zeichenkette, mit einem regulären Ausdruck zu vergleichen (Fachjargon: an einen regulären Ausdruck zu binden), benutzen Sie den Bindungsoperator <code>=~</code>.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="berechnung">Berechnungsoperatoren</a></h2>

<p>Um mit numerischen Werten Berechnungen durchzuführen, brauchen Sie Berechnungsoperatoren.</p>

<h3 class="xmp">Beispiel:</h3>

<pre>
$Hundertlasser = 83 + 17;
$Hundertlasser = 113 - 13;
$Hundertlasser = 4 * 25;
$Hundertlasser = 450 / 4.5;
$Hundertlasser = 450 / 2 - 125;
$Hundertlasser = 10 * (2 + 8);
$Hundertlasser = 10 ** 2;
$x = $Hundertlasser % 4;
if($x == 0)
 { print $Hundertlasser, " ist ein Schaltjahr\n" }

# Besondere Notationen:

$Zahl = 100;
$Zahl++;      # $Zahl um 1 erhoehen
$Zahl--;      # $Zahl um 1 erniedrigen
$Zahl += 10;  # $Zahl um 10 erhoehen
$Zahl -= 10;  # $Zahl um 10 erniedrigen
$Zahl *= 10;  # $Zahl mit 10 multiplizieren
$Zahl /= 10;  # $Zahl durch 10 dividieren
$Zahl %= 10;  # $Zahl durch 10 modulo-dividieren
$Zahl **= 2;  # $Zahl hoch 2 errechnen
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Mathematische Operatoren notieren Sie mit den dafür üblichen Zeichen. Mit <code>+</code> notieren Sie eine Addition, mit <code>-</code> eine Subtraktion, mit <code>*</code> eine Multiplikation, mit <code>/</code> eine Division, und mit <code>**</code> eine Potenzoperation "x hoch y". Eine Besonderheit stellt der Operator <code>%</code> dar. Damit wird eine so genannte Modulo-Division durchgeführt. Bei einer Modulo-Division werden zwei Werte dividiert. Das Ergebnis ist jedoch im Gegensatz zur normalen Division nur der Restwert der Division. Wenn Sie z.B. <code>13 % 5</code> notieren, erhalten Sie als Ergebnis 3, weil 13 geteilt durch 5 gleich 2 Rest 3 ergibt. Diese 3 ist es, die als Ergebnis einer Modulo-Division herauskommt.</p>

<p>Sie können mehrere Operationen in Reihe notieren. Dabei gilt die übliche "Punkt-vor-Strich-Regel". Wenn Sie eine andere Regel erzwingen wollen, müssen Sie Klammern verwenden, so wie im obigen Beispiel <code>$Hundertlasser&nbsp;=&nbsp;10&nbsp;*&nbsp;(2&nbsp;+&nbsp;8);</code>.</p>

<p>Die besonderen Notationen, die in den obigen Beispielen vorkommen, können Sie verwenden, wenn Sie Additionen oder Subtraktionen abkürzen wollen:<br>
<code>$Zahl++;</code> ist eine Abkürzung für <code>$Zahl = $Zahl + 1;</code><br>
<code>$Zahl--;</code> ist eine Abkürzung für <code>$Zahl = $Zahl - 1;</code><br>
<code>$Zahl += 10;</code> ist eine Abkürzung für <code>$Zahl = $Zahl + 10;</code><br>
usw. bei den gleichartigen Operationen.</p>

<p>Der Operator <code>++</code> wird auch als Inkrementationsoperator bezeichnet, der Operator <code>--</code> als Dekrementationsoperator.</p>

<h3 class="inf">Beachten Sie:</h3>

<p>Bei den Operatoren <code>++</code> und <code>--</code> gibt es eine Besonderheit, die auf C bzw. sogar auf die Maschinensprache (Assembler) zurückzuführen ist. Die Operatoren können sowohl vor als auch nach der Variablen notiert werden (also z.B. sowohl <code>$Zahl++</code> als auch <code>++$Zahl</code>). Werden sie davor notiert, wird die Operation ausgeführt, bevor der Ausdruck ausgewertet wird (Fachjargon: Pre-In-/Dekrement). Umgekehrt gilt: wird der Operator nach der Variablen notiert, wird die Operation ausgeführt, nachdem der Ausdruck ausgewertet wurde (Fachjargon: Post-In-/Dekrement). Die Ausgabe des folgenden Codes sollte Sie also nicht überraschen:<br>
<code>my $Zahl=1;<br>
print $Zahl++;<br>
print --$Zahl;</code><br>
Es wird zweimal <code>1</code> ausgegeben. Beim erstenmal, weil <code>$Zahl</code> ausgegeben wird, bevor Eins dazuaddiert wird. Beim zweitenmal, weil Eins subtrahiert wird, bevor <code>$Zahl</code> ausgegeben wird.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="logisch">Logische Operatoren</a></h2>

<p>Logische Operatoren brauchen Sie, um Ausdrücke zu formulieren, die wahr oder falsch sein können. Verwendung finden solche Ausdrücke besonders in Bedingungen für <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="bedingt.htm">bedingte Anweisungen</a> oder <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="schleifen.htm">Schleifen</a>.</p>

<h3 class="xmp">Beispiel:</h3>

<pre>
if($a == 1 &amp;&amp; $b == 2) {
  # wenn a = 1 ist und b = 2
}
if($a == 1 and $b == 2) {
  # wenn a = 1 ist und b = 2
}
if($a == 1 || $b == 1) {
  # wenn a = 1 oder b = 1 ist
}
if($a == 1 or $b == 1) {
  # wenn a = 1 oder b = 1 ist
}
if($a == 1 ^ $b == 1) {
  # wenn entweder a = 1 oder b = 1 ist
}
if($a == 1 xor $b == 1) {
  # wenn entweder a = 1 oder b = 1 ist
}
if (! ($a == 2)) {
  # nicht a = 2
}
if (not ($a == 2)) {
  # nicht a = 2
}
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Mit dem logischen Operator <code>&amp;&amp;</code> oder dem Wort dafür (<code>and</code>) verknüpfen Sie zwei oder mehrere Bedingungen durch "und", d.h. beide bzw. alle Bedingungen müssen erfüllt sein, damit die gesamte Bedingung erfüllt ist.<br>
Mit dem logischen Operator <code>||</code> oder dem Wort dafür (<code>or</code>) verknüpfen Sie zwei oder mehrere Bedingungen inklusiv durch "oder", d.h. es genügt, wenn eine der Bedingungen erfüllt ist, damit die gesamte Bedingung erfüllt ist.<br>
Mit dem logischen Operator <code>^</code> oder dem Wortkürzel dafür (<code>xor</code>) verknüpfen Sie zwei oder mehrere Bedingungen exklusiv durch "oder", d.h. es muss entweder die eine oder die andere Bedingungen erfüllt sein, damit die gesamte Bedingung erfüllt ist.<br>
Mit dem logischen Operator <code>!</code> oder dem Wortkürzel dafür (<code>not</code>) verneinen Sie eine nachfolgende Bedingung, d.h. Sie fragen nicht, ob die Bedingung wahr ist, sondern ob sie falsch ist.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="bit">Bit-Operatoren</a></h2>

<p>Um Bit-Operatoren richtig einzusetzen, müssen Sie viel von computer-internen Speichervorgängen verstehen. Deshalb werden die Bit-Operatoren hier nur kurz erwähnt.</p>

<p><code>&gt;&gt;</code> verschiebt Bits nach rechts<br>
<code>&lt;&lt;</code> verschiebt Bits nach links<br>
<code>&amp;</code> verknüpft zwei Werte mit einem bitweisen UND<br>
<code>|</code> verknüpft zwei Werte mit einem bitweisen ODER<br>
<code>^</code> verknüpft zwei Werte mit einem bitweisen Exlusiv-Oder (XOR)<br>
<code>~</code> bildet das Komplement eines Wertes (alle Bits kehren sich um)</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="zeichenkettenverknuepfung">Operator für Zeichenkettenverknüpfung</a></h2>

<p>In Perl brauchen Sie nicht wie in manchen anderen Programmiersprachen eine Funktion, um Zeichenketten zu verknüpfen, sondern es gibt einen Operator dafür.</p>

<h3 class="xmp"><a class="an" name="beispiel">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/operatoren.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $HTML_Ausgabe = "Die Umgebungsvariable &lt;b&gt;HTTP_USER_AGENT&lt;/b&gt; hat den Wert &lt;b&gt;".$ENV{HTTP_USER_AGENT}."&lt;/b&gt;&lt;br&gt;";
$HTML_Ausgabe .= "&lt;hr&gt;Ende der Ausgabe";

print "Content-type: text/html\n\n";
print '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;', "\n";
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Testausgabe&lt;/title&gt;\n";
print "&lt;/head&gt;&lt;body&gt;\n";

print $HTML_Ausgabe;

print "&lt;/body&gt;&lt;/html&gt;\n";
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Ein Punkt <code>.</code> ist der Operator, um Zeichenketten miteinander zu verknüpfen. Die verknüpften Zeichenketten können literal sein, also einfach Text enthalten, aber auch eine Variable sein. Im Beispiel-Script sehen Sie einen für CGI-Scripts typischen Anwendungsfall für den Zeichenkettenoperator. Dort wird eine längere HTML-Ausgabe, gespeichert im Skalar <code>$HTML_Ausgabe</code>, aus einzelnen Zeichenketten zusammengebastelt. Unter anderem wird dabei der Wert der Umgebungsvariablen <code>HTTP_USER_AGENT</code>, die Namen und Version des aufrufenden Browsers enthält, mit eingefügt.</p>

<p>Das Beispiel-Script zeigt in der zweiten Anweisung auch, wie sich neue Zeichenketten an eine bereits vorhandene anhängen lassen. Mit <code>.=</code> wird das, was rechts davon steht, einfach der Variablen zugewiesen, die links davon steht. Die gleiche Anweisung könnten Sie übrigens auch in folgender Langform notieren:<br>
<code>$HTML_Ausgabe = $HTML_Ausgabe."&lt;hr&gt;Ende der Ausgabe";</code>
</p>

<p>Das Script gibt die zusammengesetzte Zeichenkette mit einer <code>print</code>-Anweisung aus.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="zeichenkettenwiederholung">Operator für Zeichenkettenwiederholung</a></h2>

<p>In Perl können Sie mit <code>x</code> Zeichenketten "multiplizieren".</p>

<h3 class="xmp">Beispiel:</h3>

<pre>
print "A"."h" x 10, "!\n";
# erzeugt die Ausgabe "Ahhhhhhhhhh!"
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Notieren Sie den <code>x</code>-Operator hinter der Zeichenkette, die Sie multiplizieren wollen. Hinter dem Operator geben Sie an, wie oft die Zeichenkette wiederholt werden soll.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="rangfolge">Operatorenrangfolge</a></h2>

<p>Unter den Operatoren von Perl gibt es eine festgelegte Rangordnung. Wenn Sie komplexe Rechenoperationen durchführen oder mehrere Bedingungen miteinander verknüpfen, gilt bei der internen Auflösung solcher komplexen Ausdrücke die folgende Rangordnung:</p>

<ol>
<li>Rangstufe: <code>++ --</code> (Inkrementieren, Dekrementieren)</li>
<li>Rangstufe: <code>**</code> (Potenzierung)</li>
<li>Rangstufe: <code>! ~</code> (logische und bitweise Negation)</li>
<li>Rangstufe: <code>=~ !~</code> (Bindung an <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="regexpr.htm">reguläre Ausdrücke</a>)</li>
<li>Rangstufe: <code>* / % x</code> (Multiplikation, Division, Modulo-Operation, Zeichenkettenwiederholung)</li>
<li>Rangstufe: <code>+ - .</code> (Addition, Subtraktion, Zeichenkettenaddition)</li>
<li>Rangstufe: <code>&lt;&lt; &gt;&gt;</code> (Verschieben von Bits)</li>
<li>Rangstufe: <code>&lt; &lt;= &gt; &gt;= lt le gt ge</code> (Vergleich größer/kleiner)</li>
<li>Rangstufe: <code>== != eq ne</code> (Gleichheit/Ungleichheit)</li>
<li>Rangstufe: <code>&amp;</code> (bitweises UND)</li>
<li>Rangstufe: <code>| ^</code> (bitweises ODER - inklusiv/exklusiv)</li>
<li>Rangstufe: <code>&amp;&amp;</code> (logisches UND)</li>
<li>Rangstufe: <code>||</code> (logisches ODER)</li>
<li>Rangstufe: <code>..</code> (Bereichsdefinition in <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="listen.htm">Listen</a>)</li>
<li>Rangstufe: <code>?:</code> (<img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="bedingt.htm#entweder_oder">Entweder-Oder-Bedingung</a>)</li>
<li>Rangstufe: <code>= += -= &amp;= ^= |= </code>  (Zuweisung)</li>
<li>Rangstufe: <code>, =&gt;</code> (Aneinanderreihung)</li>
<li>Rangstufe: <code>not</code> (logische Negation)</li>
<li>Rangstufe: <code>and</code> (logisches UND)</li>
<li>Rangstufe: <code>or xor</code> (logisches ODER (inklusiv/exklusiv)</li>
</ol>

<p>Mit Hilfe von Klammern können Sie die Rangfolge bei den Operatoren beeinflussen und Ausdrücke so bewerten, wie Sie es wünschen.</p>

<h3 class="xmp">Beispiel:</h3>

<pre>
$OffizielleStatistik = 3.29 * 3 + 4.71;
$MeineStatistik = 3.29 * (3 + 4.71);
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Durch die Klammer wird in dem Beispiel die "Punkt-vor-Strich"-Regel, die auch unter den Berechnungsoperatoren von Perl gilt, aufgehoben.</p>



<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" class="doc">
&nbsp;<a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a>
</td></tr>
<tr><td class="doc"><a href="regexpr.htm"><img src="../../src/next.gif" width="10" height="10" border="0" hspace="10" alt="weiter"></a></td>
<td width="100%"><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="regexpr.htm">Reguläre Ausdrücke</a>
</td></tr>
<tr>
<td class="doc"><a href="sprungbefehle.htm"><img src="../../src/prev.gif" width="10" height="10" border="0" hspace="10" alt="zurück"></a></td>
<td><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="sprungbefehle.htm">Sprungbefehle</a>
</td>
</tr>
<tr><td colspan="2" class="doc">&nbsp;</td>
</tr>
<tr>
<td colspan="2" class="nav"><a class="an" name="bottom"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Perl</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Perl-Sprachelemente</a></td>
</tr>
</table>

<p>&copy; 2007 <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../editorial/impressum.htm">Impressum</a></p>

</body>
</html>
