<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>SELFHTML: Perl / Perl-Sprachelemente / Vordefinierte Variablen in Perl</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Welche vordefinierten Variablen es in Perl gibt und wozu sie gedacht sind.">
<meta name="keywords"       content="SELFHTML, Perl, Variablen, Skalare, Listen, Hashs, Umgebungsvariablen, vordefinierte Variablen">
<meta name="author"         content="Redaktion SELFHTML, selfhtml81@selfhtml.org">
<meta name="robots"         content="noindex, nofollow">
<meta name="DC.Publisher"   content="SELFHTML e. V.">
<meta name="DC.Date"        content="2005-11-09T00:29:27+01:00">
<meta name="DC.Identifier"  content="http://de.selfhtml.org/perl/sprache/vordefiniert.htm">
<meta name="DC.Language"    content="de">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.created" content="2001-10-27T08:00+01:00">
<meta name="SELF.Pagetype"  content="page">
<link rel="alternate" type="application/atom+xml" title="SELFHTML-Weblog (Atom, gesamt)" href="http://aktuell.de.selfhtml.org/weblog/atom-feed">
<link rel="alternate" type="application/rss+xml" title="SELFHTML-Weblog (RSS, Auszüge)" href="http://aktuell.de.selfhtml.org/weblog/rss-feed">
<link rel="shortcut icon" type="image/x-icon" href="../../src/favicon.ico">
<link rel="author" title="Impressum" href="../../editorial/impressum.htm">
<link rel="contents" title="Inhaltsverzeichnis" href="../../navigation/inhalt.htm">
<link rel="index" title="Stichwortverzeichnis" href="../../navigation/stichwort.htm">
<link rel="search" title="Suche" href="../../navigation/suche/index.htm">
<link rel="help" title="Hilfe" href="../../editorial/index.htm">
<link rel="copyright" title="Urheberrecht" href="../../editorial/copyright.htm">
<link rel="top" title="SELFHTML" href="../../index.htm">
<link rel="up" title="Perl-Sprachelemente" href="index.htm">
<link rel="next" title="Zeichenketten (Strings)" href="zeichenketten.htm">
<link rel="prev" title="Referenzen bzw. Zeiger (Variablen)" href="referenzen.htm">
<link rel="first" title="CGI-notwendige Anweisungen in Perl" href="cginotwendig.htm">
<link rel="last" title="CGI-typische Aufgaben in Perl" href="cgitypisch.htm">
</head>
<body>

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td colspan="2" class="nav"><a class="an" name="top"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Perl</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Perl-Sprachelemente</a></td>
</tr>
<tr>
<td class="doc" width="110"><a href="../../index.htm"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></a></td>
<td class="docbot" width="100%"><h1 class="ph1">Vordefinierte Variablen in Perl</h1></td>
</tr>
<tr>
<td class="doctop">
<img src="../../src/dokx.gif" width="30" height="20" vspace="6" alt="Informationsseite">
</td>
<td valign="top" nowrap="nowrap">
<p>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#allgemeines">Allgemeines zu vordefinierten Variablen</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#skalare">Vordefinierte Skalare</a><br>
<img src="../../src/down.gif" width="14" height="10" alt="nach unten">&nbsp;<a href="#arrays_hashes">Vordefinierte Listen und Hashes</a><br>
</p>
</td>
</tr><tr><td colspan="2" class="doc">&nbsp;<a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a>&nbsp;</td></tr>
</table>



<h2><a class="an" name="allgemeines">Allgemeines zu vordefinierten Variablen</a></h2>

<p>Perl hält eine Fülle spezieller vordefinierter Variablen bereit. Den Inhalt dieser Variablen können Sie auslesen, um Informationen zur aktuellen Perl-Konfiguration oder die Systemkonfiguration des Rechners, auf dem das Script und der Perl-Interpreter laufen, zu ermitteln. Einige der Variablen sind aber auch Hilfsvariablen, die das Programmieren erleichtern. So gibt es z.B. eine Variable, die in einer Schleife den jeweils aktuellen Wert bereitstellt, oder eine Variable, die übergebene Parameter speichert.</p>

<p>Viele der vordefinierten Variablen sehen optisch übel aus und sind ein Mitgrund, warum Perl mancherorts als unverständliche Hacker-Sprache gilt. Denn wer sich nicht mit Perl auskennt, für den sind Variablennamen wie <code>$_</code>, <code>$/</code>, <code>$"</code> oder <code>$%</code> eine Zumutung. Neben dieser klassischen Kurznotation gibt es deshalb auch "Klartext"-Varianten dieser Variablen. Doch dazu muss man ein Modul namens <code>English</code> einbinden, das jedoch den Nachteil hat, dass es die Ausführungsgeschwindigkeit des Scripts senkt und wie alle anderen Module auch den Ressourcenbedarf erhöht. Demgegenüber steht der Vorteil, dass Ihr Programm für Sie besser lesbar wird.</p>

<p>Das folgende Beispiel zeigt einige der vordefinierten Variablen in Aktion:</p>

<h3 class="xmp"><a class="an" name="beispiel">Beispiel eines vollständigen CGI-Scripts in Perl:</a></h3>

<p><img src="../../src/dokf.gif" width="15" height="10" alt="Beispiel-Seite">&nbsp;<a href="http://de.selfhtml.org/cgi-bin/812/vordefiniert.pl">Anzeigebeispiel: So sieht's aus</a> (Zum Aufruf des Scripts ist eine Internet-Verbindung erforderlich)</p>

<pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);
use English;

print "Content-type: text/plain\n\n";
print "===Vordefinierte Skalare====================================\n\n";
print "Prozessnummer dieses laufenden Prozesses: $$ oder $PID\n";
print "Bei diesem Prozess ausgeführte Datei:  $0 oder $PROGRAM_NAME \n";
print "Diesen Prozess ausführender Interpreter:  $^X oder $EXECUTABLE_NAME \n";
print "Versionsnummer des Perl-Interpreter:  $] oder $PERL_VERSION \n";
print "Startzeit des Prozesses:  $^T oder $BASETIME \n";
print "Betriebssystem:  $^O oder $OSNAME \n";
print "\n\n===Vordefinierte Listen=====================================\n\n";
print "Übergebene Argumente:\n";
my $i = 0;
foreach (@ARGV) {
  print ++$i,". Argument: $_\n";
}
$i = 0;
print "\nSuchpfad für Perl-Module:\n";
foreach (@INC) {
  print ++$i,". Pfad: $_\n";
}
print "\n\n===Vordefinierter Hash======================================\n\n";
foreach (keys %ENV) {
  printf " %20s:  $ENV{$_} \n",$_;
}
</pre>

<h3 class="xpl">Erläuterung:</h3>

<p>Das Beispiel erzeugt mit dem <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../diverses/mimetypen.htm">MIME-Typ</a> <code>text/plain</code> Text. Dabei werden die Werte verschiedener vordefinierter Variablen ausgegeben. Einige werden zur Kontrolle zweimal ausgegeben, nämlich einmal in der klassischen Kurzform und einmal in der Klartextform, die aber nur möglich ist, weil mit <code>use English;</code> das entsprechende <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../module/standardmodule.htm">Standardmodul</a> eingebunden wird. So enthalten beispielsweise <code>$$</code> und <code>$PID</code> den gleichen Wert.</p>

<p>Die einzelnen Elemente vordefinierter Arrays und Hashes wie <code>@ARGV</code>, <code>@INC</code> und <code>%ENV</code> werden in dem Script jeweils mit Hilfe einer <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="schleifen.htm#foreach">foreach-Schleife</a> sauber formatiert ausgegeben. Dabei wird auch der vordefinierte Skalar <code>$_</code> verwendet, der wohl die am häufigsten in der Praxis verwendete vordefinierte Variable ist.</p>

<p>Der Array <code>@ARGV</code> ist übrigens leer, solange Sie das Script ohne Kommandozeilen-Parameter aufrufen.</p>



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="skalare">Vordefinierte Skalare</a></h2>

<p>Die Tabellen beschreiben vordefinierte Skalare. Beispiele sind nur dort vorhanden, wo keine größere Beispielumgebung erforderlich ist. Einige der Skalare sind betriebssystemspezifisch bzw. ausschließlich in Unix-Umgebungen von Bedeutung. </p>

<p>Um die Langformen der Variablen zu nutzen, müssen Sie mit <code>use English;</code> das entsprechende Standardmodul in Ihr Script einbinden.</p>

<h3>Vordefinierte Skalare für Programmablauf und reguläre Ausdrücke</h3>

<table class="reftable" cellpadding="3" cellspacing="0" border="1">
<tr>
<th nowrap="nowrap">Kurzform</th>
<th nowrap="nowrap">Langform</th>
<th nowrap="nowrap">Bedeutung</th>
<th nowrap="nowrap">Kleines Beispiel</th>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="arg">$_</a></code></td>
<td class="code" nowrap="nowrap"><code>$ARG</code></td>
<td class="tabxpl">Enthält in Schleifen (z.B. bei der Suche in einer Liste mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="schleifen.htm#foreach">foreach</a>), wenn keine andere Variable angegeben wurde, den jeweils aktuellen Wert bzw. das jeweils aktuelle Argument. Wird von einigen <img src="../../src/kap.gif" width="15" height="13" alt="Kapitel">&nbsp;<a href="../funktionen/index.htm">Perl-Funktionen</a> als Argument akzeptiert, d.h. den Funktionen muss kein expliziter Wert übergeben werden, wenn <code>$_</code> als Argument gemeint ist. Enthält bei Operationen mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="regexpr.htm">regulären Ausdrücken</a> den jeweils aktuellen Wert.</td>
<td class="code"><pre>
@Zahlen = (1..10);
foreach(@Zahlen) {
 print $_, "\n";
}</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="reg">$1</a></code>, <code>$2</code> usw.</td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Enthält bei Operationen mit regulären Ausdrücken mit runden Klammern jeweils den Wert eines <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="regexpr.htm#merken">gemerkten Teilausdrucks</a>. Nur lesbar, nicht änderbar.</td>
<td class="code"><pre>
if(/from: (.*)/) {
 $Absender = $1;
}</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="match">$&amp;</a></code></td>
<td class="code" nowrap="nowrap"><code>$MATCH</code></td>
<td class="tabxpl">Enthält nach Anwenden eines regulären Ausdrucks den letzten Wert, auf den das Suchmuster passte. Nur lesbar, nicht änderbar. Die Verwendung dieser Variablen verlangsamt das gesamte Programm, daher wird die Benutzung von Profis nicht empfohlen.</td>
<td class="code"><pre>
$_ = "Mann und Frau";
/und/;
print "$&amp;\n";</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="prematch">$`</a></code></td>
<td class="code" nowrap="nowrap"><code>$PREMATCH</code></td>
<td class="tabxpl">Enthält den Teil des Gesamtausdrucks vor dem letzten Wert, auf den das Suchmuster passte. Nur lesbar, nicht änderbar. Das <code>`</code> ist das Accent-grave-Zeichen. Auf vielen Tastaturen Shift-Taste und Accent-Taste drücken, dann ein Leerzeichen tippen. Die Verwendung dieser Variablen verlangsamt das gesamte Programm, daher wird die Benutzung von Profis nicht empfohlen.</td>
<td class="code"><pre>
$_ = "Mann und Frau";
/ und/;
print "$`\n";</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="postmatch">$'</a></code></td>
<td class="code" nowrap="nowrap"><code>$POSTMATCH</code></td>
<td class="tabxpl">Enthält den Teil des Gesamtausdrucks nach dem letzten Wert, auf den das Suchmuster passte. Nur lesbar, nicht änderbar. Das <code>'</code> ist der einfache Apostroph. Die Verwendung dieser Variablen verlangsamt das gesamte Programm, daher wird die Benutzung von Profis nicht empfohlen.</td>
<td class="code"><pre>
$_ = "Mann und Frau";
/und /;
print "$'\n";</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="last_paren_match">$+</a></code></td>
<td class="code" nowrap="nowrap"><code>$LAST_PAREN_MATCH</code></td>
<td class="tabxpl">Enthält nach Anwenden eines regulären Ausdrucks mit Klammern den Inhalt der letzten Klammer. Nur lesbar, nicht änderbar.</td>
<td class="code"><pre>
$_ = "Mann und Frau";
/([a-zA-Z]*) und ([a-zA-Z]*)/;
print "$+\n";</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="input_line_nr">$.</a></code></td>
<td class="code" nowrap="nowrap"><code>$NR<br>$INPUT_LINE_NR</code></td>
<td class="tabxpl">Enthält die aktuelle Zeilennummer der zuletzt eingelesenen Datei. Im nebenstehenden Beispiel werden alle Zeilen einer Textdatei eingelesen und ausgegeben. Am Ende kann <code>$.</code> darüber Auskunft geben, wie viele Zeilen eingelesen wurden.</td>
<td class="code"><pre>open(DATEI, "&lt;readme.txt");
while(&lt;DATEI&gt;)
 { print $_; }
print $., " Zeilen gelesen";
close(DATEI);</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="input_record_separator">$/</a></code></td>
<td class="code" nowrap="nowrap"><code>$RS<br>INPUT_RECORD_SEPARATOR</code></td>
<td class="tabxpl">Enthält den eingestellten Eingabeseparator. Kann geändert werden - auch mehrere Zeichen sind erlaubt. Das nebenstehende Beispiel bewirkt, dass eine Eingabe von der Standardeingabe erst dann abgeschlossen ist, wenn der Anwender die Zeichenfolge <kbd>ENDE</kbd> eingibt und <kbd>Return</kbd> drückt.<br>
Der voreingestellte Wert ist das Zeilenumbruch-Zeichen <code>\n</code>
</td>
<td class="code"><pre>$/ = "ENDE";<br>
$DeinName = &lt;STDIN&gt;;<br>
print $DeinName;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="output_record_separator">$\</a></code></td>
<td class="code" nowrap="nowrap"><code>$ORS<br>OUTPUT_RECORD_SEPARATOR</code></td>
<td class="tabxpl">Erlaubt die Zuweisung einer Zeichenfolge, die automatisch an jede Ausgabe mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#print">print</a> eingefügt wird.</td>
<td class="code"><pre>$\ = ";";
print "ein Wert";</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="output_field_separator">$,</a></code></td>
<td class="code" nowrap="nowrap"><code>$OFS<br>OUTPUT_FIELD_SEPARATOR</code></td>
<td class="tabxpl">Erlaubt die Zuweisung einer Zeichenfolge, die automatisch an jeden Einzelwert angehängt wird, der mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#print">print</a> in Form mehrerer, durch Kommata getrennter Einzelwerte ausgegeben wird.</td>
<td class="code"><pre>$, = ",";
print "Wert","noch einer";
</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="list_separator">$"</a></code></td>
<td class="code" nowrap="nowrap"><code>$LIST_SEPARATOR</code></td>
<td class="tabxpl">Erlaubt die Zuweisung einer Zeichenfolge, die automatisch an jeden Einzelwert außer dem letzten angehängt wird, wenn mit <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#print">print</a> eine Liste bzw. ein Array innerhalb einer Zeichenkette interpoliert ausgegeben wird.</td>
<td class="code"><pre>$" = "-";
@Liste = (1,2,3,4);
print "@Liste";</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="output_autoflush">$|</a></code></td>
<td class="code" nowrap="nowrap"><code>$OUTPUT_AUTOFLUSH</code></td>
<td class="tabxpl">Wenn diese Variable auf einen Wert ungleich <code>0</code> gesetzt wird, werden Ausgaben mit <code>print</code> nicht gepuffert, sondern erfolgen in dem Augenblick, wo die <code>print</code>-Anweisung interpretiert wird. Normalerweise puffert Perl Ausgaben, um sie dann blockweise auszugeben.</td>
<td class="code"><pre>$| = 1;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="format_page_number">$%</a></code></td>
<td class="code" nowrap="nowrap"><code>$FORMAT_PAGE_NUMBER</code></td>
<td class="tabxpl">Siehe Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#format">format</a>.</td>
<td class="code"><pre>&nbsp;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="format_lines_per_page">$=</a></code></td>
<td class="code" nowrap="nowrap"><code>$FORMAT_LINES_PER_PAGE</code></td>
<td class="tabxpl">Siehe Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#format">format</a>.</td>
<td class="code"><pre>&nbsp;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="format_lines_left">$-</a></code></td>
<td class="code" nowrap="nowrap"><code>$FORMAT_LINES_LEFT</code></td>
<td class="tabxpl">Siehe Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#format">format</a>.</td>
<td class="code"><pre>&nbsp;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="format_name">$~</a></code></td>
<td class="code" nowrap="nowrap"><code>$FORMAT_NAME</code></td>
<td class="tabxpl">Siehe Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#format">format</a>.</td>
<td class="code"><pre>&nbsp;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="format_top_name">$^</a></code></td>
<td class="code" nowrap="nowrap"><code>$FORMAT_TOP_NAME</code></td>
<td class="tabxpl">Siehe Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#format">format</a>.</td>
<td class="code"><pre>&nbsp;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="format_line_break_characters">$:</a></code></td>
<td class="code" nowrap="nowrap"><code>$FORMAT_LINE_<br>BREAK_CHARACTERS</code></td>
<td class="tabxpl">Siehe Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#format">format</a>.</td>
<td class="code"><pre>&nbsp;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="format_formfeed">$^L</a></code></td>
<td class="code" nowrap="nowrap"><code>$FORMAT_FORMFEED</code></td>
<td class="tabxpl">Siehe Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#format">format</a>.</td>
<td class="code"><pre>&nbsp;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="accumulator">$^A</a></code></td>
<td class="code" nowrap="nowrap"><code>$ACCUMULATOR</code></td>
<td class="tabxpl">Siehe Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#format">format</a>.</td>
<td class="code"><pre>&nbsp;</pre></td>
</tr>
</table>
<br>&nbsp;

<h3>Vordefinierte Skalare für Umgebungsinformationen</h3>

<table class="reftable" cellpadding="3" cellspacing="0" border="1">
<tr>
<th nowrap="nowrap">Kurzform</th>
<th nowrap="nowrap">Langform</th>
<th nowrap="nowrap">Bedeutung</th>
<th nowrap="nowrap">Kleines Beispiel</th>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="child_error">$?</a></code></td>
<td class="code" nowrap="nowrap"><code>$CHILD_ERROR</code></td>
<td class="tabxpl">Enthält den Status, der zuletzt von einem <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/systemaufrufe.htm#system">system</a>-Aufruf, einer geschlossenen Pipe oder durch Backticks von einem Kindprozess erzeugt wurde.</td>
<td class="code"><pre>system($command) == 0
  or die "Fehler bei system: $?"</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="os_error">$!</a></code></td>
<td class="code" nowrap="nowrap"><code>$ERRNO<br>$OS_ERROR</code></td>
<td class="tabxpl">Enthält eine im Programm-Kontext aktuelle Fehlermeldung oder Fehlernummer, sofern ein Fehler aufgetreten ist. Die nebenstehende Anweisung versucht eine Datei zu öffnen und gibt im Fehlerfall die vordefinierte Perl-Fehlermeldung aus, wenn die Datei nicht geöffnet werden kann und beendet das Programm.</td>
<td class="code"><pre>open(DATEI, "&lt;nixda.txt")
  or die "Fehler bei open: $!";</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="eval_error">$@</a></code></td>
<td class="code" nowrap="nowrap"><code>$EVAL_ERROR</code></td>
<td class="tabxpl">Enthält einen Wert ungleich <code>null</code>, sofern ein Fehler bei einer Anwendung von <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/kontrolle.htm#eval">eval</a> aufgetreten ist.  Wenn kein Fehler aufgetreten ist, enthält sie nichts.</td>
<td class="code"><pre>eval { system("dir"); };
if($@) {
 print "dir nicht möglich\n";
}
</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="process_id">$$</a></code></td>
<td class="code" nowrap="nowrap"><code>$PID<br>$PROCESS_ID</code></td>
<td class="tabxpl">Enthält die Prozess-ID des aktuellen Prozesses, in dem das Script läuft, so wie sie vom Betriebssystem zugewiesen wurde.</td>
<td class="code"><pre>print $$;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="real_user_id">$&lt;</a></code></td>
<td class="code" nowrap="nowrap"><code>$UID<br>REAL_USER_ID</code></td>
<td class="tabxpl">Enthält die reale User-ID des den aktuellen Prozess ausführenden Benutzers (sofern das Betriebssystem, auf dem der Perl-Interpreter übersetzt wurde, das unterstützt).</td>
<td class="code"><pre>print $&lt;;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="effective_user_id">$&gt;</a></code></td>
<td class="code" nowrap="nowrap"><code>$EUID<br>EFFECTIVE_USER_ID</code></td>
<td class="tabxpl">Enthält die effektive User-ID des den aktuellen Prozess ausführenden Benutzers (sofern das Betriebssystem, auf dem der Perl-Interpreter übersetzt wurde, das unterstützt).</td>
<td class="code"><pre>print $&gt;;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="real_group_id">$(</a></code></td>
<td class="code" nowrap="nowrap"><code>$GID<br>REAL_GROUP_ID</code></td>
<td class="tabxpl">Enthält die reale Gruppen-ID des den aktuellen Prozess ausführenden Benutzers (sofern das Betriebssystem, auf dem der Perl-Interpreter übersetzt wurde, das unterstützt). Ist der Benutzer Mitglied in mehreren Gruppen, so enthält diese Variable die einzelnen Gruppen-IDs durch Leerzeichen voneinander getrennt.</td>
<td class="code"><pre>print $(;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="effective_group_id">$)</a></code></td>
<td class="code" nowrap="nowrap"><code>$EGID<br>EFFECTIVE_GROUP_ID</code></td>
<td class="tabxpl">Enthält die effektive Gruppen-ID des den aktuellen Prozess ausführenden Benutzers (sofern das Betriebssystem, auf dem der Perl-Interpreter übersetzt wurde, das unterstützt). Ist der Benutzer Mitglied in mehreren Gruppen, so enthält diese Variable die einzelnen Gruppen-IDs durch Leerzeichen voneinander getrennt.</td>
<td class="code"><pre>print $);</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="program_name">$0</a></code></td>
<td class="code" nowrap="nowrap"><code>$PROGRAM_NAME</code></td>
<td class="tabxpl">Enthält den Namen des laufenden Scripts.</td>
<td class="code"><pre>print $0;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="perl_version_old">$]</a></code></td>
<td class="code" nowrap="nowrap">&nbsp;</td>
<td class="tabxpl">Enthält die genaue Versionsnummer des ausführenden Perl-Interpreters. Diese Variable sollte nicht mehr verwendet werden. Stattdessen wird zu <code>$^V</code> geraten.</td>
<td class="code"><pre>print $];</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="debugging">$^D</a></code></td>
<td class="code" nowrap="nowrap"><code>$DEBUGGING</code></td>
<td class="tabxpl">Enthält den aktuellen Wert der Debugging-Flags (Ergebnis der Perl-Aufrufoption <kbd>-D</kbd>).</td>
<td class="code"><pre>print $^D;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="system_fd_max">$^F</a></code></td>
<td class="code" nowrap="nowrap"><code>$SYSTEM_FD_MAX</code></td>
<td class="tabxpl">Enthält den Wert des höchsten offenen Dateidescriptors - normalerweise den Wert <code>2</code>.</td>
<td class="code"><pre>print $^F;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="compile_time_hints">$^H</a></code></td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Enthält die Anzahl von Syntaxprüfungen, die Perl bei der Angabe von <code>use strict;</code> und anderen Angaben zu strenger Syntaxprüfung durchführt.</td>
<td class="code"><pre>print $^H;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="inplace_edit">$^I</a></code></td>
<td class="code" nowrap="nowrap"><code>$INPLACE_EDIT</code></td>
<td class="tabxpl">ist <code>defined</code> oder <code>undef</code>, je nachdem, ob das Inplace-Edit-Flag gesetzt ist oder nicht.</td>
<td class="code"><pre>print $^I;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="emergency_memory_pool">$^M</a></code></td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Kann Daten aufnehmen für den Fall, dass Perl die Ausführung des Scripts wegen Arbeitsspeichermangel nicht fortführen kann. Die nebenstehende Anweisung reserviert 64 Kilobyte Arbeitsspeicher für den Fall, dass Perl bei der Ausführung des Scripts keinen neuen Arbeitsspeicher mehr für benötigte Daten reservieren kann.<br>
Dieses Feature muss bei der Übersetzung des Perl-Interpreters explizit aktiviert werden, damit es benutzbar ist.</td>
<td class="code"><pre>$^M = 'a' x (1&lt;&lt;16);</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="osname">$^O</a></code></td>
<td class="code" nowrap="nowrap"><code>$OSNAME</code></td>
<td class="tabxpl">Name des Betriebssystems.</td>
<td class="code"><pre>print $^O;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="perldb">$^P</a></code></td>
<td class="code" nowrap="nowrap"><code>$PERLDB</code></td>
<td class="tabxpl">Enthält den aktuellen Debug-Status.</td>
<td class="code"><pre>print $^P;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="exceptions_being_caught">$^S</a></code></td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Enthält den aktuellen Zustand des Perl-Interpreters. Wenn ein Aufruf von <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/kontrolle.htm#eval">eval</a> nicht beendet ist, hat diese Variable den Wert <var>undef</var>.</td>
<td class="code"><pre>eval { system("rm_all_old"); };
print $^S;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="basetime">$^T</a></code></td>
<td class="code" nowrap="nowrap"><code>$BASETIME</code></td>
<td class="tabxpl">Enthält den Zeitpunkt, zu dem das Scipt gestartet wurde. Der Wert entspricht der Zahl an Sekunden, die vom 1.1.1970, 0.00 Uhr, bis zum Startzeitpunkt des Scripts vergangen sind.</td>
<td class="code"><pre>print "Start: $^T, ";
sleep(3);
my $jetzt = time;
print "und jetzt: $jetzt";</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="perl_version">$^V</a></code></td>
<td class="code" nowrap="nowrap"><code>$PERL_VERSION</code></td>
<td class="tabxpl">Enthält die genaue Versionsnummer des ausführenden Perl-Interpreters in Form von Ordinalwerten. Um die Daten sichtbar zu machen, verwenden Sie <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/zeichenketten.htm#sprintf">sprintf</a> oder <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/einausgabe.htm#printf">printf</a> und den speziellen Formatbezeichner <code>%vd</code>.</td>
<td class="code"><pre>printf "%vd", $^V;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="warning">$^W</a></code></td>
<td class="code" nowrap="nowrap"><code>$WARNING</code></td>
<td class="tabxpl">Ist wahr (1), wenn die Perl-Aufrufoption <kbd>-w</kbd> gesetzt ist, und unwahr (0), wenn sie nicht gesetzt ist.</td>
<td class="code"><pre>print "Vorsicht!" if($^W);</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="executable_name">$^X</a></code></td>
<td class="code" nowrap="nowrap"><code>$EXECUTABLE_NAME</code></td>
<td class="tabxpl">Enthält den Namen der ausführbaren Datei des Perl-Interpreters, der das Script ausführt.</td>
<td class="code"><pre>print $^X;</pre></td>
</tr>
</table>
<br>&nbsp;



<p class="doc"><a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a><a href="#bottom"><img src="../../src/down.gif" width="14" height="10" border="0" alt="nach unten"></a></p>



<h2><a class="an" name="arrays_hashes">Vordefinierte Listen und Hashes</a></h2>

<table class="reftable" cellpadding="3" cellspacing="0" border="1">
<tr>
<th nowrap="nowrap">Kurzform</th>
<th nowrap="nowrap">Langform</th>
<th nowrap="nowrap">Bedeutung</th>
<th nowrap="nowrap">Kleines Beispiel</th>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="subroutine_parameters">@_</a></code></td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Enthält die Parameter, die beim Aufruf einer <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="subroutinen.htm">Subroutine</a> übergeben wurden. Innerhalb der Subroutine sind die übergebenen Parameter mit <code>$_[0]</code> (= erster Parameter), <code>$_[1]</code> (= zweiter Parameter) usw. ansprechbar. <code>@_</code> ist innerhalb von Subroutinen das Standardargument für den Aufruf der Funktion <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../funktionen/listenhashes.htm#shift">shift</a>. Sie können also den ersten übergebenen Parameter z.B. mit <code>my $erster = shift;</code> der Variable <code>$erster</code> zuweisen und gleichzeitig aus der Parameterliste entfernen.</td>
<td class="code"><pre>&amp;Sprich("Hallo Welt");
sub Sprich {
 print $_[0];
}</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="argv">@ARGV</a></code></td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Enthält die Parameter, die beim Aufruf des Perl-Scripts mit übergeben wurden. Wenn z.B. <kbd>perl test.pl meintext.txt</kbd> eingegeben wurde, ist <var>meintext.txt</var> der erste Parameter aus Sicht des Perl-Scripts. Das Script kann Parameter als Input für den Programmablauf auswerten. Im nebenstehenden Beispiel wird der erste übergebene Parameter <code>$ARGV[0]</code> als Dateiname interpretiert. Das Script versucht, diese Datei zu öffnen.<br>
<code>@ARGV</code> ist im globalen Dateikontext das Standardargument für den Aufruf der Funktion <code>shift</code>.
</td>
<td class="code"><pre>if (open(DATEI, "&lt; $ARGV[0]")) {
  print "$ARGV[0] geöffnet!";
  close(DATEI);
}
</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="inc">@INC</a></code></td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Enthält die Pfade, in denen Perl nach eingebundenen Modulen sucht.</td>
<td class="code"><pre>print @INC;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="isa">@ISA</a></code></td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Enthält eine Liste von Basisklassen, deren Methoden eine Klasse bei objektorientierter Programmierung erben soll.</td>
<td class="code"><pre>use vars qw(@ISA);
@ISA = qw(Base);
print @ISA;</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="export">@EXPORT</a></code></td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Bei Modulen einsetzbar. Kann Namen des Moduls aufnehmen, die in den Namensraum eines einbindenden Scripts auf jeden Fall exportiert werden. Siehe <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../module/intro.htm#use_erweitert">Erweiterte Verwendung von use</a>.</td>
<td class="code"><pre>@EXPORT = qw(%FORMULARFELDER);</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="export_ok">@EXPORT_OK</a></code></td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Bei Modulen einsetzbar. Kann Namen des Moduls aufnehmen, die ein einbindendes Script in den eigenen Namensraum übernehmen kann, aber nicht übernehmen muss. Siehe <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../module/intro.htm#use_erweitert">Erweiterte Verwendung von use</a>.</td>
<td class="code"><pre>@EXPORT_OK = qw($Zeitstempel @Logdaten);
</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="env">%ENV</a></code></td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Enthält Umgebungsvariablen, die beim Aufruf des Scripts vom aufrufenden System übergeben wurden. Bei CGI-Scripts werden die Umgebungsvariablen vom Webserver gesetzt und sind als <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../servercgi/cgi/umgebungsvariablen.htm">CGI-Umgebungsvariablen</a> verfügbar.</td>
<td class="code"><pre>$, = "\n";
print keys(%ENV);</pre></td>
</tr>
<tr>
<td class="code" nowrap="nowrap"><code><a name="sig">%SIG</a></code></td>
<td class="code" nowrap="nowrap"><code>&nbsp;</code></td>
<td class="tabxpl">Enthält die zur Verfügung stehenden Signal-Handler, die einem Perl-Script erlauben, auf definierte Signale, die es von anderen laufenden Prozessen erhält, zu reagieren.</td>
<td class="code"><pre>$, = "\n";
print keys(%SIG);
</pre></td>
</tr>
</table>
<br>&nbsp;



<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" class="doc">
&nbsp;<a href="#top"><img src="../../src/up.gif" width="14" height="10" border="0" alt="nach oben"></a>
</td></tr>
<tr><td class="doc"><a href="zeichenketten.htm"><img src="../../src/next.gif" width="10" height="10" border="0" hspace="10" alt="weiter"></a></td>
<td width="100%"><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="zeichenketten.htm">Zeichenketten (Strings)</a>
</td></tr>
<tr>
<td class="doc"><a href="referenzen.htm"><img src="../../src/prev.gif" width="10" height="10" border="0" hspace="10" alt="zurück"></a></td>
<td><img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="referenzen.htm">Referenzen bzw. Zeiger (Variablen)</a>
</td>
</tr>
<tr><td colspan="2" class="doc">&nbsp;</td>
</tr>
<tr>
<td colspan="2" class="nav"><a class="an" name="bottom"><img src="../../src/refkap.gif" width="16" height="13" alt="Teil von"></a> <a href="../../index.htm">SELFHTML</a>/<a href="../../navigation/index.htm" target="_parent" class="navh">Navigationshilfen</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="../index.htm">Perl</a> <img src="../../src/refkap.gif" width="16" height="13" alt="Teil von">&nbsp;<a href="index.htm">Perl-Sprachelemente</a></td>
</tr>
</table>

<p>&copy; 2007 <img src="../../src/dok.gif" width="15" height="10" alt="Seite">&nbsp;<a href="../../editorial/impressum.htm">Impressum</a></p>

</body>
</html>
